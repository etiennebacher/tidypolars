[{"path":"https://tidypolars.etiennebacher.com/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidypolars","title":"Contributing to tidypolars","text":"outlines propose change tidypolars.","code":""},{"path":"https://tidypolars.etiennebacher.com/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidypolars","text":"Small typos grammatical errors vignettes can fixed directly Github interface since vignettes automatically rendered pkgdown. Fixing typos documentation functions (“Reference” page) requires editing source corresponding .R file run devtools::document(). edit .Rd file man/.","code":""},{"path":"https://tidypolars.etiennebacher.com/CONTRIBUTING.html","id":"filing-an-issue","dir":"","previous_headings":"","what":"Filing an issue","title":"Contributing to tidypolars","text":"easiest way propose change new feature file issue. ’ve found bug, may also create associated issue. possible, try illustrate proposal bug minimal reproducible example.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/CONTRIBUTING.html","id":"general-information","dir":"","previous_headings":"Pull requests","what":"General information","title":"Contributing to tidypolars","text":"Please create Git branch pull request (PR). tidypolars uses roxygen2, Markdown syntax, documentation. PR user-visible change, may add bullet point NEWS.md describing changes made. may optionally add GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://tidypolars.etiennebacher.com/CONTRIBUTING.html","id":"how-to-add-support-for-an-r-function-in-tidypolars","dir":"","previous_headings":"Pull requests","what":"How to add support for an R function in tidypolars?","title":"Contributing to tidypolars","text":"use function supported, tidypolars throw error. doesn’t mean tidypolars support , simply implemented yet. tidypolars can technically support hundreds functions manipulate numbers, strings, dates, limited tidyverse. first step come across unsupported function find corresponding syntax polars. Just example, suppose stringr::str_ends() yet supported (actually ). first define simple test data.frame DataFrame counterpart polars: , find polars syntax gives output stringr::str_ends(). case, polars string methods $ends_with(): interests us expression inside $with_columns() call. Now know polars translation, let’s put function tidypolars know. Internally, tidypolars prefix function name (str_ends) pl_ look translated functions. Depending function translate, can stored different places. function works strings, can store R/funs-string.R. add support negate argument, look like: can notice new function must named pl_<function_name>_<package_name>. multiple packages can export functions name (example data.table::() dplyr::()). Therefore, want ensure translation called function comes specific package. check_empty_dots(...) grab additional arguments stringr::str_ends() might ignore counterparts polars (also adds message warning user arguments used). package reloaded, can use function tidypolars workflow: Finally, thing left add tests tests/testthat folder.","code":"library(dplyr, warn.conflicts = FALSE) library(stringr) library(polars)  test <- tibble(x = c(\"abc\", \"a1\", \"dac\")) test_pl <- pl$DataFrame(x = c(\"abc\", \"a1\", \"dac\")) test |>    mutate(ends_with_c = str_ends(x, \"c\")) ## # A tibble: 3 × 2 ##   x     ends_with_c ##   <chr> <lgl>       ## 1 abc   TRUE        ## 2 a1    FALSE       ## 3 dac   TRUE test_pl$with_columns(   ends_with_c = pl$col(\"x\")$str$ends_with(\"c\") ) ## shape: (3, 2) ## ┌─────┬─────────────┐ ## │ x   ┆ ends_with_c │ ## │ --- ┆ ---         │ ## │ str ┆ bool        │ ## ╞═════╪═════════════╡ ## │ abc ┆ true        │ ## │ a1  ┆ false       │ ## │ dac ┆ true        │ ## └─────┴─────────────┘ pl_str_ends_stringr <- function(string, pattern, negate = FALSE, ...) {   check_empty_dots(...)   out <- string$str$ends_with(pattern)   if (isTRUE(negate)) {     out$not()   } else {     out   } } library(tidypolars, warn.conflicts = FALSE)  test_pl |>    mutate(ends_with_c = str_ends(x, \"c\")) ## shape: (3, 2) ## ┌─────┬─────────────┐ ## │ x   ┆ ends_with_c │ ## │ --- ┆ ---         │ ## │ str ┆ bool        │ ## ╞═════╪═════════════╡ ## │ abc ┆ true        │ ## │ a1  ┆ false       │ ## │ dac ┆ true        │ ## └─────┴─────────────┘"},{"path":"https://tidypolars.etiennebacher.com/CONTRIBUTING.html","id":"testing-changes","dir":"","previous_headings":"Pull requests","what":"Testing changes","title":"Contributing to tidypolars","text":"tidypolars uses testthat check functions expected output. changes affect behavior functions (example adding extra argument), add tests related file tests/testthat. tidyverse functions apply entire dataframe (e.g., drop_na()) test file (test-drop_na.R case). Functions apply one multiple vectors (.e. functions used mutate(), summarize(), etc.) tested specific files. added function R/funs-string.R, add tests tests/testthat/test-funs_string.R (datetime functions, etc.). matter type function added modified, write tests Polars DataFrames. automatically modified running tests run LazyFrames well (instance, file test-drop_na-lazy.R automatically generated).","code":""},{"path":"https://tidypolars.etiennebacher.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidypolars authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/faq.html","id":"is-tidypolars-slower-than-polars","dir":"Articles","previous_headings":"","what":"Is tidypolars slower than polars?","title":"FAQ","text":", just marginally. objective tidypolars modify data, simply translate tidyverse syntax polars syntax. polars still charge data manipulations hood. Therefore, might minor overhead still need parse expressions rewrite polars syntax (see Parsing expressions vignette) marginal.","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/faq.html","id":"am-i-stuck-with-tidypolars","dir":"Articles","previous_headings":"","what":"Am I stuck with tidypolars?","title":"FAQ","text":", tidypolars always return DataFrames, LazyFrames Series. Therefore, point want use polars need control want reduce number dependencies, can easily .","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/faq.html","id":"do-i-still-need-to-load-polars","dir":"Articles","previous_headings":"","what":"Do I still need to load polars?","title":"FAQ","text":"Yes, tidypolars doesn’t provide functions create polars DataFrame LazyFrame read data. ’ll still need use polars .","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/faq.html","id":"can-i-see-some-benchmarks-with-other-tools","dir":"Articles","previous_headings":"","what":"Can I see some benchmarks with other tools?","title":"FAQ","text":"Making accurate benchmarks data wrangling tools difficult won’t try (just put one homepage give idea performance, means comprehensive). refer DuckDB benchmarks.","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/how-to-benchmark.html","id":"do-not-include-as_polars_df-or-as_polars_lf-in-the-timing","dir":"Articles","previous_headings":"","what":"Do not include as_polars_df() or as_polars_lf() in the timing","title":"How to benchmark tidypolars","text":"benchmarks something like following: issue approach as_polars_df() converts R data.frame Polars DataFrame, takes time. highlighted “Getting started” vignette, as_polars_df() as_polars_lf() convenience functions demo testing purposes. recommended way use tidypolars using dedicated readers (scan_parquet_polars(), read_parquet_polars(), etc.) import data directly Polars DataFrame LazyFrame. Using as_polars_df() as_polars_lf() fine get data ready benchmarked, operations included timing.","code":"my_function <- function(dat) {   dat <- as_polars_df(dat)   dat |>     <some slow operation> }  bench::mark(   my_function(my_r_data_frame) )"},{"path":"https://tidypolars.etiennebacher.com/articles/how-to-benchmark.html","id":"use-lazy-execution-when-possible","dir":"Articles","previous_headings":"","what":"Use lazy execution when possible","title":"How to benchmark tidypolars","text":"Polars provides DataFrames LazyFrames. Operations DataFrames executed “eager mode”, meaning optimization happening behind scenes, instance efficiently reorder operations. real-life workflows, strongly recommended use LazyFrames since allow large number optimizations. benchmarks demos, therefore prefer as_polars_lf() as_polars_df(). Using LazyFrames means also need collect results trigger computation. can done using compute() (return Polars DataFrame), collect() (return R data.frame), as_tibble() (return tibble). Depending objective benchmark, three options can valid. compute() faster avoids extra step converting Polars DataFrame R. However, output compute() passed directly ggplot2, example. summary, instead : :","code":"my_polars_data <- as_polars_df(my_r_data_frame)  my_function <- function(dat) {   my_polars_data |>     <some slow operation> }  bench::mark(   my_function(my_polars_data) ) my_polars_data <- as_polars_lf(my_r_data_frame) # Use as_polars_lf()  my_function <- function(dat) {   my_polars_data |>     <some slow operation> |>     compute() # Or collect() or as_tibble() }  bench::mark(   my_function(my_polars_data) )"},{"path":"https://tidypolars.etiennebacher.com/articles/how-to-benchmark.html","id":"use-streaming-mode-when-possible","dir":"Articles","previous_headings":"","what":"Use streaming mode when possible","title":"How to benchmark tidypolars","text":"addition lazy execution, Polars comes streaming engine able perform operations larger--RAM data. also faster default engine many cases, just larger--RAM data. Note: time writing (August 2025), streaming engine yet used default, become default next months. Using extremely simple: pass engine = \"streaming\" compute(), collect() as_tibble().","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/how-to-benchmark.html","id":"do-not-try-to-run-tidypolars-in-parallel","dir":"Articles","previous_headings":"","what":"Do not try to run tidypolars in parallel","title":"How to benchmark tidypolars","text":"benchmarks take advantage tools future mirai run code parallel. However, tidypolars shouldn’t used tools. polars code used internally already optimized run cores isn’t guaranteed play well parallel frameworks. cases, may want use frameworks Polars objects, exception rather rule.","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/r-and-polars-expressions.html","id":"how-does-tidypolars-translate-r-expressions-into-polars-expressions","dir":"Articles","previous_headings":"","what":"How does tidypolars translate R expressions into Polars expressions?","title":"R and Polars expressions","text":"tidypolars receives expression, runs function translate() several times components translated Polars equivalent. four possible components: single values, column names, external objects, functions.","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/r-and-polars-expressions.html","id":"single-values-column-names-and-external-objects","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions?","what":"Single values, column names, and external objects","title":"R and Polars expressions","text":"pass single value, like x = 1 x = \"\", wrapped pl$lit(). also case external objects difference need wrapped {{ }} evaluated wrapped pl$lit(). Column names, like x = mpg, wrapped pl$col().","code":"x = \"a\"               ->  x = pl$lit(\"a\") x = {{ some_value }}  ->  x = pl$lit(*value*) x = mpg               ->  x = pl$col(\"mpg\")"},{"path":"https://tidypolars.etiennebacher.com/articles/r-and-polars-expressions.html","id":"functions","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions?","what":"Functions","title":"R and Polars expressions","text":"Functions split two categories: built-functions (.e functions provided base R packages), user-defined functions (UDF) written user ().","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/r-and-polars-expressions.html","id":"built-in-functions","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions? > Functions","what":"Built-in functions","title":"R and Polars expressions","text":"first case, tidypolars checks function name whether already translated internally. example, call R function mean(x, trim = 2), looks translation mean(). can see list supported R functions bottom vignette. Note essential base R functions supported, well many functions dplyr stringr example. Now tidypolars knows translation mean() exists, parses arguments call translate Polars syntax: internally, x converted pl$col(\"x\") column \"x\" data. Sometimes, additional arguments equivalent Polars. case argument trim . case, tidypolars ignores argument warns user: behavior can changed throw error instead.","code":"library(tidypolars) library(polars)  mtcars |>   as_polars_df() |>   mutate(x = mean(mpg, trim = 2)) #> Warning: tidypolars doesn't know how to use some arguments of `mean()`. #> ℹ The following argument(s) will be ignored: \"trim\". #> shape: (32, 12) #> ┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬───────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ x         │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---       │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ f64       │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪═══════════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 20.090625 │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 20.090625 │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 4.0  ┆ 1.0  ┆ 20.090625 │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 1.0  ┆ 20.090625 │ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 2.0  ┆ 20.090625 │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …    ┆ …    ┆ …         │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 2.0  ┆ 20.090625 │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 4.0  ┆ 20.090625 │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 6.0  ┆ 20.090625 │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 8.0  ┆ 20.090625 │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 2.0  ┆ 20.090625 │ #> └──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴───────────┘"},{"path":"https://tidypolars.etiennebacher.com/articles/r-and-polars-expressions.html","id":"user-defined-functions","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions? > Functions","what":"User-defined functions","title":"R and Polars expressions","text":"User-defined functions (UDF) challenging. Indeed, technically possible inspect code inside UDF, rewriting match Polars syntax extremely complicated. situation, rewrite custom function using Polars syntax returns Polars expression. example, make function standardize column like : Remember column name used x end wrapped pl$col(), check function returns Polars expression, provide pl$col() call: function correctly returns Polars expression, can now use like function:","code":"pl_standardize <- function(x) {   (x - x$mean()) / x$std() } pl_standardize(pl$col(\"mpg\")) #> [([(col(\"mpg\")) - (col(\"mpg\").mean())]) / (col(\"mpg\").std())] mtcars |>   as_polars_df() |>   mutate(x = pl_standardize(mpg)) #> shape: (32, 12) #> ┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬───────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ x         │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---       │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ f64       │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪═══════════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 0.150885  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 0.150885  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 4.0  ┆ 1.0  ┆ 0.449543  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 1.0  ┆ 0.217253  │ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 2.0  ┆ -0.230735 │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …    ┆ …    ┆ …         │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 2.0  ┆ 1.710547  │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 4.0  ┆ -0.711907 │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 6.0  ┆ -0.064813 │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 8.0  ┆ -0.844644 │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 2.0  ┆ 0.217253  │ #> └──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴───────────┘"},{"path":"https://tidypolars.etiennebacher.com/articles/r-and-polars-expressions.html","id":"special-case-across","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions? > Functions","what":"Special case: across()","title":"R and Polars expressions","text":"across() useful function applies function (list functions) selection columns. accepts built-functions, UDFs, anonymous functions. Similarly, UDFs anonymous functions error don’t return Polars expression:","code":"mtcars |>   as_polars_df() |>   mutate(     across(       .cols = contains(\"a\"),       list(mean = mean, stand = pl_standardize, ~ sd(.x))     )   ) #> shape: (32, 23) #> ┌──────┬─────┬───────┬───────┬───┬──────────┬───────────┬────────────┬────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ gear_3   ┆ carb_mean ┆ carb_stand ┆ carb_3 │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ ---      ┆ ---       ┆ ---        ┆ ---    │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64      ┆ f64       ┆ f64        ┆ f64    │ #> ╞══════╪═════╪═══════╪═══════╪═══╪══════════╪═══════════╪════════════╪════════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ 0.735203   ┆ 1.6152 │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ 0.735203   ┆ 1.6152 │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 0.737804 ┆ 2.8125    ┆ -1.122152  ┆ 1.6152 │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ -1.122152  ┆ 1.6152 │ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ -0.503034  ┆ 1.6152 │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …        ┆ …         ┆ …          ┆ …      │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ -0.503034  ┆ 1.6152 │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ 0.735203   ┆ 1.6152 │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ 1.97344    ┆ 1.6152 │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ 3.211677   ┆ 1.6152 │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ -0.503034  ┆ 1.6152 │ #> └──────┴─────┴───────┴───────┴───┴──────────┴───────────┴────────────┴────────┘ mtcars |>   as_polars_df() |>   mutate(     across(       .cols = contains(\"a\"),       .fns = list(         mean = mean,         function(x) {           (x - mean(x)) / sd(x)         },         ~ sd(.x)       )     )   ) #> Error in `mutate()`: #> ! Could not evaluate an anonymous function in `across()`. #> ℹ Are you sure the anonymous function returns a Polars expression?"},{"path":"https://tidypolars.etiennebacher.com/articles/r-and-polars-expressions.html","id":"non-translated-functions","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions? > Functions","what":"Non-translated functions","title":"R and Polars expressions","text":"function provided base R another package translated, tidypolars usually throws error (’s necessary understand agrep() , know translated tidypolars): foo >= agrep(\"\", ) uses values columns foo, stored polars DataFrame. Therefore, polars needs translation agrep(), doesn’t exist. Now, let’s assume data instead: Starting tidypolars 0.14.0, doesn’t error anymore. ? reason foo >= agrep(\"\", ) uses column data (foo), agrep(\"\", ) longer since object environment data anymore. Therefore, can evaluate agrep(\"\", ) first use result evaluating foo >= agrep(\"\", ). generally, tidypolars checks whether function uses columns data skips translation part doesn’t, allowing us use functions translated tidypolars (don’t use columns inputs). Note expressions don’t use data evaluated running polars background don’t benefit polars parallel evaluation instance.","code":"dat <- pl$DataFrame(a = c(\"d\", \"e\", \"f\"), foo = c(2, 1, 2))  dat |>   filter(foo >= agrep(\"a\", a)) #> Error in `filter()`: #> ! tidypolars doesn't know how to translate this function: `agrep()` #>   (from package base). #> ℹ You can ask for it to be translated here: #>   <https://github.com/etiennebacher/tidypolars/issues>. #> ℹ See `?tidypolars_options` to set automatic fallback to R to handle unknown #>   functions. dat <- pl$DataFrame(foo = c(2, 1, 2)) a <- c(\"d\", \"e\", \"f\")  dat |>   filter(foo >= agrep(\"a\", a)) #> shape: (1, 1) #> ┌─────┐ #> │ foo │ #> │ --- │ #> │ f64 │ #> ╞═════╡ #> │ 2.0 │ #> └─────┘"},{"path":"https://tidypolars.etiennebacher.com/articles/r-and-polars-expressions.html","id":"a-note-on-performance","dir":"Articles","previous_headings":"","what":"A note on performance","title":"R and Polars expressions","text":"saw , large part work tidypolars translate existing R code polars equivalent. takes time, especially translating R expressions used mutate() filter() instance, might noticeable run tidypolars many times small datasets. translation process takes time number expressions increases doesn’t depend size data. words, translating code R polars takes time applied dataset 1M 10M observations. Therefore, drawback become less less noticeable size dataset increases since time taken actual computation performed polars.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/articles/tidypolars.html","id":"eager-and-lazy-evaluation","dir":"Articles","previous_headings":"","what":"Eager and lazy evaluation","title":"Getting started","text":"start writing code, important understand data structures polars hence tidypolars. use tidypolars, need import data Polars DataFrames LazyFrames. DataFrame similar standard R data.frame (tibble tidyverse). functions applied DataFrame eagerly evaluated. means executed one , without knowing data pipeline located. Therefore, applying function DataFrame returns another DataFrame can directly explore. LazyFrame, hand, doesn’t immediately run functions applied . Instead, data pipeline built isn’t executed specific functions called (see ). lazy evaluation, advantage approach allows query optimizations. Eager vs Lazy: brief example Suppose data several countries several years. might want sort data country year, interested subset countries.  sort data filter , may waste time energy sorting much slower filtering. keeping track optimal order operations hard. Using LazyFrame allows bypass : query executed, optimized various ways. case, polars detects filter called sort rearranges code run filter early possible sort afterwards. kind optimization possible DataFrame, since functions immediately evaluated. optimal performance, recommended use LazyFrames code can take advantages optimizations made polars. DataFrames can used medium-sized datasets cases frequently want see data. can case explore sample final data use.","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/tidypolars.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing data","title":"Getting started","text":"tidypolars, can read files various read_*_polars() functions (read_parquet_polars()) import DataFrames, scan_*_polars() functions (scan_parquet_polars()) import LazyFrames. several functions import various file formats, CSV, Parquet, JSON. R Polars examples tutorials, functions as_polars_df() as_polars_lf() sometimes used convert existing R data.frame Polars DataFrame LazyFrame. merely convenience functions quickly convert existing dataset Polars, useful showcase purposes. However, conversion R Polars cost hurts performance. real-life usecases, sure load data read_*() scan_*() functions mentioned .","code":""},{"path":"https://tidypolars.etiennebacher.com/articles/tidypolars.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Getting started","text":", ’re going use dataset available tidyr package. import classic R data.frame Polars DataFrame can easily compare dplyr tidypolars functions. tidypolars provides methods dplyr tidyr S3 generics. simpler words, means can use functions Polars DataFrame LazyFrame classic tidyverse workflow just work (doesn’t, please open issue). Note still need load dplyr tidyr code. ’s example dplyr tidyr code classic R data.frame: can simply use Polars dataset instead: use Polars LazyFrame, need call compute() end chained expression evaluate query: Evaluate lazy query Several functions trigger evaluation lazy query: compute(), collect(), .data.frame(), as_tibble(). want return Polars DataFrame, use compute(). want return standard R data.frame, example use statistical analysis, use three functions. aware dataset big compared available memory, crash R session. tidypolars also supports many functions base, lubridate stringr. used inside filter(), mutate() summarize(), tidypolars automatically convert use Polars engine hood. Take look vignette “R Polars expressions” information.","code":"library(polars) library(tidypolars) library(dplyr, warn.conflicts = FALSE) library(tidyr, warn.conflicts = FALSE)  who_df <- tidyr::who who_pl <- as_polars_df(tidyr::who) who_df |>   filter(year > 1990) |>   drop_na(newrel_f3544) |>   select(iso3, year, matches(\"^newrel(.*)_f\")) |>   arrange(iso3, year) |>   rename_with(.fn = toupper) |>   head() #> # A tibble: 6 × 9 #>   ISO3   YEAR NEWREL_F014 NEWREL_F1524 NEWREL_F2534 NEWREL_F3544 NEWREL_F4554 #>   <chr> <dbl>       <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #> 1 AGO    2013         626         2644         2480         1671          991 #> 2 AIA    2013           0            0            0            0            0 #> 3 ALB    2013           5           28           34           13           18 #> 4 AND    2013           0            0            0            1            0 #> 5 ARE    2013           5            4            9            3            3 #> 6 ARG    2013         431          927          808          537          395 #> # ℹ 2 more variables: NEWREL_F5564 <dbl>, NEWREL_F65 <dbl> who_pl |>   filter(year > 1990) |>   drop_na(newrel_f3544) |>   select(iso3, year, matches(\"^newrel(.*)_f\")) |>   arrange(iso3, year) |>   rename_with(.fn = toupper) |>   head() #> shape: (6, 9) #> ┌──────┬────────┬─────────────┬────────────┬───┬────────────┬────────────┬────────────┬────────────┐ #> │ ISO3 ┆ YEAR   ┆ NEWREL_F014 ┆ NEWREL_F15 ┆ … ┆ NEWREL_F35 ┆ NEWREL_F45 ┆ NEWREL_F55 ┆ NEWREL_F65 │ #> │ ---  ┆ ---    ┆ ---         ┆ 24         ┆   ┆ 44         ┆ 54         ┆ 64         ┆ ---        │ #> │ str  ┆ f64    ┆ f64         ┆ ---        ┆   ┆ ---        ┆ ---        ┆ ---        ┆ f64        │ #> │      ┆        ┆             ┆ f64        ┆   ┆ f64        ┆ f64        ┆ f64        ┆            │ #> ╞══════╪════════╪═════════════╪════════════╪═══╪════════════╪════════════╪════════════╪════════════╡ #> │ AGO  ┆ 2013.0 ┆ 626.0       ┆ 2644.0     ┆ … ┆ 1671.0     ┆ 991.0      ┆ 481.0      ┆ 314.0      │ #> │ AIA  ┆ 2013.0 ┆ 0.0         ┆ 0.0        ┆ … ┆ 0.0        ┆ 0.0        ┆ 0.0        ┆ 0.0        │ #> │ ALB  ┆ 2013.0 ┆ 5.0         ┆ 28.0       ┆ … ┆ 13.0       ┆ 18.0       ┆ 14.0       ┆ 34.0       │ #> │ AND  ┆ 2013.0 ┆ 0.0         ┆ 0.0        ┆ … ┆ 1.0        ┆ 0.0        ┆ 0.0        ┆ 0.0        │ #> │ ARE  ┆ 2013.0 ┆ 5.0         ┆ 4.0        ┆ … ┆ 3.0        ┆ 3.0        ┆ 1.0        ┆ 6.0        │ #> │ ARG  ┆ 2013.0 ┆ 431.0       ┆ 927.0      ┆ … ┆ 537.0      ┆ 395.0      ┆ 307.0      ┆ 374.0      │ #> └──────┴────────┴─────────────┴────────────┴───┴────────────┴────────────┴────────────┴────────────┘ who_pl_lazy <- as_polars_lf(tidyr::who)  who_pl_lazy |>   filter(year > 1990) |>   drop_na(newrel_f3544) |>   select(iso3, year, matches(\"^newrel(.*)_f\")) |>   arrange(iso3, year) |>   rename_with(.fn = toupper) |>   compute() |>   head() #> shape: (6, 9) #> ┌──────┬────────┬─────────────┬────────────┬───┬────────────┬────────────┬────────────┬────────────┐ #> │ ISO3 ┆ YEAR   ┆ NEWREL_F014 ┆ NEWREL_F15 ┆ … ┆ NEWREL_F35 ┆ NEWREL_F45 ┆ NEWREL_F55 ┆ NEWREL_F65 │ #> │ ---  ┆ ---    ┆ ---         ┆ 24         ┆   ┆ 44         ┆ 54         ┆ 64         ┆ ---        │ #> │ str  ┆ f64    ┆ f64         ┆ ---        ┆   ┆ ---        ┆ ---        ┆ ---        ┆ f64        │ #> │      ┆        ┆             ┆ f64        ┆   ┆ f64        ┆ f64        ┆ f64        ┆            │ #> ╞══════╪════════╪═════════════╪════════════╪═══╪════════════╪════════════╪════════════╪════════════╡ #> │ AGO  ┆ 2013.0 ┆ 626.0       ┆ 2644.0     ┆ … ┆ 1671.0     ┆ 991.0      ┆ 481.0      ┆ 314.0      │ #> │ AIA  ┆ 2013.0 ┆ 0.0         ┆ 0.0        ┆ … ┆ 0.0        ┆ 0.0        ┆ 0.0        ┆ 0.0        │ #> │ ALB  ┆ 2013.0 ┆ 5.0         ┆ 28.0       ┆ … ┆ 13.0       ┆ 18.0       ┆ 14.0       ┆ 34.0       │ #> │ AND  ┆ 2013.0 ┆ 0.0         ┆ 0.0        ┆ … ┆ 1.0        ┆ 0.0        ┆ 0.0        ┆ 0.0        │ #> │ ARE  ┆ 2013.0 ┆ 5.0         ┆ 4.0        ┆ … ┆ 3.0        ┆ 3.0        ┆ 1.0        ┆ 6.0        │ #> │ ARG  ┆ 2013.0 ┆ 431.0       ┆ 927.0      ┆ … ┆ 537.0      ┆ 395.0      ┆ 307.0      ┆ 374.0      │ #> └──────┴────────┴─────────────┴────────────┴───┴────────────┴────────────┴────────────┴────────────┘"},{"path":"https://tidypolars.etiennebacher.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Etienne Bacher. Author, maintainer, copyright holder. Anatoly Tsyplenkov. Contributor.","code":""},{"path":"https://tidypolars.etiennebacher.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bacher E (2025). tidypolars: Efficient Tidyverse Code, Using Polars Background. R package version 0.14.1.9000, https://tidypolars.etiennebacher.com.","code":"@Manual{,   title = {tidypolars: More Efficient Tidyverse Code, Using Polars in the Background},   author = {Etienne Bacher},   year = {2025},   note = {R package version 0.14.1.9000},   url = {https://tidypolars.etiennebacher.com}, }"},{"path":"https://tidypolars.etiennebacher.com/index.html","id":"tidypolars-","dir":"","previous_headings":"","what":"More Efficient Tidyverse Code, Using Polars in the Background","title":"More Efficient Tidyverse Code, Using Polars in the Background","text":"ℹ️ R package “tidypolars”. Python one : markfairbanks/tidypolars","code":""},{"path":"https://tidypolars.etiennebacher.com/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"More Efficient Tidyverse Code, Using Polars in the Background","text":"tidypolars provides polars backend tidyverse. aim tidypolars enable users keep existing tidyverse code using polars background benefit large performance gains. thing needs change way data imported R session. See “Getting started” vignette gentle introduction tidypolars. Since work rewriting tidyverse code polars syntax, tidypolars polars similar performance. main purpose benchmark show polars tidypolars close give idea performance. thorough, representative benchmarks polars, take look DuckDB benchmarks instead. want benchmarks, please take look benchmark tidypolars first best practices.","code":"library(collapse, warn.conflicts = FALSE) #> collapse 2.1.3, see ?`collapse-package` or ?`collapse-documentation` library(dplyr, warn.conflicts = FALSE) library(dtplyr) library(polars) library(tidypolars)  large_iris <- data.table::rbindlist(rep(list(iris), 100000)) large_iris_pl <- as_polars_lf(large_iris) large_iris_dt <- lazy_dt(large_iris)  format(nrow(large_iris), big.mark = \",\") #> [1] \"15,000,000\"  bench::mark(   polars = {     large_iris_pl$       select(c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"))$       with_columns(         pl$when(           (pl$col(\"Petal.Length\") / pl$col(\"Petal.Width\") > 3)         )$then(pl$lit(\"long\"))$           otherwise(pl$lit(\"large\"))$           alias(\"petal_type\")       )$       filter(pl$col(\"Sepal.Length\")$is_between(4.5, 5.5))$       collect()   },   tidypolars = {     large_iris_pl |>       select(starts_with(c(\"Sep\", \"Pet\"))) |>       mutate(         petal_type = ifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")       ) |>       filter(between(Sepal.Length, 4.5, 5.5)) |>       compute()   },   dplyr = {     large_iris |>       select(starts_with(c(\"Sep\", \"Pet\"))) |>       mutate(         petal_type = ifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")       ) |>       filter(between(Sepal.Length, 4.5, 5.5))   },   dtplyr = {     large_iris_dt |>       select(starts_with(c(\"Sep\", \"Pet\"))) |>       mutate(         petal_type = ifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")       ) |>       filter(between(Sepal.Length, 4.5, 5.5)) |>       as.data.frame()   },   collapse = {     large_iris |>       fselect(c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\")) |>       fmutate(         petal_type = data.table::fifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")       ) |>       fsubset(Sepal.Length >= 4.5 & Sepal.Length <= 5.5)   },   check = FALSE,   iterations = 40 ) #> Warning: Some expressions had a GC in every iteration; so filtering is disabled. #> # A tibble: 5 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 polars     108.38ms 149.19ms     6.32     2.13MB    0.158 #> 2 tidypolars 118.42ms 247.73ms     3.61     1.22MB    0.452 #> 3 dplyr         2.94s    3.75s     0.269    1.79GB    0.658 #> 4 dtplyr     653.02ms 729.33ms     1.36     1.72GB    2.79  #> 5 collapse   269.73ms 368.59ms     2.69   745.96MB    2.63  # NOTE: do NOT take the \"mem_alloc\" results into account. # `bench::mark()` doesn't report the accurate memory usage for packages calling # Rust code."},{"path":"https://tidypolars.etiennebacher.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"More Efficient Tidyverse Code, Using Polars in the Background","text":"tidypolars built polars, available CRAN. means tidypolars also can’t CRAN. However, can install R-universe. development version contains latest improvements bug fixes:","code":"Sys.setenv(NOT_CRAN = \"true\") install.packages(\"tidypolars\", repos = c(\"https://community.r-multiverse.org\", 'https://cloud.r-project.org')) # install.packages(\"remotes\") remotes::install_github(\"etiennebacher/tidypolars\")"},{"path":"https://tidypolars.etiennebacher.com/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"More Efficient Tidyverse Code, Using Polars in the Background","text":"Several packages developed handle large data efficiently keeping tidyverse syntax: tidypolars different?: Polars (therefore tidypolars) uses unofficial Arrow memory specification. operations implemented (optimized) scratch, meaning query optimizations can different Acero. list R functions translated Arrow engine may also differ. tidypolars different?: tidypolars provides lazy evaluation memory-efficient since doesn’t import data memory. also provides streaming engine handle larger--RAM datasets. tidypolars different?: tidypolars doesn’t translate R code SQL directly evaluates Polars. tidypolars different?: collapse. tidypolars different?: similar arrow, list R functions optimized Polars DuckDB isn’t identical use case determine tool runs fastest. duckplyr also relies fallback mechanism run code “standard R” function translated. tidypolars conservative error case, avoiding importing data may crash session size. tidypolars different?: tidypolars doesn’t need installing another tool focuses processing data single machine, distributed processing. Therefore, need handle data larger memory, three options: arrow, duckplyr, tidypolars. best one probably depend use case constraints (e.g. tidypolars available via R-universe isn’t CRAN). Regarding performance, one refer DuckDB benchmarks compare tools. Keep mind accurately benchmarking data processing tools hard; benchmarks give useful information don’t necessarily apply contexts.","code":""},{"path":"https://tidypolars.etiennebacher.com/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"More Efficient Tidyverse Code, Using Polars in the Background","text":"find bugs errors documentation? want tidypolars support functions? Take look contributing guide instructions bug report pull requests.","code":""},{"path":"https://tidypolars.etiennebacher.com/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"More Efficient Tidyverse Code, Using Polars in the Background","text":"website theme heavily inspired Matthew Kay’s ggblend package: https://mjskay.github.io/ggblend/. package hex logo created Hubert Hałun part Appsilon Hex Contest.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/arrange.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Order rows using column values — arrange.polars_data_frame","title":"Order rows using column values — arrange.polars_data_frame","text":"Order rows using column values","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/arrange.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order rows using column values — arrange.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' arrange(.data, ..., .by_group = FALSE)"},{"path":"https://tidypolars.etiennebacher.com/reference/arrange.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order rows using column values — arrange.polars_data_frame","text":".data Polars Data/LazyFrame ... Variables, functions variables. Use desc() sort variable descending order. .by_group TRUE, sort data within groups.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/arrange.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order rows using column values — arrange.polars_data_frame","text":"","code":"pl_test <- polars::pl$DataFrame(   x1 = c(\"a\", \"a\", \"b\", \"a\", \"c\"),   x2 = c(2, 1, 5, 3, 1),   value = sample(1:5) )  arrange(pl_test, x1) #> shape: (5, 3) #> ┌─────┬─────┬───────┐ #> │ x1  ┆ x2  ┆ value │ #> │ --- ┆ --- ┆ ---   │ #> │ str ┆ f64 ┆ i32   │ #> ╞═════╪═════╪═══════╡ #> │ a   ┆ 2.0 ┆ 4     │ #> │ a   ┆ 1.0 ┆ 3     │ #> │ a   ┆ 3.0 ┆ 2     │ #> │ b   ┆ 5.0 ┆ 1     │ #> │ c   ┆ 1.0 ┆ 5     │ #> └─────┴─────┴───────┘ arrange(pl_test, x1, -x2) #> shape: (5, 3) #> ┌─────┬─────┬───────┐ #> │ x1  ┆ x2  ┆ value │ #> │ --- ┆ --- ┆ ---   │ #> │ str ┆ f64 ┆ i32   │ #> ╞═════╪═════╪═══════╡ #> │ a   ┆ 3.0 ┆ 2     │ #> │ a   ┆ 2.0 ┆ 4     │ #> │ a   ┆ 1.0 ┆ 3     │ #> │ b   ┆ 5.0 ┆ 1     │ #> │ c   ┆ 1.0 ┆ 5     │ #> └─────┴─────┴───────┘  # if the data is grouped, you need to specify `.by_group = TRUE` to sort by # the groups first pl_test |>   group_by(x1) |>   arrange(-x2, .by_group = TRUE) #> shape: (5, 3) #> ┌─────┬─────┬───────┐ #> │ x1  ┆ x2  ┆ value │ #> │ --- ┆ --- ┆ ---   │ #> │ str ┆ f64 ┆ i32   │ #> ╞═════╪═════╪═══════╡ #> │ a   ┆ 3.0 ┆ 2     │ #> │ a   ┆ 2.0 ┆ 4     │ #> │ a   ┆ 1.0 ┆ 3     │ #> │ b   ┆ 5.0 ┆ 1     │ #> │ c   ┆ 1.0 ┆ 5     │ #> └─────┴─────┴───────┘ #> Groups [3]: x1 #> Maintain order: FALSE"},{"path":"https://tidypolars.etiennebacher.com/reference/bind_cols_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Append multiple Data/LazyFrames next to each other — bind_cols_polars","title":"Append multiple Data/LazyFrames next to each other — bind_cols_polars","text":"Append multiple Data/LazyFrames next ","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/bind_cols_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append multiple Data/LazyFrames next to each other — bind_cols_polars","text":"","code":"bind_cols_polars(..., .name_repair = \"unique\")"},{"path":"https://tidypolars.etiennebacher.com/reference/bind_cols_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append multiple Data/LazyFrames next to each other — bind_cols_polars","text":"... Polars DataFrames LazyFrames combine. argument can either Data/LazyFrame, list Data/LazyFrames. Columns matched name. Data/LazyFrames must number rows duplicated column names. .name_repair Can \"unique\", \"universal\", \"check_unique\", \"minimal\". See vctrs::vec_as_names() explanations value.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/bind_cols_polars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append multiple Data/LazyFrames next to each other — bind_cols_polars","text":"","code":"p1 <- polars::pl$DataFrame(   x = sample(letters, 20),   y = sample(1:100, 20) ) p2 <- polars::pl$DataFrame(   z = sample(letters, 20),   w = sample(1:100, 20) )  bind_cols_polars(p1, p2) #> shape: (20, 4) #> ┌─────┬─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   ┆ w   │ #> │ --- ┆ --- ┆ --- ┆ --- │ #> │ str ┆ i32 ┆ str ┆ i32 │ #> ╞═════╪═════╪═════╪═════╡ #> │ d   ┆ 86  ┆ a   ┆ 6   │ #> │ f   ┆ 43  ┆ y   ┆ 22  │ #> │ i   ┆ 7   ┆ o   ┆ 19  │ #> │ e   ┆ 32  ┆ r   ┆ 2   │ #> │ w   ┆ 53  ┆ e   ┆ 64  │ #> │ …   ┆ …   ┆ …   ┆ …   │ #> │ y   ┆ 1   ┆ x   ┆ 60  │ #> │ z   ┆ 95  ┆ f   ┆ 14  │ #> │ n   ┆ 90  ┆ d   ┆ 5   │ #> │ c   ┆ 51  ┆ n   ┆ 76  │ #> │ a   ┆ 46  ┆ t   ┆ 17  │ #> └─────┴─────┴─────┴─────┘ bind_cols_polars(list(p1, p2)) #> shape: (20, 4) #> ┌─────┬─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   ┆ w   │ #> │ --- ┆ --- ┆ --- ┆ --- │ #> │ str ┆ i32 ┆ str ┆ i32 │ #> ╞═════╪═════╪═════╪═════╡ #> │ d   ┆ 86  ┆ a   ┆ 6   │ #> │ f   ┆ 43  ┆ y   ┆ 22  │ #> │ i   ┆ 7   ┆ o   ┆ 19  │ #> │ e   ┆ 32  ┆ r   ┆ 2   │ #> │ w   ┆ 53  ┆ e   ┆ 64  │ #> │ …   ┆ …   ┆ …   ┆ …   │ #> │ y   ┆ 1   ┆ x   ┆ 60  │ #> │ z   ┆ 95  ┆ f   ┆ 14  │ #> │ n   ┆ 90  ┆ d   ┆ 5   │ #> │ c   ┆ 51  ┆ n   ┆ 76  │ #> │ a   ┆ 46  ┆ t   ┆ 17  │ #> └─────┴─────┴─────┴─────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/bind_rows_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack multiple Data/LazyFrames on top of each other — bind_rows_polars","title":"Stack multiple Data/LazyFrames on top of each other — bind_rows_polars","text":"Stack multiple Data/LazyFrames top ","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/bind_rows_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack multiple Data/LazyFrames on top of each other — bind_rows_polars","text":"","code":"bind_rows_polars(..., .id = NULL)"},{"path":"https://tidypolars.etiennebacher.com/reference/bind_rows_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack multiple Data/LazyFrames on top of each other — bind_rows_polars","text":"... Polars DataFrames LazyFrames combine. argument can either Data/LazyFrame, list Data/LazyFrames. Columns matched name, missing columns filled NA. .id name optional identifier column. Provide string create output column identifies input. elements ... named, identifier use names. Otherwise, simple count.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/bind_rows_polars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack multiple Data/LazyFrames on top of each other — bind_rows_polars","text":"","code":"library(polars) p1 <- pl$DataFrame(   x = c(\"a\", \"b\"),   y = 1:2 ) p2 <- pl$DataFrame(   y = 3:4,   z = c(\"c\", \"d\") )$with_columns(pl$col(\"y\")$cast(pl$Int16))  bind_rows_polars(p1, p2) #> shape: (4, 3) #> ┌──────┬─────┬──────┐ #> │ x    ┆ y   ┆ z    │ #> │ ---  ┆ --- ┆ ---  │ #> │ str  ┆ i32 ┆ str  │ #> ╞══════╪═════╪══════╡ #> │ a    ┆ 1   ┆ null │ #> │ b    ┆ 2   ┆ null │ #> │ null ┆ 3   ┆ c    │ #> │ null ┆ 4   ┆ d    │ #> └──────┴─────┴──────┘  # this is equivalent bind_rows_polars(list(p1, p2)) #> shape: (4, 3) #> ┌──────┬─────┬──────┐ #> │ x    ┆ y   ┆ z    │ #> │ ---  ┆ --- ┆ ---  │ #> │ str  ┆ i32 ┆ str  │ #> ╞══════╪═════╪══════╡ #> │ a    ┆ 1   ┆ null │ #> │ b    ┆ 2   ┆ null │ #> │ null ┆ 3   ┆ c    │ #> │ null ┆ 4   ┆ d    │ #> └──────┴─────┴──────┘  # create an id colum bind_rows_polars(p1, p2, .id = \"id\") #> shape: (4, 4) #> ┌─────┬──────┬─────┬──────┐ #> │ id  ┆ x    ┆ y   ┆ z    │ #> │ --- ┆ ---  ┆ --- ┆ ---  │ #> │ str ┆ str  ┆ i32 ┆ str  │ #> ╞═════╪══════╪═════╪══════╡ #> │ 1   ┆ a    ┆ 1   ┆ null │ #> │ 1   ┆ b    ┆ 2   ┆ null │ #> │ 2   ┆ null ┆ 3   ┆ c    │ #> │ 2   ┆ null ┆ 4   ┆ d    │ #> └─────┴──────┴─────┴──────┘  # create an id colum with named elements bind_rows_polars(p1 = p1, p2 = p2, .id = \"id\") #> shape: (4, 4) #> ┌─────┬──────┬─────┬──────┐ #> │ id  ┆ x    ┆ y   ┆ z    │ #> │ --- ┆ ---  ┆ --- ┆ ---  │ #> │ str ┆ str  ┆ i32 ┆ str  │ #> ╞═════╪══════╪═════╪══════╡ #> │ p1  ┆ a    ┆ 1   ┆ null │ #> │ p1  ┆ b    ┆ 2   ┆ null │ #> │ p2  ┆ null ┆ 3   ┆ c    │ #> │ p2  ┆ null ┆ 4   ┆ d    │ #> └─────┴──────┴─────┴──────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/complete.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete a data frame with missing combinations of data — complete.polars_data_frame","title":"Complete a data frame with missing combinations of data — complete.polars_data_frame","text":"Turns implicit missing values explicit missing values. useful completing missing combinations data.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/complete.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete a data frame with missing combinations of data — complete.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' complete(data, ..., fill = list(), explicit = TRUE)  # S3 method for class 'polars_lazy_frame' complete(data, ..., fill = list(), explicit = TRUE)"},{"path":"https://tidypolars.etiennebacher.com/reference/complete.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete a data frame with missing combinations of data — complete.polars_data_frame","text":"data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. used continuous variables, may need fill values appear data: use expressions like year = 2010:2020 year = full_seq(year, 1). fill named list variable supplies single value use instead NA missing combinations. explicit implicit (newly created) explicit (pre-existing) missing values filled fill? default, TRUE, set FALSE limit fill implicit missing values.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/complete.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete a data frame with missing combinations of data — complete.polars_data_frame","text":"","code":"df <- polars::pl$DataFrame(   group = c(1:2, 1, 2),   item_id = c(1:2, 2, 3),   item_name = c(\"a\", \"a\", \"b\", \"b\"),   value1 = c(1, NA, 3, 4),   value2 = 4:7 ) df #> shape: (4, 5) #> ┌───────┬─────────┬───────────┬────────┬────────┐ #> │ group ┆ item_id ┆ item_name ┆ value1 ┆ value2 │ #> │ ---   ┆ ---     ┆ ---       ┆ ---    ┆ ---    │ #> │ f64   ┆ f64     ┆ str       ┆ f64    ┆ i32    │ #> ╞═══════╪═════════╪═══════════╪════════╪════════╡ #> │ 1.0   ┆ 1.0     ┆ a         ┆ 1.0    ┆ 4      │ #> │ 2.0   ┆ 2.0     ┆ a         ┆ null   ┆ 5      │ #> │ 1.0   ┆ 2.0     ┆ b         ┆ 3.0    ┆ 6      │ #> │ 2.0   ┆ 3.0     ┆ b         ┆ 4.0    ┆ 7      │ #> └───────┴─────────┴───────────┴────────┴────────┘  df |> complete(group, item_id, item_name) #> shape: (12, 5) #> ┌───────┬─────────┬───────────┬────────┬────────┐ #> │ group ┆ item_id ┆ item_name ┆ value1 ┆ value2 │ #> │ ---   ┆ ---     ┆ ---       ┆ ---    ┆ ---    │ #> │ f64   ┆ f64     ┆ str       ┆ f64    ┆ i32    │ #> ╞═══════╪═════════╪═══════════╪════════╪════════╡ #> │ 1.0   ┆ 1.0     ┆ a         ┆ 1.0    ┆ 4      │ #> │ 1.0   ┆ 1.0     ┆ b         ┆ null   ┆ null   │ #> │ 1.0   ┆ 2.0     ┆ a         ┆ null   ┆ null   │ #> │ 1.0   ┆ 2.0     ┆ b         ┆ 3.0    ┆ 6      │ #> │ 1.0   ┆ 3.0     ┆ a         ┆ null   ┆ null   │ #> │ …     ┆ …       ┆ …         ┆ …      ┆ …      │ #> │ 2.0   ┆ 1.0     ┆ b         ┆ null   ┆ null   │ #> │ 2.0   ┆ 2.0     ┆ a         ┆ null   ┆ 5      │ #> │ 2.0   ┆ 2.0     ┆ b         ┆ null   ┆ null   │ #> │ 2.0   ┆ 3.0     ┆ a         ┆ null   ┆ null   │ #> │ 2.0   ┆ 3.0     ┆ b         ┆ 4.0    ┆ 7      │ #> └───────┴─────────┴───────────┴────────┴────────┘  # Use `fill` to replace NAs with some value. By default, affects both new # (implicit) and pre-existing (explicit) missing values. df |>   complete(     group, item_id, item_name,     fill = list(value1 = 0, value2 = 99)   ) #> shape: (12, 5) #> ┌───────┬─────────┬───────────┬────────┬────────┐ #> │ group ┆ item_id ┆ item_name ┆ value1 ┆ value2 │ #> │ ---   ┆ ---     ┆ ---       ┆ ---    ┆ ---    │ #> │ f64   ┆ f64     ┆ str       ┆ f64    ┆ f64    │ #> ╞═══════╪═════════╪═══════════╪════════╪════════╡ #> │ 1.0   ┆ 1.0     ┆ a         ┆ 1.0    ┆ 4.0    │ #> │ 1.0   ┆ 1.0     ┆ b         ┆ 0.0    ┆ 99.0   │ #> │ 1.0   ┆ 2.0     ┆ a         ┆ 0.0    ┆ 99.0   │ #> │ 1.0   ┆ 2.0     ┆ b         ┆ 3.0    ┆ 6.0    │ #> │ 1.0   ┆ 3.0     ┆ a         ┆ 0.0    ┆ 99.0   │ #> │ …     ┆ …       ┆ …         ┆ …      ┆ …      │ #> │ 2.0   ┆ 1.0     ┆ b         ┆ 0.0    ┆ 99.0   │ #> │ 2.0   ┆ 2.0     ┆ a         ┆ 0.0    ┆ 5.0    │ #> │ 2.0   ┆ 2.0     ┆ b         ┆ 0.0    ┆ 99.0   │ #> │ 2.0   ┆ 3.0     ┆ a         ┆ 0.0    ┆ 99.0   │ #> │ 2.0   ┆ 3.0     ┆ b         ┆ 4.0    ┆ 7.0    │ #> └───────┴─────────┴───────────┴────────┴────────┘  # Limit the fill to only the newly created (i.e. previously implicit) # missing values with `explicit = FALSE` df |>   complete(     group, item_id, item_name,     fill = list(value1 = 0, value2 = 99),     explicit = FALSE   ) #> shape: (12, 5) #> ┌───────┬─────────┬───────────┬────────┬────────┐ #> │ group ┆ item_id ┆ item_name ┆ value1 ┆ value2 │ #> │ ---   ┆ ---     ┆ ---       ┆ ---    ┆ ---    │ #> │ f64   ┆ f64     ┆ str       ┆ f64    ┆ f64    │ #> ╞═══════╪═════════╪═══════════╪════════╪════════╡ #> │ 1.0   ┆ 1.0     ┆ a         ┆ 1.0    ┆ 4.0    │ #> │ 1.0   ┆ 2.0     ┆ b         ┆ 3.0    ┆ 6.0    │ #> │ 2.0   ┆ 2.0     ┆ a         ┆ null   ┆ 5.0    │ #> │ 2.0   ┆ 3.0     ┆ b         ┆ 4.0    ┆ 7.0    │ #> │ 1.0   ┆ 1.0     ┆ b         ┆ 0.0    ┆ 99.0   │ #> │ …     ┆ …       ┆ …         ┆ …      ┆ …      │ #> │ 1.0   ┆ 3.0     ┆ b         ┆ 0.0    ┆ 99.0   │ #> │ 2.0   ┆ 1.0     ┆ a         ┆ 0.0    ┆ 99.0   │ #> │ 2.0   ┆ 1.0     ┆ b         ┆ 0.0    ┆ 99.0   │ #> │ 2.0   ┆ 2.0     ┆ b         ┆ 0.0    ┆ 99.0   │ #> │ 2.0   ┆ 3.0     ┆ a         ┆ 0.0    ┆ 99.0   │ #> └───────┴─────────┴───────────┴────────┴────────┘  df |>   group_by(group, maintain_order = TRUE) |>   complete(item_id, item_name) #> shape: (8, 5) #> ┌───────┬─────────┬───────────┬────────┬────────┐ #> │ group ┆ item_id ┆ item_name ┆ value1 ┆ value2 │ #> │ ---   ┆ ---     ┆ ---       ┆ ---    ┆ ---    │ #> │ f64   ┆ f64     ┆ str       ┆ f64    ┆ i32    │ #> ╞═══════╪═════════╪═══════════╪════════╪════════╡ #> │ 1.0   ┆ 1.0     ┆ a         ┆ 1.0    ┆ 4      │ #> │ 1.0   ┆ 1.0     ┆ b         ┆ null   ┆ null   │ #> │ 1.0   ┆ 2.0     ┆ a         ┆ null   ┆ null   │ #> │ 1.0   ┆ 2.0     ┆ b         ┆ 3.0    ┆ 6      │ #> │ 2.0   ┆ 2.0     ┆ a         ┆ null   ┆ 5      │ #> │ 2.0   ┆ 2.0     ┆ b         ┆ null   ┆ null   │ #> │ 2.0   ┆ 3.0     ┆ a         ┆ null   ┆ null   │ #> │ 2.0   ┆ 3.0     ┆ b         ┆ 4.0    ┆ 7      │ #> └───────┴─────────┴───────────┴────────┴────────┘ #> Groups [2]: group #> Maintain order: TRUE"},{"path":"https://tidypolars.etiennebacher.com/reference/compute.polars_lazy_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect a LazyFrame — compute.polars_lazy_frame","title":"Collect a LazyFrame — compute.polars_lazy_frame","text":"compute() checks query, optimizes background, runs . output Polars DataFrame. collect() similar compute() converts output R data.frame, consumes memory. tidypolars 0.7.0, collect() used collect LazyFrame Polars DataFrame. usage still valid now change 0.8.0 automatically convert DataFrame data.frame. Use compute() Polars DataFrame output.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/compute.polars_lazy_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect a LazyFrame — compute.polars_lazy_frame","text":"","code":"# S3 method for class 'polars_lazy_frame' compute(   x,   ...,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   comm_subplan_elim = TRUE,   comm_subexpr_elim = TRUE,   cluster_with_columns = TRUE,   no_optimization = FALSE,   engine = c(\"auto\", \"in-memory\", \"streaming\"),   streaming = FALSE )  # S3 method for class 'polars_lazy_frame' collect(   x,   ...,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   comm_subplan_elim = TRUE,   comm_subexpr_elim = TRUE,   cluster_with_columns = TRUE,   no_optimization = FALSE,   engine = c(\"auto\", \"in-memory\", \"streaming\"),   streaming = FALSE,   .name_repair = \"check_unique\",   uint8 = \"integer\",   int64 = \"double\",   date = \"Date\",   time = \"hms\",   decimal = \"double\",   as_clock_class = FALSE,   ambiguous = \"raise\",   non_existent = \"raise\" )"},{"path":"https://tidypolars.etiennebacher.com/reference/compute.polars_lazy_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect a LazyFrame — compute.polars_lazy_frame","text":"x Polars LazyFrame ... Dots empty. type_coercion Coerce types operations succeed run minimal required memory (default TRUE). predicate_pushdown Applies filters early possible scan level (default TRUE). projection_pushdown Select columns needed scan level (default TRUE). simplify_expression Various optimizations, constant folding replacing expensive operations faster alternatives (default TRUE). slice_pushdown load required slice scan. materialize sliced outputs level. materialize sliced outputs (default TRUE). comm_subplan_elim Cache branching subplans occur self-joins unions (default TRUE). comm_subexpr_elim Cache common subexpressions (default TRUE). cluster_with_columns Combine sequential independent calls $with_columns(). no_optimization Sets following optimizations FALSE: predicate_pushdown, projection_pushdown,  slice_pushdown, simplify_expression. Default FALSE. engine engine name use processing query. One followings: \"auto\" (default): Select engine automatically. \"-memory\" engine selected cases. \"-memory\": Use -memory engine. \"streaming\": Use streaming engine, usually faster can handle larger--memory data. streaming Deprecated, use engine instead. .name_repair, uint8, int64, date, time, decimal, as_clock_class, ambiguous, non_existent Parameters control conversion polars types R. See ?polars:::.data.frame.polars_lazy_frame explanations accepted values.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/reference/compute.polars_lazy_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect a LazyFrame — compute.polars_lazy_frame","text":"","code":"dat_lazy <- polars::as_polars_df(iris)$lazy()  compute(dat_lazy) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  # you can build a query and add compute() as the last piece dat_lazy |>   select(starts_with(\"Sepal\")) |>   filter(between(Sepal.Length, 5, 6)) |>   compute() #> shape: (67, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 5.0          ┆ 3.6         │ #> │ 5.4          ┆ 3.9         │ #> │ 5.0          ┆ 3.4         │ #> │ 5.4          ┆ 3.7         │ #> │ …            ┆ …           │ #> │ 6.0          ┆ 2.2         │ #> │ 5.6          ┆ 2.8         │ #> │ 6.0          ┆ 3.0         │ #> │ 5.8          ┆ 2.7         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘  # call collect() instead to return a data.frame (note that this is more # expensive than compute()) dat_lazy |>   select(starts_with(\"Sepal\")) |>   filter(between(Sepal.Length, 5, 6)) |>   collect() #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #>    Sepal.Length Sepal.Width #> 1           5.1         3.5 #> 2           5.0         3.6 #> 3           5.4         3.9 #> 4           5.0         3.4 #> 5           5.4         3.7 #> 6           5.8         4.0 #> 7           5.7         4.4 #> 8           5.4         3.9 #> 9           5.1         3.5 #> 10          5.7         3.8 #> 11          5.1         3.8 #> 12          5.4         3.4 #> 13          5.1         3.7 #> 14          5.1         3.3 #> 15          5.0         3.0 #> 16          5.0         3.4 #> 17          5.2         3.5 #> 18          5.2         3.4 #> 19          5.4         3.4 #> 20          5.2         4.1 #> 21          5.5         4.2 #> 22          5.0         3.2 #> 23          5.5         3.5 #> 24          5.1         3.4 #> 25          5.0         3.5 #> 26          5.0         3.5 #> 27          5.1         3.8 #> 28          5.1         3.8 #> 29          5.3         3.7 #> 30          5.0         3.3 #> 31          5.5         2.3 #> 32          5.7         2.8 #> 33          5.2         2.7 #> 34          5.0         2.0 #> 35          5.9         3.0 #> 36          6.0         2.2 #> 37          5.6         2.9 #> 38          5.6         3.0 #> 39          5.8         2.7 #> 40          5.6         2.5 #> 41          5.9         3.2 #> 42          6.0         2.9 #> 43          5.7         2.6 #> 44          5.5         2.4 #> 45          5.5         2.4 #> 46          5.8         2.7 #> 47          6.0         2.7 #> 48          5.4         3.0 #> 49          6.0         3.4 #> 50          5.6         3.0 #> 51          5.5         2.5 #> 52          5.5         2.6 #> 53          5.8         2.6 #> 54          5.0         2.3 #> 55          5.6         2.7 #> 56          5.7         3.0 #> 57          5.7         2.9 #> 58          5.1         2.5 #> 59          5.7         2.8 #> 60          5.8         2.7 #> 61          5.7         2.5 #> 62          5.8         2.8 #> 63          6.0         2.2 #> 64          5.6         2.8 #> 65          6.0         3.0 #> 66          5.8         2.7 #> 67          5.9         3.0"},{"path":"https://tidypolars.etiennebacher.com/reference/count.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the observations in each group — count.polars_data_frame","title":"Count the observations in each group — count.polars_data_frame","text":"Count observations group","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/count.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the observations in each group — count.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' count(x, ..., wt = NULL, sort = FALSE, name = \"n\")  # S3 method for class 'polars_data_frame' tally(x, wt = NULL, sort = FALSE, name = \"n\")  # S3 method for class 'polars_lazy_frame' count(x, ..., wt = NULL, sort = FALSE, name = \"n\")  # S3 method for class 'polars_lazy_frame' tally(x, wt = NULL, sort = FALSE, name = \"n\")  # S3 method for class 'polars_data_frame' add_count(x, ..., wt = NULL, sort = FALSE, name = \"n\")  # S3 method for class 'polars_lazy_frame' add_count(x, ..., wt = NULL, sort = FALSE, name = \"n\")"},{"path":"https://tidypolars.etiennebacher.com/reference/count.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the observations in each group — count.polars_data_frame","text":"x Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. wt supported tidypolars. sort TRUE, show largest groups top. name Name new column.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/count.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the observations in each group — count.polars_data_frame","text":"","code":"test <- polars::as_polars_df(mtcars)  # grouping variables must be specified in count() and add_count() count(test, cyl) #> shape: (3, 2) #> ┌─────┬─────┐ #> │ cyl ┆ n   │ #> │ --- ┆ --- │ #> │ f64 ┆ u32 │ #> ╞═════╪═════╡ #> │ 4.0 ┆ 11  │ #> │ 6.0 ┆ 7   │ #> │ 8.0 ┆ 14  │ #> └─────┴─────┘ count(test, cyl, am) #> shape: (6, 3) #> ┌─────┬─────┬─────┐ #> │ cyl ┆ am  ┆ n   │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ u32 │ #> ╞═════╪═════╪═════╡ #> │ 4.0 ┆ 0.0 ┆ 3   │ #> │ 4.0 ┆ 1.0 ┆ 8   │ #> │ 6.0 ┆ 0.0 ┆ 4   │ #> │ 6.0 ┆ 1.0 ┆ 3   │ #> │ 8.0 ┆ 0.0 ┆ 12  │ #> │ 8.0 ┆ 1.0 ┆ 2   │ #> └─────┴─────┴─────┘ count(test, cyl, am, sort = TRUE, name = \"count\") #> shape: (6, 3) #> ┌─────┬─────┬───────┐ #> │ cyl ┆ am  ┆ count │ #> │ --- ┆ --- ┆ ---   │ #> │ f64 ┆ f64 ┆ u32   │ #> ╞═════╪═════╪═══════╡ #> │ 8.0 ┆ 0.0 ┆ 12    │ #> │ 4.0 ┆ 1.0 ┆ 8     │ #> │ 6.0 ┆ 0.0 ┆ 4     │ #> │ 4.0 ┆ 0.0 ┆ 3     │ #> │ 6.0 ┆ 1.0 ┆ 3     │ #> │ 8.0 ┆ 1.0 ┆ 2     │ #> └─────┴─────┴───────┘  add_count(test, cyl, am, sort = TRUE, name = \"count\") #> shape: (32, 12) #> ┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬───────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ count │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---   │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ u32   │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪═══════╡ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 2.0  ┆ 12    │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 4.0  ┆ 12    │ #> │ 16.4 ┆ 8.0 ┆ 275.8 ┆ 180.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 3.0  ┆ 12    │ #> │ 17.3 ┆ 8.0 ┆ 275.8 ┆ 180.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 3.0  ┆ 12    │ #> │ 15.2 ┆ 8.0 ┆ 275.8 ┆ 180.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 3.0  ┆ 12    │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …    ┆ …    ┆ …     │ #> │ 22.8 ┆ 4.0 ┆ 140.8 ┆ 95.0  ┆ … ┆ 0.0 ┆ 4.0  ┆ 2.0  ┆ 3     │ #> │ 21.5 ┆ 4.0 ┆ 120.1 ┆ 97.0  ┆ … ┆ 0.0 ┆ 3.0  ┆ 1.0  ┆ 3     │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 6.0  ┆ 3     │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 4.0  ┆ 2     │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 8.0  ┆ 2     │ #> └──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴───────┘  # tally() directly uses grouping variables of the input test |>   group_by(cyl) |>   tally() #> shape: (3, 2) #> ┌─────┬─────┐ #> │ cyl ┆ n   │ #> │ --- ┆ --- │ #> │ f64 ┆ u32 │ #> ╞═════╪═════╡ #> │ 4.0 ┆ 11  │ #> │ 6.0 ┆ 7   │ #> │ 8.0 ┆ 14  │ #> └─────┴─────┘  test |>   group_by(cyl, am) |>   tally(sort = TRUE, name = \"count\") #> shape: (6, 3) #> ┌─────┬─────┬───────┐ #> │ cyl ┆ am  ┆ count │ #> │ --- ┆ --- ┆ ---   │ #> │ f64 ┆ f64 ┆ u32   │ #> ╞═════╪═════╪═══════╡ #> │ 8.0 ┆ 0.0 ┆ 12    │ #> │ 4.0 ┆ 1.0 ┆ 8     │ #> │ 6.0 ┆ 0.0 ┆ 4     │ #> │ 6.0 ┆ 1.0 ┆ 3     │ #> │ 4.0 ┆ 0.0 ┆ 3     │ #> │ 8.0 ┆ 1.0 ┆ 2     │ #> └─────┴─────┴───────┘ #> Groups [3]: cyl #> Maintain order: FALSE"},{"path":"https://tidypolars.etiennebacher.com/reference/cross_join.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross join — cross_join.polars_data_frame","title":"Cross join — cross_join.polars_data_frame","text":"Cross joins match row x every row y, resulting dataset nrow(x) * nrow(y) rows.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/cross_join.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross join — cross_join.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' cross_join(x, y, ..., suffix = c(\".x\", \".y\"))  # S3 method for class 'polars_lazy_frame' cross_join(x, y, ..., suffix = c(\".x\", \".y\"))"},{"path":"https://tidypolars.etiennebacher.com/reference/cross_join.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross join — cross_join.polars_data_frame","text":"x, y Two Polars Data/LazyFrames ... Dots empty. suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/cross_join.polars_data_frame.html","id":"unknown-arguments","dir":"Reference","previous_headings":"","what":"Unknown arguments","title":"Cross join — cross_join.polars_data_frame","text":"Arguments supported original implementation tidyverse listed throw warning default specified. change behavior error instead, use options(tidypolars_unknown_args = \"error\").","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/cross_join.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross join — cross_join.polars_data_frame","text":"","code":"test <- polars::pl$DataFrame(   origin = c(\"ALG\", \"FRA\", \"GER\"),   year = c(2020, 2020, 2021) )  test2 <- polars::pl$DataFrame(   destination = c(\"USA\", \"JPN\", \"BRA\"),   language = c(\"english\", \"japanese\", \"portuguese\") )  test #> shape: (3, 2) #> ┌────────┬────────┐ #> │ origin ┆ year   │ #> │ ---    ┆ ---    │ #> │ str    ┆ f64    │ #> ╞════════╪════════╡ #> │ ALG    ┆ 2020.0 │ #> │ FRA    ┆ 2020.0 │ #> │ GER    ┆ 2021.0 │ #> └────────┴────────┘  test2 #> shape: (3, 2) #> ┌─────────────┬────────────┐ #> │ destination ┆ language   │ #> │ ---         ┆ ---        │ #> │ str         ┆ str        │ #> ╞═════════════╪════════════╡ #> │ USA         ┆ english    │ #> │ JPN         ┆ japanese   │ #> │ BRA         ┆ portuguese │ #> └─────────────┴────────────┘  cross_join(test, test2) #> shape: (9, 4) #> ┌────────┬────────┬─────────────┬────────────┐ #> │ origin ┆ year   ┆ destination ┆ language   │ #> │ ---    ┆ ---    ┆ ---         ┆ ---        │ #> │ str    ┆ f64    ┆ str         ┆ str        │ #> ╞════════╪════════╪═════════════╪════════════╡ #> │ ALG    ┆ 2020.0 ┆ USA         ┆ english    │ #> │ ALG    ┆ 2020.0 ┆ JPN         ┆ japanese   │ #> │ ALG    ┆ 2020.0 ┆ BRA         ┆ portuguese │ #> │ FRA    ┆ 2020.0 ┆ USA         ┆ english    │ #> │ FRA    ┆ 2020.0 ┆ JPN         ┆ japanese   │ #> │ FRA    ┆ 2020.0 ┆ BRA         ┆ portuguese │ #> │ GER    ┆ 2021.0 ┆ USA         ┆ english    │ #> │ GER    ┆ 2021.0 ┆ JPN         ┆ japanese   │ #> │ GER    ┆ 2021.0 ┆ BRA         ┆ portuguese │ #> └────────┴────────┴─────────────┴────────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/describe.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics for a Polars DataFrame — describe","title":"Summary statistics for a Polars DataFrame — describe","text":"function deprecated tidypolars 0.10.0, removed future update. Use summary() arguments instead.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/describe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics for a Polars DataFrame — describe","text":"","code":"describe(.data, percentiles = c(0.25, 0.5, 0.75))"},{"path":"https://tidypolars.etiennebacher.com/reference/describe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistics for a Polars DataFrame — describe","text":".data Polars DataFrame. percentiles One percentiles include summary statistics. values must 0 1 (NULL ignored).","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/describe_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the optimized and non-optimized query plans — describe_plan","title":"Show the optimized and non-optimized query plans — describe_plan","text":"functions deprecated tidypolars 0.10.0, removed future update. Use explain() optimized = FALSE recover output describe_plan(), optimized = TRUE (default) get output describe_optimized_plan().","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/describe_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the optimized and non-optimized query plans — describe_plan","text":"","code":"describe_plan(.data)  describe_optimized_plan(.data)"},{"path":"https://tidypolars.etiennebacher.com/reference/describe_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the optimized and non-optimized query plans — describe_plan","text":".data Polars LazyFrame","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/distinct.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove or keep only duplicated rows in a Data/LazyFrame — distinct.polars_data_frame","title":"Remove or keep only duplicated rows in a Data/LazyFrame — distinct.polars_data_frame","text":"default, duplicates looked variables. possible specify subset variables duplicates looked . also possible keep either first occurrence, last occurence remove duplicates.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/distinct.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove or keep only duplicated rows in a Data/LazyFrame — distinct.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' distinct(.data, ..., keep = \"first\", maintain_order = TRUE)  # S3 method for class 'polars_lazy_frame' distinct(.data, ..., keep = \"first\", maintain_order = TRUE)  duplicated_rows(.data, ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/distinct.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove or keep only duplicated rows in a Data/LazyFrame — distinct.polars_data_frame","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. keep Either \"first\" (keep first occurrence duplicated row), \"last\" (last occurrence) \"none\" (remove ofccurences duplicated rows). maintain_order Maintain row order. default can slow process large datasets prevents use streaming.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/distinct.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove or keep only duplicated rows in a Data/LazyFrame — distinct.polars_data_frame","text":"","code":"pl_test <- polars::pl$DataFrame(   iso_o = c(rep(c(\"AA\", \"AB\"), each = 2), \"AC\", \"DC\"),   iso_d = rep(c(\"BA\", \"BB\", \"BC\"), each = 2),   value = c(2, 2, 3, 4, 5, 6) )  distinct(pl_test) #> shape: (5, 3) #> ┌───────┬───────┬───────┐ #> │ iso_o ┆ iso_d ┆ value │ #> │ ---   ┆ ---   ┆ ---   │ #> │ str   ┆ str   ┆ f64   │ #> ╞═══════╪═══════╪═══════╡ #> │ AA    ┆ BA    ┆ 2.0   │ #> │ AB    ┆ BB    ┆ 3.0   │ #> │ AB    ┆ BB    ┆ 4.0   │ #> │ AC    ┆ BC    ┆ 5.0   │ #> │ DC    ┆ BC    ┆ 6.0   │ #> └───────┴───────┴───────┘ distinct(pl_test, iso_o) #> shape: (4, 3) #> ┌───────┬───────┬───────┐ #> │ iso_o ┆ iso_d ┆ value │ #> │ ---   ┆ ---   ┆ ---   │ #> │ str   ┆ str   ┆ f64   │ #> ╞═══════╪═══════╪═══════╡ #> │ AA    ┆ BA    ┆ 2.0   │ #> │ AB    ┆ BB    ┆ 3.0   │ #> │ AC    ┆ BC    ┆ 5.0   │ #> │ DC    ┆ BC    ┆ 6.0   │ #> └───────┴───────┴───────┘  duplicated_rows(pl_test) #> shape: (2, 3) #> ┌───────┬───────┬───────┐ #> │ iso_o ┆ iso_d ┆ value │ #> │ ---   ┆ ---   ┆ ---   │ #> │ str   ┆ str   ┆ f64   │ #> ╞═══════╪═══════╪═══════╡ #> │ AA    ┆ BA    ┆ 2.0   │ #> │ AA    ┆ BA    ┆ 2.0   │ #> └───────┴───────┴───────┘ duplicated_rows(pl_test, iso_o, iso_d) #> shape: (4, 3) #> ┌───────┬───────┬───────┐ #> │ iso_o ┆ iso_d ┆ value │ #> │ ---   ┆ ---   ┆ ---   │ #> │ str   ┆ str   ┆ f64   │ #> ╞═══════╪═══════╪═══════╡ #> │ AA    ┆ BA    ┆ 2.0   │ #> │ AA    ┆ BA    ┆ 2.0   │ #> │ AB    ┆ BB    ┆ 3.0   │ #> │ AB    ┆ BB    ┆ 4.0   │ #> └───────┴───────┴───────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/drop_na.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop missing values — drop_na.polars_data_frame","title":"Drop missing values — drop_na.polars_data_frame","text":"default, drop rows contain missing values. possible specify subset variables missing values variables considered.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/drop_na.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop missing values — drop_na.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' drop_na(data, ...)  # S3 method for class 'polars_lazy_frame' drop_na(data, ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/drop_na.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop missing values — drop_na.polars_data_frame","text":"data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/drop_na.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop missing values — drop_na.polars_data_frame","text":"","code":"tmp <- mtcars tmp[1:3, \"mpg\"] <- NA tmp[4, \"hp\"] <- NA pl_tmp <- as_polars_df(tmp)  drop_na(pl_tmp) #> shape: (28, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ 18.1 ┆ 6.0 ┆ 225.0 ┆ 105.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 24.4 ┆ 4.0 ┆ 146.7 ┆ 62.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ 22.8 ┆ 4.0 ┆ 140.8 ┆ 95.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘ drop_na(pl_tmp, hp, mpg) #> shape: (28, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ 18.1 ┆ 6.0 ┆ 225.0 ┆ 105.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 24.4 ┆ 4.0 ┆ 146.7 ┆ 62.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ 22.8 ┆ 4.0 ┆ 140.8 ┆ 95.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/explain.polars_lazy_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the optimized and non-optimized query plans — explain.polars_lazy_frame","title":"Show the optimized and non-optimized query plans — explain.polars_lazy_frame","text":"function available LazyFrames . default, explain() shows query plan optimized run Polars. Setting optimized = FALSE shows query plan -, without optimization done, query performed. Note plans read bottom top.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/explain.polars_lazy_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the optimized and non-optimized query plans — explain.polars_lazy_frame","text":"","code":"# S3 method for class 'polars_lazy_frame' explain(x, optimized = TRUE, ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/explain.polars_lazy_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the optimized and non-optimized query plans — explain.polars_lazy_frame","text":"x Polars LazyFrame. optimized Logical. TRUE (default), show query optimized Polars. Otherwise, show initial query. ... Ignored.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/explain.polars_lazy_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the optimized and non-optimized query plans — explain.polars_lazy_frame","text":"","code":"query <- mtcars |>   as_polars_lf() |>   arrange(drat) |>   filter(cyl == 3) |>   select(mpg)  # unoptimized query plan: no_opt <- explain(query, optimized = FALSE) no_opt #> [1] \"SELECT [col(\\\"mpg\\\")]\\n  FILTER [(col(\\\"cyl\\\")) == (3.0)]\\n  FROM\\n    SORT BY [col(\\\"drat\\\")]\\n      DF [\\\"mpg\\\", \\\"cyl\\\", \\\"disp\\\", \\\"hp\\\", ...]; PROJECT */11 COLUMNS\"  # better printing with cat(): cat(no_opt) #> SELECT [col(\"mpg\")] #>   FILTER [(col(\"cyl\")) == (3.0)] #>   FROM #>     SORT BY [col(\"drat\")] #>       DF [\"mpg\", \"cyl\", \"disp\", \"hp\", ...]; PROJECT */11 COLUMNS  # optimized query run by polars cat(explain(query)) #> simple π 1/1 [\"mpg\"] #>   SORT BY [col(\"drat\")] #>     FILTER [(col(\"cyl\")) == (3.0)] #>     FROM #>       DF [\"mpg\", \"cyl\", \"disp\", \"hp\", ...]; PROJECT[\"mpg\", \"cyl\", \"drat\"] 3/11 COLUMNS"},{"path":"https://tidypolars.etiennebacher.com/reference/fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch n rows of a LazyFrame — fetch","title":"Fetch n rows of a LazyFrame — fetch","text":"Use head() collect() get subset data.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch n rows of a LazyFrame — fetch","text":"","code":"fetch(   .data,   n_rows = 500,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   comm_subplan_elim = TRUE,   comm_subexpr_elim = TRUE,   cluster_with_columns = TRUE,   no_optimization = FALSE,   engine = c(\"auto\", \"in-memory\", \"streaming\"),   streaming = FALSE )"},{"path":"https://tidypolars.etiennebacher.com/reference/fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch n rows of a LazyFrame — fetch","text":".data Polars LazyFrame n_rows Number rows fetch. type_coercion Coerce types operations succeed run minimal required memory (default TRUE). predicate_pushdown Applies filters early possible scan level (default TRUE). projection_pushdown Select columns needed scan level (default TRUE). simplify_expression Various optimizations, constant folding replacing expensive operations faster alternatives (default TRUE). slice_pushdown load required slice scan. materialize sliced outputs level. materialize sliced outputs (default TRUE). comm_subplan_elim Cache branching subplans occur self-joins unions (default TRUE). comm_subexpr_elim Cache common subexpressions (default TRUE). cluster_with_columns Combine sequential independent calls $with_columns(). no_optimization Sets following optimizations FALSE: predicate_pushdown, projection_pushdown,  slice_pushdown, simplify_expression. Default FALSE. engine engine name use processing query. One followings: \"auto\" (default): Select engine automatically. \"-memory\" engine selected cases. \"-memory\": Use -memory engine. \"streaming\": Use streaming engine, usually faster can handle larger--memory data. streaming Deprecated, use engine instead.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/fetch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch n rows of a LazyFrame — fetch","text":"parameter n_rows indicates many rows LazyFrame used beginning query, guarantee n_rows returned. example, query contains filter join operations datasets, final number rows can lower n_rows. hand, appending rows query can lead output rows n_rows.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/reference/fill.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill in missing values with previous or next value — fill.polars_data_frame","title":"Fill in missing values with previous or next value — fill.polars_data_frame","text":"Fills missing values selected columns using next previous entry. useful common output format values repeated, recorded change.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/fill.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill in missing values with previous or next value — fill.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' fill(data, ..., .direction = c(\"down\", \"up\", \"downup\", \"updown\"))"},{"path":"https://tidypolars.etiennebacher.com/reference/fill.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill in missing values with previous or next value — fill.polars_data_frame","text":"data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. .direction Direction fill missing values. Either \"\" (default), \"\", \"downup\" (.e. first ) \"updown\" (first ).","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/fill.polars_data_frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill in missing values with previous or next value — fill.polars_data_frame","text":"grouped Data/LazyFrames, fill() applied within group, meaning fill across group boundaries.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/fill.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill in missing values with previous or next value — fill.polars_data_frame","text":"","code":"pl_test <- polars::pl$DataFrame(x = c(NA, 1), y = c(2, NA))  fill(pl_test, everything(), .direction = \"down\") #> shape: (2, 2) #> ┌──────┬─────┐ #> │ x    ┆ y   │ #> │ ---  ┆ --- │ #> │ f64  ┆ f64 │ #> ╞══════╪═════╡ #> │ null ┆ 2.0 │ #> │ 1.0  ┆ 2.0 │ #> └──────┴─────┘ fill(pl_test, everything(), .direction = \"up\") #> shape: (2, 2) #> ┌─────┬──────┐ #> │ x   ┆ y    │ #> │ --- ┆ ---  │ #> │ f64 ┆ f64  │ #> ╞═════╪══════╡ #> │ 1.0 ┆ 2.0  │ #> │ 1.0 ┆ null │ #> └─────┴──────┘  # with grouped data, it doesn't use values from other groups pl_grouped <- polars::pl$DataFrame(   grp = rep(c(\"A\", \"B\"), each = 3),   x = c(1, NA, NA, NA, 2, NA),   y = c(3, NA, 4, NA, 3, 1) ) |>   group_by(grp)  fill(pl_grouped, x, y, .direction = \"down\") #> shape: (6, 3) #> ┌─────┬──────┬──────┐ #> │ grp ┆ x    ┆ y    │ #> │ --- ┆ ---  ┆ ---  │ #> │ str ┆ f64  ┆ f64  │ #> ╞═════╪══════╪══════╡ #> │ A   ┆ 1.0  ┆ 3.0  │ #> │ A   ┆ 1.0  ┆ 3.0  │ #> │ A   ┆ 1.0  ┆ 4.0  │ #> │ B   ┆ null ┆ null │ #> │ B   ┆ 2.0  ┆ 3.0  │ #> │ B   ┆ 2.0  ┆ 1.0  │ #> └─────┴──────┴──────┘ #> Groups [2]: grp #> Maintain order: FALSE"},{"path":"https://tidypolars.etiennebacher.com/reference/filter.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep rows that match a condition — filter.polars_data_frame","title":"Keep rows that match a condition — filter.polars_data_frame","text":"function used subset data frame, retaining rows satisfy conditions. retained, row must produce value TRUE conditions. Note condition evaluates NA row dropped, unlike base subsetting [.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/filter.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep rows that match a condition — filter.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' filter(.data, ..., .by = NULL)  # S3 method for class 'polars_lazy_frame' filter(.data, ..., .by = NULL)"},{"path":"https://tidypolars.etiennebacher.com/reference/filter.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep rows that match a condition — filter.polars_data_frame","text":".data Polars Data/LazyFrame ... Expressions return logical value, defined terms variables data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept. .Optionally, selection columns group just operation, functioning alternative group_by(). group order maintained, use group_by() want control .","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/filter.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep rows that match a condition — filter.polars_data_frame","text":"","code":"pl_iris <- polars::as_polars_df(iris)  filter(pl_iris, Sepal.Length < 5, Species == \"setosa\") #> shape: (20, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.4         ┆ 1.4          ┆ 0.3         ┆ setosa  │ #> │ 4.4          ┆ 2.9         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …       │ #> │ 4.4          ┆ 3.0         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.5          ┆ 2.3         ┆ 1.3          ┆ 0.3         ┆ setosa  │ #> │ 4.4          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.8          ┆ 3.0         ┆ 1.4          ┆ 0.3         ┆ setosa  │ #> │ 4.6          ┆ 3.2         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘  filter(pl_iris, Sepal.Length < Sepal.Width + Petal.Length) #> shape: (115, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.4          ┆ 3.9         ┆ 1.7          ┆ 0.4         ┆ setosa    │ #> │ 4.6          ┆ 3.4         ┆ 1.4          ┆ 0.3         ┆ setosa    │ #> │ 4.8          ┆ 3.4         ┆ 1.6          ┆ 0.2         ┆ setosa    │ #> │ 5.7          ┆ 4.4         ┆ 1.5          ┆ 0.4         ┆ setosa    │ #> │ 5.1          ┆ 3.8         ┆ 1.5          ┆ 0.3         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  filter(pl_iris, Species == \"setosa\" | is.na(Species)) #> shape: (50, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …       │ #> │ 4.8          ┆ 3.0         ┆ 1.4          ┆ 0.3         ┆ setosa  │ #> │ 5.1          ┆ 3.8         ┆ 1.6          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.2         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 5.3          ┆ 3.7         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 5.0          ┆ 3.3         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘  iris2 <- iris iris2$Species <- as.character(iris2$Species) iris2 |>   as_polars_df() |>   filter(Species %in% c(\"setosa\", \"virginica\")) #> shape: (100, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  # filter by group pl_iris |>   group_by(Species) |>   filter(Sepal.Length == max(Sepal.Length)) |>   ungroup() #> shape: (3, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species    │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat        │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡ #> │ 5.8          ┆ 4.0         ┆ 1.2          ┆ 0.2         ┆ setosa     │ #> │ 7.0          ┆ 3.2         ┆ 4.7          ┆ 1.4         ┆ versicolor │ #> │ 7.9          ┆ 3.8         ┆ 6.4          ┆ 2.0         ┆ virginica  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘  # an alternative syntax for grouping is to use `.by` pl_iris |>   filter(Sepal.Length == max(Sepal.Length), .by = Species) #> shape: (3, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species    │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat        │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡ #> │ 5.8          ┆ 4.0         ┆ 1.2          ┆ 0.2         ┆ setosa     │ #> │ 7.0          ┆ 3.2         ┆ 4.7          ┆ 1.4         ┆ versicolor │ #> │ 7.9          ┆ 3.8         ┆ 6.4          ┆ 2.0         ┆ virginica  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/from_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from CSV file(s) — from_csv","title":"Import data from CSV file(s) — from_csv","text":"read_csv_polars() imports data Polars DataFrame. scan_csv_polars() imports data Polars LazyFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from CSV file(s) — from_csv","text":"","code":"read_csv_polars(   source,   ...,   has_header = TRUE,   separator = \",\",   comment_prefix = NULL,   quote_char = \"\\\"\",   skip_rows = 0,   schema = NULL,   schema_overrides = NULL,   null_values = NULL,   ignore_errors = FALSE,   cache = FALSE,   infer_schema_length = 100,   n_rows = NULL,   encoding = \"utf8\",   low_memory = FALSE,   rechunk = TRUE,   skip_rows_after_header = 0,   row_index_name = NULL,   row_index_offset = 0,   try_parse_dates = FALSE,   eol_char = \"\\n\",   raise_if_empty = TRUE,   truncate_ragged_lines = FALSE,   include_file_paths = NULL,   dtypes,   reuse_downloaded )  scan_csv_polars(   source,   ...,   has_header = TRUE,   separator = \",\",   comment_prefix = NULL,   quote_char = \"\\\"\",   skip_rows = 0,   schema = NULL,   schema_overrides = NULL,   null_values = NULL,   ignore_errors = FALSE,   cache = FALSE,   infer_schema_length = 100,   n_rows = NULL,   encoding = \"utf8\",   low_memory = FALSE,   rechunk = TRUE,   skip_rows_after_header = 0,   row_index_name = NULL,   row_index_offset = 0,   try_parse_dates = FALSE,   eol_char = \"\\n\",   raise_if_empty = TRUE,   truncate_ragged_lines = FALSE,   include_file_paths = NULL,   dtypes,   reuse_downloaded )"},{"path":"https://tidypolars.etiennebacher.com/reference/from_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from CSV file(s) — from_csv","text":"source Path(s) file directory. needing authenticate scanning cloud locations, see storage_options parameter. ... dots future extensions must empty. has_header Indicate first row dataset header .FALSE, column names autogenerated following format: \"column_x\" x enumeration every column dataset starting 1. separator Single byte character use separator file. comment_prefix string, can 5 symbols length, used indicate start comment line. instance, can set # //. quote_char Single byte character used quoting. Set NULL turn special handling escaping quotes. skip_rows Start reading particular number rows. header parsed offset. schema Provide schema. means polars schema inference. argument expects complete schema, whereas schema_overrides can used partially overwrite schema. must list. Names list elements used match inferred columns. schema_overrides Overwrite dtypes inference. must list. Names list elements used match inferred columns. null_values Character vector specifying values interpret NA values. can named, case names specify columns replacement must made (e.g. c(col1 = \"\")). ignore_errors Keep reading file even lines yield errors. can also use infer_schema = FALSE read columns UTF8 check values might cause issue. cache Cache result reading. infer_schema_length maximum number rows scan schema inference. NULL, full data may scanned (slow). Set infer_schema = FALSE read columns pl$String. n_rows Stop reading source reading n_rows. encoding Either \"utf8\" \"utf8-lossy\". Lossy means invalid UTF8 values replaced \"?\" characters. low_memory Reduce memory pressure expense performance. rechunk Reallocate contiguous memory chunks/files parsed. skip_rows_after_header Skip number rows header parsed. row_index_name NULL, insert row index column given name. row_index_offset Offset start row index column (used name set row_index_name). try_parse_dates Try automatically parse dates. ISO8601-like formats can inferred, well handful others. succeed, column remains data type pl$String. eol_char Single byte end line character (default: \"\\n\"). encountering file Windows line endings (\"\\r\\n\"), one can go default \"\\n\". extra \"\\r\" removed processed. raise_if_empty FALSE, parsing empty file returns empty DataFrame LazyFrame. truncate_ragged_lines Truncate lines longer schema. include_file_paths Include path source file(s) column name. dtypes Deprecated, use schema_overrides instead. reuse_downloaded Deprecated replacement.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from CSV file(s) — from_csv","text":"scan function returns LazyFrame, read function returns DataFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from CSV file(s) — from_csv","text":"","code":"### Read or scan a single CSV file ------------------------  # Setup: create a CSV file dest <- withr::local_tempfile(fileext = \".csv\") write.csv(mtcars, dest, row.names = FALSE)  # Import this file as a DataFrame for eager evaluation read_csv_polars(dest) |>   arrange(mpg) #> shape: (32, 11) #> ┌──────┬─────┬───────┬─────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ --- ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ i64 ┆ f64   ┆ i64 ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │ #> ╞══════╪═════╪═══════╪═════╪═══╪═════╪═════╪══════╪══════╡ #> │ 10.4 ┆ 8   ┆ 472.0 ┆ 205 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │ #> │ 10.4 ┆ 8   ┆ 460.0 ┆ 215 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │ #> │ 13.3 ┆ 8   ┆ 350.0 ┆ 245 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │ #> │ 14.3 ┆ 8   ┆ 360.0 ┆ 245 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │ #> │ 14.7 ┆ 8   ┆ 440.0 ┆ 230 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │ #> │ …    ┆ …   ┆ …     ┆ …   ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 27.3 ┆ 4   ┆ 79.0  ┆ 66  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │ #> │ 30.4 ┆ 4   ┆ 75.7  ┆ 52  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 2    │ #> │ 30.4 ┆ 4   ┆ 95.1  ┆ 113 ┆ … ┆ 1   ┆ 1   ┆ 5    ┆ 2    │ #> │ 32.4 ┆ 4   ┆ 78.7  ┆ 66  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │ #> │ 33.9 ┆ 4   ┆ 71.1  ┆ 65  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │ #> └──────┴─────┴───────┴─────┴───┴─────┴─────┴──────┴──────┘  # Import this file as a LazyFrame for lazy evaluation scan_csv_polars(dest) |>   arrange(mpg) |>   compute() #> shape: (32, 11) #> ┌──────┬─────┬───────┬─────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ --- ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ i64 ┆ f64   ┆ i64 ┆   ┆ i64 ┆ i64 ┆ i64  ┆ i64  │ #> ╞══════╪═════╪═══════╪═════╪═══╪═════╪═════╪══════╪══════╡ #> │ 10.4 ┆ 8   ┆ 472.0 ┆ 205 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │ #> │ 10.4 ┆ 8   ┆ 460.0 ┆ 215 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │ #> │ 13.3 ┆ 8   ┆ 350.0 ┆ 245 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │ #> │ 14.3 ┆ 8   ┆ 360.0 ┆ 245 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │ #> │ 14.7 ┆ 8   ┆ 440.0 ┆ 230 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4    │ #> │ …    ┆ …   ┆ …     ┆ …   ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 27.3 ┆ 4   ┆ 79.0  ┆ 66  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │ #> │ 30.4 ┆ 4   ┆ 75.7  ┆ 52  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 2    │ #> │ 30.4 ┆ 4   ┆ 95.1  ┆ 113 ┆ … ┆ 1   ┆ 1   ┆ 5    ┆ 2    │ #> │ 32.4 ┆ 4   ┆ 78.7  ┆ 66  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │ #> │ 33.9 ┆ 4   ┆ 71.1  ┆ 65  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1    │ #> └──────┴─────┴───────┴─────┴───┴─────┴─────┴──────┴──────┘   ### Change the datatype of some columns when reading the file ------------------------  scan_csv_polars(   dest,   schema_overrides = list(gear = polars::pl$String, carb = polars::pl$Float32) ) |>   arrange(mpg) |>   compute() #> shape: (32, 11) #> ┌──────┬─────┬───────┬─────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp  ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ --- ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ i64 ┆ f64   ┆ i64 ┆   ┆ i64 ┆ i64 ┆ str  ┆ f32  │ #> ╞══════╪═════╪═══════╪═════╪═══╪═════╪═════╪══════╪══════╡ #> │ 10.4 ┆ 8   ┆ 472.0 ┆ 205 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4.0  │ #> │ 10.4 ┆ 8   ┆ 460.0 ┆ 215 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4.0  │ #> │ 13.3 ┆ 8   ┆ 350.0 ┆ 245 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4.0  │ #> │ 14.3 ┆ 8   ┆ 360.0 ┆ 245 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4.0  │ #> │ 14.7 ┆ 8   ┆ 440.0 ┆ 230 ┆ … ┆ 0   ┆ 0   ┆ 3    ┆ 4.0  │ #> │ …    ┆ …   ┆ …     ┆ …   ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 27.3 ┆ 4   ┆ 79.0  ┆ 66  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1.0  │ #> │ 30.4 ┆ 4   ┆ 75.7  ┆ 52  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 2.0  │ #> │ 30.4 ┆ 4   ┆ 95.1  ┆ 113 ┆ … ┆ 1   ┆ 1   ┆ 5    ┆ 2.0  │ #> │ 32.4 ┆ 4   ┆ 78.7  ┆ 66  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1.0  │ #> │ 33.9 ┆ 4   ┆ 71.1  ┆ 65  ┆ … ┆ 1   ┆ 1   ┆ 4    ┆ 1.0  │ #> └──────┴─────┴───────┴─────┴───┴─────┴─────┴──────┴──────┘   ### Read or scan several all CSV files in a folder ------------------------  # Setup: create a folder \"output\" that contains two CSV files dest_folder <- file.path(withr::local_tempdir(), \"output\") dir.create(dest_folder, showWarnings = FALSE) dest1 <- file.path(dest_folder, \"output_1.csv\") dest2 <- file.path(dest_folder, \"output_2.csv\")  write.csv(mtcars[1:16, ], dest1, row.names = FALSE) #> Warning: cannot open file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10127879b44/output/output_1.csv': No such file or directory #> Error in file(file, ifelse(append, \"a\", \"w\")): cannot open the connection write.csv(mtcars[17:32, ], dest2, row.names = FALSE) #> Warning: cannot open file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10127879b44/output/output_2.csv': No such file or directory #> Error in file(file, ifelse(append, \"a\", \"w\")): cannot open the connection list.files(dest_folder) #> character(0)  # Import all files as a LazyFrame scan_csv_polars(dest_folder) |>   arrange(mpg) |>   compute() #> Error in x$collect_schema(): Evaluation failed in `$collect_schema()`. #> Caused by error: #> ! No such file or directory (os error 2): /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10127879b44/output: 'csv scan'  # Include the file path to know where each row comes from scan_csv_polars(dest_folder, include_file_paths = \"file_path\") |>   arrange(mpg) |>   compute() #> Error in x$collect_schema(): Evaluation failed in `$collect_schema()`. #> Caused by error: #> ! No such file or directory (os error 2): /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10127879b44/output: 'csv scan'   ### Read or scan all CSV files that match a glob pattern ------------------------  # Setup: create a folder \"output\" that contains three CSV files, # two of which follow the pattern \"output_XXX.csv\" dest_folder <- file.path(withr::local_tempdir(), \"output_glob\") dir.create(dest_folder, showWarnings = FALSE) dest1 <- file.path(dest_folder, \"output_1.csv\") dest2 <- file.path(dest_folder, \"output_2.csv\") dest3 <- file.path(dest_folder, \"other_output.csv\")  write.csv(mtcars[1:16, ], dest1, row.names = FALSE) #> Warning: cannot open file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file101257e29138/output_glob/output_1.csv': No such file or directory #> Error in file(file, ifelse(append, \"a\", \"w\")): cannot open the connection write.csv(mtcars[17:32, ], dest2, row.names = FALSE) #> Warning: cannot open file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file101257e29138/output_glob/output_2.csv': No such file or directory #> Error in file(file, ifelse(append, \"a\", \"w\")): cannot open the connection write.csv(iris, dest3, row.names = FALSE) #> Warning: cannot open file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file101257e29138/output_glob/other_output.csv': No such file or directory #> Error in file(file, ifelse(append, \"a\", \"w\")): cannot open the connection list.files(dest_folder) #> character(0)  # Import only the files whose name match \"output_XXX.csv\" as a LazyFrame scan_csv_polars(paste0(dest_folder, \"/output_*.csv\")) |>   arrange(mpg) |>   compute() #> Error in x$collect_schema(): Evaluation failed in `$collect_schema()`. #> Caused by error: #> ! expected at least 1 source: 'csv scan'"},{"path":"https://tidypolars.etiennebacher.com/reference/from_ipc.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from IPC file(s) — from_ipc","title":"Import data from IPC file(s) — from_ipc","text":"read_ipc_polars() imports data Polars DataFrame. scan_ipc_polars() imports data Polars LazyFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_ipc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from IPC file(s) — from_ipc","text":"","code":"read_ipc_polars(   source,   ...,   n_rows = NULL,   row_index_name = NULL,   row_index_offset = 0L,   rechunk = FALSE,   cache = TRUE,   include_file_paths = NULL,   memory_map )  scan_ipc_polars(   source,   ...,   n_rows = NULL,   row_index_name = NULL,   row_index_offset = 0L,   rechunk = FALSE,   cache = TRUE,   include_file_paths = NULL,   memory_map )"},{"path":"https://tidypolars.etiennebacher.com/reference/from_ipc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from IPC file(s) — from_ipc","text":"source Path(s) file directory. needing authenticate scanning cloud locations, see storage_options parameter. ... dots future extensions must empty. n_rows Stop reading source reading n_rows. row_index_name NULL, insert row index column given name. row_index_offset Offset start row index column (used name set row_index_name). rechunk Reallocate contiguous memory chunks/files parsed. cache Cache result reading. include_file_paths Include path source file(s) column name. memory_map Deprecated replacement.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_ipc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from IPC file(s) — from_ipc","text":"scan function returns LazyFrame, read function returns DataFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_ipc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from IPC file(s) — from_ipc","text":"","code":"### Read or scan a single IPC file ------------------------  # Setup: create an IPC file dest <- withr::local_tempfile(fileext = \".ipc\") arrow::write_ipc_file(mtcars, file(dest))  # Import this file as a DataFrame for eager evaluation read_ipc_polars(dest) |>   arrange(mpg) #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 10.4 ┆ 8.0 ┆ 472.0 ┆ 205.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 10.4 ┆ 8.0 ┆ 460.0 ┆ 215.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 13.3 ┆ 8.0 ┆ 350.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 14.7 ┆ 8.0 ┆ 440.0 ┆ 230.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 27.3 ┆ 4.0 ┆ 79.0  ┆ 66.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 30.4 ┆ 4.0 ┆ 75.7  ┆ 52.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 32.4 ┆ 4.0 ┆ 78.7  ┆ 66.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 33.9 ┆ 4.0 ┆ 71.1  ┆ 65.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘  # Import this file as a LazyFrame for lazy evaluation scan_ipc_polars(dest) |>   arrange(mpg) |>   compute() #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 10.4 ┆ 8.0 ┆ 472.0 ┆ 205.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 10.4 ┆ 8.0 ┆ 460.0 ┆ 215.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 13.3 ┆ 8.0 ┆ 350.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 14.7 ┆ 8.0 ┆ 440.0 ┆ 230.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 27.3 ┆ 4.0 ┆ 79.0  ┆ 66.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 30.4 ┆ 4.0 ┆ 75.7  ┆ 52.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 32.4 ┆ 4.0 ┆ 78.7  ┆ 66.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 33.9 ┆ 4.0 ┆ 71.1  ┆ 65.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘   ### Read or scan several all IPC files in a folder ------------------------  # Setup: create a folder \"output\" that contains two IPC files dest_folder <- file.path(withr::local_tempdir(), \"output\") dir.create(dest_folder, showWarnings = FALSE) dest1 <- file.path(dest_folder, \"output_1.ipc\") dest2 <- file.path(dest_folder, \"output_2.ipc\")  arrow::write_ipc_file(mtcars[1:16, ], dest1) #> Error: IOError: Failed to open local file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10121ca88956/output/output_1.ipc'. Detail: [errno 2] No such file or directory arrow::write_ipc_file(mtcars[17:32, ], dest2) #> Error: IOError: Failed to open local file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10121ca88956/output/output_2.ipc'. Detail: [errno 2] No such file or directory list.files(dest_folder) #> character(0)  # Import all files as a LazyFrame scan_ipc_polars(dest_folder) |>   arrange(mpg) |>   compute() #> Error in x$collect_schema(): Evaluation failed in `$collect_schema()`. #> Caused by error: #> ! No such file or directory (os error 2): /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10121ca88956/output: 'ipc scan'   ### Read or scan all IPC files that match a glob pattern ------------------------  # Setup: create a folder \"output\" that contains three IPC files, # two of which follow the pattern \"output_XXX.ipc\" dest_folder <- file.path(withr::local_tempdir(), \"output_glob\") dir.create(dest_folder, showWarnings = FALSE) dest1 <- file.path(dest_folder, \"output_1.ipc\") dest2 <- file.path(dest_folder, \"output_2.ipc\") dest3 <- file.path(dest_folder, \"other_output.ipc\")  arrow::write_ipc_file(mtcars[1:16, ], dest1) #> Error: IOError: Failed to open local file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10127cd07bcc/output_glob/output_1.ipc'. Detail: [errno 2] No such file or directory arrow::write_ipc_file(mtcars[17:32, ], dest2) #> Error: IOError: Failed to open local file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10127cd07bcc/output_glob/output_2.ipc'. Detail: [errno 2] No such file or directory arrow::write_ipc_file(iris, dest3) #> Error: IOError: Failed to open local file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10127cd07bcc/output_glob/other_output.ipc'. Detail: [errno 2] No such file or directory list.files(dest_folder) #> character(0)  # Import only the files whose name match \"output_XXX.ipc\" as a LazyFrame scan_ipc_polars(paste0(dest_folder, \"/output_*.ipc\")) |>   arrange(mpg) |>   compute() #> Error in x$collect_schema(): Evaluation failed in `$collect_schema()`. #> Caused by error: #> ! expected at least 1 source: 'ipc scan'"},{"path":"https://tidypolars.etiennebacher.com/reference/from_ndjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from NDJSON file(s) — from_ndjson","title":"Import data from NDJSON file(s) — from_ndjson","text":"read_ndjson_polars() imports data Polars DataFrame. scan_ndjson_polars() imports data Polars LazyFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_ndjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from NDJSON file(s) — from_ndjson","text":"","code":"read_ndjson_polars(   source,   ...,   infer_schema_length = 100,   batch_size = NULL,   n_rows = NULL,   low_memory = FALSE,   rechunk = FALSE,   row_index_name = NULL,   row_index_offset = 0,   ignore_errors = FALSE,   reuse_downloaded )  scan_ndjson_polars(   source,   ...,   infer_schema_length = 100,   batch_size = NULL,   n_rows = NULL,   low_memory = FALSE,   rechunk = FALSE,   row_index_name = NULL,   row_index_offset = 0,   ignore_errors = FALSE,   reuse_downloaded )"},{"path":"https://tidypolars.etiennebacher.com/reference/from_ndjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from NDJSON file(s) — from_ndjson","text":"source Path(s) file directory. needing authenticate scanning cloud locations, see storage_options parameter. ... dots future extensions must empty. infer_schema_length maximum number rows scan schema inference. NULL, full data may scanned (slow). Set infer_schema = FALSE read columns pl$String. batch_size Number rows read batch. n_rows Stop reading source reading n_rows. low_memory Reduce memory pressure expense performance. rechunk Reallocate contiguous memory chunks/files parsed. row_index_name NULL, insert row index column given name. row_index_offset Offset start row index column (used name set row_index_name). ignore_errors Keep reading file even lines yield errors. can also use infer_schema = FALSE read columns UTF8 check values might cause issue. reuse_downloaded Deprecated replacement.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_ndjson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from NDJSON file(s) — from_ndjson","text":"scan function returns LazyFrame, read function returns DataFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_ndjson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from NDJSON file(s) — from_ndjson","text":"","code":"### Read or scan a single NDJSON file ------------------------  # Setup: create a NDJSON file dest <- withr::local_tempfile(fileext = \".json\") jsonlite::stream_out(mtcars, file(dest), verbose = FALSE)  # Import this file as a DataFrame for eager evaluation read_ndjson_polars(dest) |>   arrange(mpg) #> shape: (32, 12) #> ┌──────┬─────┬───────┬─────┬───┬─────┬──────┬──────┬─────────────────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp  ┆ … ┆ am  ┆ gear ┆ carb ┆ _row                │ #> │ ---  ┆ --- ┆ ---   ┆ --- ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---                 │ #> │ f64  ┆ i64 ┆ f64   ┆ i64 ┆   ┆ i64 ┆ i64  ┆ i64  ┆ str                 │ #> ╞══════╪═════╪═══════╪═════╪═══╪═════╪══════╪══════╪═════════════════════╡ #> │ 10.4 ┆ 8   ┆ 472.0 ┆ 205 ┆ … ┆ 0   ┆ 3    ┆ 4    ┆ Cadillac Fleetwood  │ #> │ 10.4 ┆ 8   ┆ 460.0 ┆ 215 ┆ … ┆ 0   ┆ 3    ┆ 4    ┆ Lincoln Continental │ #> │ 13.3 ┆ 8   ┆ 350.0 ┆ 245 ┆ … ┆ 0   ┆ 3    ┆ 4    ┆ Camaro Z28          │ #> │ 14.3 ┆ 8   ┆ 360.0 ┆ 245 ┆ … ┆ 0   ┆ 3    ┆ 4    ┆ Duster 360          │ #> │ 14.7 ┆ 8   ┆ 440.0 ┆ 230 ┆ … ┆ 0   ┆ 3    ┆ 4    ┆ Chrysler Imperial   │ #> │ …    ┆ …   ┆ …     ┆ …   ┆ … ┆ …   ┆ …    ┆ …    ┆ …                   │ #> │ 27.3 ┆ 4   ┆ 79.0  ┆ 66  ┆ … ┆ 1   ┆ 4    ┆ 1    ┆ Fiat X1-9           │ #> │ 30.4 ┆ 4   ┆ 75.7  ┆ 52  ┆ … ┆ 1   ┆ 4    ┆ 2    ┆ Honda Civic         │ #> │ 30.4 ┆ 4   ┆ 95.1  ┆ 113 ┆ … ┆ 1   ┆ 5    ┆ 2    ┆ Lotus Europa        │ #> │ 32.4 ┆ 4   ┆ 78.7  ┆ 66  ┆ … ┆ 1   ┆ 4    ┆ 1    ┆ Fiat 128            │ #> │ 33.9 ┆ 4   ┆ 71.1  ┆ 65  ┆ … ┆ 1   ┆ 4    ┆ 1    ┆ Toyota Corolla      │ #> └──────┴─────┴───────┴─────┴───┴─────┴──────┴──────┴─────────────────────┘  # Import this file as a LazyFrame for lazy evaluation scan_ndjson_polars(dest) |>   arrange(mpg) |>   compute() #> shape: (32, 12) #> ┌──────┬─────┬───────┬─────┬───┬─────┬──────┬──────┬─────────────────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp  ┆ … ┆ am  ┆ gear ┆ carb ┆ _row                │ #> │ ---  ┆ --- ┆ ---   ┆ --- ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---                 │ #> │ f64  ┆ i64 ┆ f64   ┆ i64 ┆   ┆ i64 ┆ i64  ┆ i64  ┆ str                 │ #> ╞══════╪═════╪═══════╪═════╪═══╪═════╪══════╪══════╪═════════════════════╡ #> │ 10.4 ┆ 8   ┆ 472.0 ┆ 205 ┆ … ┆ 0   ┆ 3    ┆ 4    ┆ Cadillac Fleetwood  │ #> │ 10.4 ┆ 8   ┆ 460.0 ┆ 215 ┆ … ┆ 0   ┆ 3    ┆ 4    ┆ Lincoln Continental │ #> │ 13.3 ┆ 8   ┆ 350.0 ┆ 245 ┆ … ┆ 0   ┆ 3    ┆ 4    ┆ Camaro Z28          │ #> │ 14.3 ┆ 8   ┆ 360.0 ┆ 245 ┆ … ┆ 0   ┆ 3    ┆ 4    ┆ Duster 360          │ #> │ 14.7 ┆ 8   ┆ 440.0 ┆ 230 ┆ … ┆ 0   ┆ 3    ┆ 4    ┆ Chrysler Imperial   │ #> │ …    ┆ …   ┆ …     ┆ …   ┆ … ┆ …   ┆ …    ┆ …    ┆ …                   │ #> │ 27.3 ┆ 4   ┆ 79.0  ┆ 66  ┆ … ┆ 1   ┆ 4    ┆ 1    ┆ Fiat X1-9           │ #> │ 30.4 ┆ 4   ┆ 75.7  ┆ 52  ┆ … ┆ 1   ┆ 4    ┆ 2    ┆ Honda Civic         │ #> │ 30.4 ┆ 4   ┆ 95.1  ┆ 113 ┆ … ┆ 1   ┆ 5    ┆ 2    ┆ Lotus Europa        │ #> │ 32.4 ┆ 4   ┆ 78.7  ┆ 66  ┆ … ┆ 1   ┆ 4    ┆ 1    ┆ Fiat 128            │ #> │ 33.9 ┆ 4   ┆ 71.1  ┆ 65  ┆ … ┆ 1   ┆ 4    ┆ 1    ┆ Toyota Corolla      │ #> └──────┴─────┴───────┴─────┴───┴─────┴──────┴──────┴─────────────────────┘   ### Read or scan several all NDJSON files in a folder ------------------------  # Setup: create a folder \"output\" that contains two NDJSON files dest_folder <- file.path(withr::local_tempdir(), \"output\") dir.create(dest_folder, showWarnings = FALSE) dest1 <- file.path(dest_folder, \"output_1.json\") dest2 <- file.path(dest_folder, \"output_2.json\")  jsonlite::stream_out(mtcars[1:16, ], file(dest1), verbose = FALSE) #> Warning: cannot open file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file101250b80f72/output/output_1.json': No such file or directory #> Error in open.connection(con, \"wb\"): cannot open the connection jsonlite::stream_out(mtcars[17:32, ], file(dest2), verbose = FALSE) #> Warning: cannot open file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file101250b80f72/output/output_2.json': No such file or directory #> Error in open.connection(con, \"wb\"): cannot open the connection list.files(dest_folder) #> character(0)  # Import all files as a LazyFrame scan_ndjson_polars(dest_folder) |>   arrange(mpg) |>   compute() #> Error in x$collect_schema(): Evaluation failed in `$collect_schema()`. #> Caused by error: #> ! No such file or directory (os error 2): /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file101250b80f72/output: 'ndjson scan'   ### Read or scan all NDJSON files that match a glob pattern ------------------------  # Setup: create a folder \"output\" that contains three NDJSON files, # two of which follow the pattern \"output_XXX.json\" dest_folder <- file.path(withr::local_tempdir(), \"output_glob\") dir.create(dest_folder, showWarnings = FALSE) dest1 <- file.path(dest_folder, \"output_1.json\") dest2 <- file.path(dest_folder, \"output_2.json\") dest3 <- file.path(dest_folder, \"other_output.json\")  jsonlite::stream_out(mtcars[1:16, ], file(dest1), verbose = FALSE) #> Warning: cannot open file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file101263fe2ec4/output_glob/output_1.json': No such file or directory #> Error in open.connection(con, \"wb\"): cannot open the connection jsonlite::stream_out(mtcars[17:32, ], file(dest2), verbose = FALSE) #> Warning: cannot open file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file101263fe2ec4/output_glob/output_2.json': No such file or directory #> Error in open.connection(con, \"wb\"): cannot open the connection jsonlite::stream_out(iris, file(dest3), verbose = FALSE) #> Warning: cannot open file '/var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file101263fe2ec4/output_glob/other_output.json': No such file or directory #> Error in open.connection(con, \"wb\"): cannot open the connection list.files(dest_folder) #> character(0)  # Import only the files whose name match \"output_XXX.json\" as a LazyFrame scan_ndjson_polars(paste0(dest_folder, \"/output_*.json\")) |>   arrange(mpg) |>   compute() #> Error in x$collect_schema(): Evaluation failed in `$collect_schema()`. #> Caused by error: #> ! expected at least 1 source: 'ndjson scan'"},{"path":"https://tidypolars.etiennebacher.com/reference/from_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from Parquet file(s) — from_parquet","title":"Import data from Parquet file(s) — from_parquet","text":"read_parquet_polars() imports data Polars DataFrame. scan_parquet_polars() imports data Polars LazyFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from Parquet file(s) — from_parquet","text":"","code":"read_parquet_polars(   source,   ...,   n_rows = NULL,   row_index_name = NULL,   row_index_offset = 0L,   parallel = \"auto\",   hive_partitioning = NULL,   hive_schema = NULL,   try_parse_hive_dates = TRUE,   glob = TRUE,   rechunk = TRUE,   low_memory = FALSE,   storage_options = NULL,   use_statistics = TRUE,   cache = TRUE,   include_file_paths = NULL )  scan_parquet_polars(   source,   ...,   n_rows = NULL,   row_index_name = NULL,   row_index_offset = 0L,   parallel = \"auto\",   hive_partitioning = NULL,   hive_schema = NULL,   try_parse_hive_dates = TRUE,   glob = TRUE,   rechunk = FALSE,   low_memory = FALSE,   storage_options = NULL,   use_statistics = TRUE,   cache = TRUE,   include_file_paths = NULL )"},{"path":"https://tidypolars.etiennebacher.com/reference/from_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from Parquet file(s) — from_parquet","text":"source Path(s) file directory. needing authenticate scanning cloud locations, see storage_options parameter. ... dots future extensions must empty. n_rows Stop reading source reading n_rows. row_index_name NULL, insert row index column given name. row_index_offset Offset start row index column (used name set row_index_name). parallel determines direction strategy parallelism. \"auto\" (default): try determine optimal direction. \"prefiltered\":  Strategy first evaluates pushed-predicates parallel determines mask rows read. , parallelizes columns row groups filtering rows need read. can provide significant speedups large files (.e. many row-groups) predicate filters clustered rows filters heavily. cases, prefiltered may slow scan compared strategies. Falls back \"auto\" predicate given. \"columns\", \"row_groups\": Use specified direction. \"none\": parallelism. hive_partitioning Infer statistics schema Hive partitioned sources use prune reads. NULL (default), automatically enabled single directory passed, otherwise disabled. hive_schema list containing column names data types columns data partitioned, e.g. list(= pl$String, b = pl$Float32). NULL (default), schema Hive partitions inferred. try_parse_hive_dates Whether try parsing hive values date / datetime types. glob Expand path given via globbing rules. rechunk Reallocate contiguous memory chunks/files parsed. low_memory Reduce memory pressure expense performance storage_options Named vector containing options indicate connect cloud provider. cloud providers currently supported AWS, GCP, Azure. See supported keys : aws gcp azure Hugging Face (hf://): Accepts API key token parameter c(token = YOUR_TOKEN) setting HF_TOKEN environment variable. storage_options provided, Polars try infer information environment variables. use_statistics Use statistics parquet determine pages can skipped reading. cache Cache result reading. include_file_paths Include path source file(s) column name.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from Parquet file(s) — from_parquet","text":"scan function returns LazyFrame, read function returns DataFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/from_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from Parquet file(s) — from_parquet","text":"","code":"### Read or scan a single Parquet file ------------------------  # Setup: create a Parquet file dest <- withr::local_tempfile(fileext = \".parquet\") dat <- as_polars_df(mtcars) write_parquet_polars(dat, dest)  # Import this file as a DataFrame for eager evaluation read_parquet_polars(dest) |>   arrange(mpg) #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 10.4 ┆ 8.0 ┆ 472.0 ┆ 205.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 10.4 ┆ 8.0 ┆ 460.0 ┆ 215.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 13.3 ┆ 8.0 ┆ 350.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 14.7 ┆ 8.0 ┆ 440.0 ┆ 230.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 27.3 ┆ 4.0 ┆ 79.0  ┆ 66.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 30.4 ┆ 4.0 ┆ 75.7  ┆ 52.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 32.4 ┆ 4.0 ┆ 78.7  ┆ 66.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 33.9 ┆ 4.0 ┆ 71.1  ┆ 65.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘  # Import this file as a LazyFrame for lazy evaluation scan_parquet_polars(dest) |>   arrange(mpg) |>   compute() #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 10.4 ┆ 8.0 ┆ 472.0 ┆ 205.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 10.4 ┆ 8.0 ┆ 460.0 ┆ 215.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 13.3 ┆ 8.0 ┆ 350.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 14.7 ┆ 8.0 ┆ 440.0 ┆ 230.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 27.3 ┆ 4.0 ┆ 79.0  ┆ 66.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 30.4 ┆ 4.0 ┆ 75.7  ┆ 52.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 32.4 ┆ 4.0 ┆ 78.7  ┆ 66.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 33.9 ┆ 4.0 ┆ 71.1  ┆ 65.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘   ### Read or scan several all Parquet files in a folder ------------------------  # Setup: create a folder \"output\" that contains two Parquet files dest_folder <- file.path(withr::local_tempdir(), \"output\") dir.create(dest_folder, showWarnings = FALSE) dest1 <- file.path(dest_folder, \"output_1.parquet\") dest2 <- file.path(dest_folder, \"output_2.parquet\")  write_parquet_polars(as_polars_df(mtcars[1:16, ]), dest1) #> Error in .data$write_parquet(file, compression = compression, compression_level = compression_level,     statistics = statistics, row_group_size = row_group_size,     data_page_size = data_page_size, partition_by = partition_by,     partition_chunk_size_bytes = partition_chunk_size_bytes): Evaluation failed in `$write_parquet()`. #> Caused by error: #> ! Evaluation failed in `$sink_parquet()`. #> Caused by error in `wrap(lf)$collect()`: #> ! Evaluation failed in `$collect()`. #> Caused by error: #> ! No such file or directory (os error 2): ...x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file1012170cfe72/output/output_1.parquet (set POLARS_VERBOSE=1 to see full path) write_parquet_polars(as_polars_df(mtcars[17:32, ]), dest2) #> Error in .data$write_parquet(file, compression = compression, compression_level = compression_level,     statistics = statistics, row_group_size = row_group_size,     data_page_size = data_page_size, partition_by = partition_by,     partition_chunk_size_bytes = partition_chunk_size_bytes): Evaluation failed in `$write_parquet()`. #> Caused by error: #> ! Evaluation failed in `$sink_parquet()`. #> Caused by error in `wrap(lf)$collect()`: #> ! Evaluation failed in `$collect()`. #> Caused by error: #> ! No such file or directory (os error 2): ...x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file1012170cfe72/output/output_2.parquet (set POLARS_VERBOSE=1 to see full path) list.files(dest_folder) #> character(0)  # Import all files as a LazyFrame scan_parquet_polars(dest_folder) |>   arrange(mpg) |>   compute() #> Error in x$collect_schema(): Evaluation failed in `$collect_schema()`. #> Caused by error: #> ! No such file or directory (os error 2): /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file1012170cfe72/output: 'parquet scan'  # Include the file path to know where each row comes from scan_parquet_polars(dest_folder, include_file_paths = \"file_path\") |>   arrange(mpg) |>   compute() #> Error in x$collect_schema(): Evaluation failed in `$collect_schema()`. #> Caused by error: #> ! No such file or directory (os error 2): /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file1012170cfe72/output: 'parquet scan'   ### Read or scan all Parquet files that match a glob pattern ------------------------  # Setup: create a folder \"output\" that contains three Parquet files, # two of which follow the pattern \"output_XXX.parquet\" dest_folder <- file.path(withr::local_tempdir(), \"output_glob\") dir.create(dest_folder, showWarnings = FALSE) dest1 <- file.path(dest_folder, \"output_1.parquet\") dest2 <- file.path(dest_folder, \"output_2.parquet\") dest3 <- file.path(dest_folder, \"other_output.parquet\")  write_parquet_polars(as_polars_df(mtcars[1:16, ]), dest1) #> Error in .data$write_parquet(file, compression = compression, compression_level = compression_level,     statistics = statistics, row_group_size = row_group_size,     data_page_size = data_page_size, partition_by = partition_by,     partition_chunk_size_bytes = partition_chunk_size_bytes): Evaluation failed in `$write_parquet()`. #> Caused by error: #> ! Evaluation failed in `$sink_parquet()`. #> Caused by error in `wrap(lf)$collect()`: #> ! Evaluation failed in `$collect()`. #> Caused by error: #> ! No such file or directory (os error 2): ...5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10125614fa30/output_glob/output_1.parquet (set POLARS_VERBOSE=1 to see full path) write_parquet_polars(as_polars_df(mtcars[17:32, ]), dest2) #> Error in .data$write_parquet(file, compression = compression, compression_level = compression_level,     statistics = statistics, row_group_size = row_group_size,     data_page_size = data_page_size, partition_by = partition_by,     partition_chunk_size_bytes = partition_chunk_size_bytes): Evaluation failed in `$write_parquet()`. #> Caused by error: #> ! Evaluation failed in `$sink_parquet()`. #> Caused by error in `wrap(lf)$collect()`: #> ! Evaluation failed in `$collect()`. #> Caused by error: #> ! No such file or directory (os error 2): ...5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10125614fa30/output_glob/output_2.parquet (set POLARS_VERBOSE=1 to see full path) write_parquet_polars(as_polars_df(iris), dest3) #> Error in .data$write_parquet(file, compression = compression, compression_level = compression_level,     statistics = statistics, row_group_size = row_group_size,     data_page_size = data_page_size, partition_by = partition_by,     partition_chunk_size_bytes = partition_chunk_size_bytes): Evaluation failed in `$write_parquet()`. #> Caused by error: #> ! Evaluation failed in `$sink_parquet()`. #> Caused by error in `wrap(lf)$collect()`: #> ! Evaluation failed in `$collect()`. #> Caused by error: #> ! No such file or directory (os error 2): ...h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10125614fa30/output_glob/other_output.parquet (set POLARS_VERBOSE=1 to see full path) list.files(dest_folder) #> character(0)  # Import only the files whose name match \"output_XXX.parquet\" as a LazyFrame scan_parquet_polars(paste0(dest_folder, \"/output_*.parquet\")) |>   arrange(mpg) |>   compute() #> Error in x$collect_schema(): Evaluation failed in `$collect_schema()`. #> Caused by error: #> ! expected at least 1 source: 'parquet scan'"},{"path":"https://tidypolars.etiennebacher.com/reference/group_by.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by one or more variables — group_by.polars_data_frame","title":"Group by one or more variables — group_by.polars_data_frame","text":"data operations done groups defined variables. group_by() takes existing Polars Data/LazyFrame converts grouped one operations performed \"group\". ungroup() removes grouping.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/group_by.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by one or more variables — group_by.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' group_by(.data, ..., maintain_order = FALSE, .add = FALSE, .drop = TRUE)  # S3 method for class 'polars_data_frame' ungroup(x, ...)  # S3 method for class 'polars_lazy_frame' group_by(.data, ..., maintain_order = FALSE, .add = FALSE, .drop = TRUE)  # S3 method for class 'polars_lazy_frame' ungroup(x, ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/group_by.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by one or more variables — group_by.polars_data_frame","text":".data Polars Data/LazyFrame ... Variables group (used group_by() ). used ungroup(). maintain_order Maintain row order. performance reasons, FALSE default). Setting TRUE can slow process large datasets prevents use streaming. .add FALSE (default), group_by() override existing groups. add existing groups, use .add = TRUE. .drop Unsupported. present provide good error message specified user. x Polars Data/LazyFrame","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/group_by.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group by one or more variables — group_by.polars_data_frame","text":"","code":"by_cyl <- mtcars |>   as_polars_df() |>   group_by(cyl)  by_cyl #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘ #> Groups [3]: cyl #> Maintain order: FALSE  by_cyl |> summarise(   disp = mean(disp),   hp = mean(hp) ) #> shape: (3, 3) #> ┌─────┬────────────┬────────────┐ #> │ cyl ┆ disp       ┆ hp         │ #> │ --- ┆ ---        ┆ ---        │ #> │ f64 ┆ f64        ┆ f64        │ #> ╞═════╪════════════╪════════════╡ #> │ 4.0 ┆ 105.136364 ┆ 82.636364  │ #> │ 8.0 ┆ 353.1      ┆ 209.214286 │ #> │ 6.0 ┆ 183.314286 ┆ 122.285714 │ #> └─────┴────────────┴────────────┘ by_cyl |> filter(disp == max(disp)) #> shape: (3, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 24.4 ┆ 4.0 ┆ 146.7 ┆ 62.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ 10.4 ┆ 8.0 ┆ 472.0 ┆ 205.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘ #> Groups [3]: cyl #> Maintain order: FALSE"},{"path":"https://tidypolars.etiennebacher.com/reference/group_split.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping metadata — group_split.polars_data_frame","title":"Grouping metadata — group_split.polars_data_frame","text":"group_vars() returns character vector names grouping variables. group_keys() returns data frame one row per group.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/group_split.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping metadata — group_split.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' group_split(.tbl, ..., .keep = TRUE)"},{"path":"https://tidypolars.etiennebacher.com/reference/group_split.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping metadata — group_split.polars_data_frame","text":".tbl Polars Data/LazyFrame ... .tbl grouped, variables group . .tbl already grouped, ignored. .keep grouping columns kept?","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/group_split.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping metadata — group_split.polars_data_frame","text":"","code":"pl_g <- polars::as_polars_df(iris) |>   group_by(Species)  group_split(pl_g) #> [[1]] #> shape: (50, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …       │ #> │ 4.8          ┆ 3.0         ┆ 1.4          ┆ 0.3         ┆ setosa  │ #> │ 5.1          ┆ 3.8         ┆ 1.6          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.2         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 5.3          ┆ 3.7         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 5.0          ┆ 3.3         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘ #>  #> [[2]] #> shape: (50, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species    │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat        │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡ #> │ 7.0          ┆ 3.2         ┆ 4.7          ┆ 1.4         ┆ versicolor │ #> │ 6.4          ┆ 3.2         ┆ 4.5          ┆ 1.5         ┆ versicolor │ #> │ 6.9          ┆ 3.1         ┆ 4.9          ┆ 1.5         ┆ versicolor │ #> │ 5.5          ┆ 2.3         ┆ 4.0          ┆ 1.3         ┆ versicolor │ #> │ 6.5          ┆ 2.8         ┆ 4.6          ┆ 1.5         ┆ versicolor │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …          │ #> │ 5.7          ┆ 3.0         ┆ 4.2          ┆ 1.2         ┆ versicolor │ #> │ 5.7          ┆ 2.9         ┆ 4.2          ┆ 1.3         ┆ versicolor │ #> │ 6.2          ┆ 2.9         ┆ 4.3          ┆ 1.3         ┆ versicolor │ #> │ 5.1          ┆ 2.5         ┆ 3.0          ┆ 1.1         ┆ versicolor │ #> │ 5.7          ┆ 2.8         ┆ 4.1          ┆ 1.3         ┆ versicolor │ #> └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘ #>  #> [[3]] #> shape: (50, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 6.3          ┆ 3.3         ┆ 6.0          ┆ 2.5         ┆ virginica │ #> │ 5.8          ┆ 2.7         ┆ 5.1          ┆ 1.9         ┆ virginica │ #> │ 7.1          ┆ 3.0         ┆ 5.9          ┆ 2.1         ┆ virginica │ #> │ 6.3          ┆ 2.9         ┆ 5.6          ┆ 1.8         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.8          ┆ 2.2         ┆ virginica │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘ #>"},{"path":"https://tidypolars.etiennebacher.com/reference/group_vars.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping metadata — group_vars.polars_data_frame","title":"Grouping metadata — group_vars.polars_data_frame","text":"group_vars() returns character vector names grouping variables. group_keys() returns data frame one row per group.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/group_vars.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping metadata — group_vars.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' group_vars(x)  # S3 method for class 'polars_lazy_frame' group_vars(x)  # S3 method for class 'polars_data_frame' group_keys(.tbl, ...)  # S3 method for class 'polars_lazy_frame' group_keys(.tbl, ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/group_vars.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping metadata — group_vars.polars_data_frame","text":"x, .tbl Polars Data/LazyFrame ... dots future extensions must empty.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/group_vars.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping metadata — group_vars.polars_data_frame","text":"","code":"pl_g <- polars::as_polars_df(mtcars) |>   group_by(cyl, am)  group_vars(pl_g) #> [1] \"cyl\" \"am\"   group_keys(pl_g) #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> # A tibble: 6 × 2 #>     cyl    am #>   <dbl> <dbl> #> 1     4     0 #> 2     4     1 #> 3     6     0 #> 4     6     1 #> 5     8     0 #> 6     8     1"},{"path":"https://tidypolars.etiennebacher.com/reference/make_unique_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a column with unique id per row values — make_unique_id","title":"Create a column with unique id per row values — make_unique_id","text":"Create column unique id per row values","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/make_unique_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a column with unique id per row values — make_unique_id","text":"","code":"make_unique_id(.data, ..., new_col = \"hash\")"},{"path":"https://tidypolars.etiennebacher.com/reference/make_unique_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a column with unique id per row values — make_unique_id","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. new_col Name new column","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/make_unique_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a column with unique id per row values — make_unique_id","text":"","code":"mtcars |>   as_polars_df() |>   make_unique_id(am, gear) #> shape: (32, 12) #> ┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬──────────────────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ hash                 │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---                  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ u64                  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪══════════════════════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 9075750721950216194  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 9075750721950216194  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 4.0  ┆ 1.0  ┆ 9075750721950216194  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 1.0  ┆ 5689277069539683439  │ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 2.0  ┆ 5689277069539683439  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …    ┆ …    ┆ …                    │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 2.0  ┆ 16223066141620998052 │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 4.0  ┆ 16223066141620998052 │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 6.0  ┆ 16223066141620998052 │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 8.0  ┆ 16223066141620998052 │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 2.0  ┆ 9075750721950216194  │ #> └──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴──────────────────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/mutate.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, modify, and delete columns — mutate.polars_data_frame","title":"Create, modify, and delete columns — mutate.polars_data_frame","text":"creates new columns functions existing variables. can also modify (name existing column) delete columns (setting value NULL).","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/mutate.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, modify, and delete columns — mutate.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' mutate(.data, ..., .by = NULL, .keep = c(\"all\", \"used\", \"unused\", \"none\"))  # S3 method for class 'polars_lazy_frame' mutate(.data, ..., .by = NULL, .keep = c(\"all\", \"used\", \"unused\", \"none\"))"},{"path":"https://tidypolars.etiennebacher.com/reference/mutate.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, modify, and delete columns — mutate.polars_data_frame","text":".data Polars Data/LazyFrame ... Name-value pairs. name gives name column output. value can : vector length current group (whole data frame ungrouped). NULL, remove column. across() mostly supported, except cases. particular, .cols argument (...), select variables created across(). select helpers supported. See examples. .Optionally, selection columns group just operation, functioning alternative group_by(). group order maintained, use group_by() want control . .keep Control columns .data retained output. Grouping columns columns created ... always kept. \"\" retains columns .data. default. \"used\" retains columns used ... create new columns. useful checking work, displays inputs outputs side-- side. \"unused\" retains columns used ... create new columns. useful generate new columns, longer need columns used generate . \"none\" retain extra columns .data. grouping variables columns created ... kept.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/mutate.polars_data_frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create, modify, and delete columns — mutate.polars_data_frame","text":"lot functions available base R (cos, mean, multiplying, etc.) packages (dplyr::lag(), etc.) implemented efficient way Polars. functions automatically translated Polars syntax hood can continue using classic R syntax functions. Polars built-replacement exist (example custom functions), tidypolars throw error. See vignette Polars expressions know write custom functions accepted tidypolars.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/mutate.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, modify, and delete columns — mutate.polars_data_frame","text":"","code":"pl_iris <- polars::as_polars_df(iris)  # classic operation mutate(pl_iris, x = Sepal.Width + Sepal.Length) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬─────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ x   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ --- │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ f64 │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 8.6 │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 7.9 │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 7.9 │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 7.7 │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 8.6 │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …   │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica ┆ 9.7 │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 8.8 │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 9.5 │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 9.6 │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 8.9 │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴─────┘  # logical operation mutate(pl_iris, x = Sepal.Width > Sepal.Length & Petal.Width > Petal.Length) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬───────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ x     │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ ---   │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ bool  │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═══════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ false │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ false │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ false │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ false │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ false │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …     │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica ┆ false │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ false │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ false │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ false │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ false │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴───────┘  # overwrite existing variable mutate(pl_iris, Sepal.Width = Sepal.Width * 2) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 7.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 6.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 6.4         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 6.2         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ 5.0          ┆ 7.2         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.7          ┆ 6.0         ┆ 5.2          ┆ 2.3         ┆ virginica │ #> │ 6.3          ┆ 5.0         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 6.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 6.8         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 6.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  # grouped computation pl_iris |>   group_by(Species) |>   mutate(foo = mean(Sepal.Length)) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬───────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ foo   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ ---   │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ f64   │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═══════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …     │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica ┆ 6.588 │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 6.588 │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 6.588 │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 6.588 │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 6.588 │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴───────┘ #> Groups [3]: Species #> Maintain order: FALSE  # an alternative syntax for grouping is to use `.by` pl_iris |>   mutate(foo = mean(Sepal.Length), .by = Species) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬───────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ foo   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ ---   │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ f64   │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═══════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …     │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica ┆ 6.588 │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 6.588 │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 6.588 │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 6.588 │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 6.588 │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴───────┘  # across() is available pl_iris |>   mutate(     across(.cols = contains(\"Sepal\"), .fns = mean, .names = \"{.fn}_of_{.col}\")   ) #> shape: (150, 7) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ mean_of_Sepa ┆ mean_of_Sep │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ l.Length     ┆ al.Width    │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ ---          ┆ ---         │ #> │              ┆             ┆              ┆             ┆           ┆ f64          ┆ f64         │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.843333     ┆ 3.057333    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.843333     ┆ 3.057333    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 5.843333     ┆ 3.057333    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 5.843333     ┆ 3.057333    │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.843333     ┆ 3.057333    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …            ┆ …           │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica ┆ 5.843333     ┆ 3.057333    │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 5.843333     ┆ 3.057333    │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 5.843333     ┆ 3.057333    │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 5.843333     ┆ 3.057333    │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 5.843333     ┆ 3.057333    │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴──────────────┴─────────────┘ # # It can receive several types of functions: pl_iris |>   mutate(     across(       .cols = contains(\"Sepal\"),       .fns = list(mean = mean, sd = ~ sd(.x)),       .names = \"{.fn}_of_{.col}\"     )   ) #> shape: (150, 9) #> ┌───────────┬───────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬──────────┐ #> │ Sepal.Len ┆ Sepal.Wid ┆ Petal.Len ┆ Petal.Wid ┆ … ┆ mean_of_S ┆ sd_of_Sep ┆ mean_of_S ┆ sd_of_Se │ #> │ gth       ┆ th        ┆ gth       ┆ th        ┆   ┆ epal.Leng ┆ al.Length ┆ epal.Widt ┆ pal.Widt │ #> │ ---       ┆ ---       ┆ ---       ┆ ---       ┆   ┆ th        ┆ ---       ┆ h         ┆ h        │ #> │ f64       ┆ f64       ┆ f64       ┆ f64       ┆   ┆ ---       ┆ f64       ┆ ---       ┆ ---      │ #> │           ┆           ┆           ┆           ┆   ┆ f64       ┆           ┆ f64       ┆ f64      │ #> ╞═══════════╪═══════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪══════════╡ #> │ 5.1       ┆ 3.5       ┆ 1.4       ┆ 0.2       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 4.9       ┆ 3.0       ┆ 1.4       ┆ 0.2       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 4.7       ┆ 3.2       ┆ 1.3       ┆ 0.2       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 4.6       ┆ 3.1       ┆ 1.5       ┆ 0.2       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 5.0       ┆ 3.6       ┆ 1.4       ┆ 0.2       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ …         ┆ …         ┆ …         ┆ …         ┆ … ┆ …         ┆ …         ┆ …         ┆ …        │ #> │ 6.7       ┆ 3.0       ┆ 5.2       ┆ 2.3       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 6.3       ┆ 2.5       ┆ 5.0       ┆ 1.9       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 6.5       ┆ 3.0       ┆ 5.2       ┆ 2.0       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 6.2       ┆ 3.4       ┆ 5.4       ┆ 2.3       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 5.9       ┆ 3.0       ┆ 5.1       ┆ 1.8       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> └───────────┴───────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴──────────┘  # Be careful when using across(.cols = where(...), ...) as it will not include # variables created in the same `...` (this is only the case for `where()`): if (FALSE) { # \\dontrun{ pl_iris |>   mutate(     foo = 1,     across(       .cols = where(is.numeric),       \\(x) x - 1000 # <<<<<<<<< this will not be applied on variable \"foo\"     )   ) } # } # Warning message: # In `across()`, the argument `.cols = where(is.numeric)` will not take into account # variables created in the same `mutate()`/`summarize` call.  # Embracing an external variable works some_value <- 1 mutate(pl_iris, x = {{ some_value }}) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬─────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ x   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ --- │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ f64 │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 1.0 │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 1.0 │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 1.0 │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 1.0 │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 1.0 │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …   │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica ┆ 1.0 │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 1.0 │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 1.0 │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 1.0 │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 1.0 │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴─────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/mutating-joins.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating joins — left_join.polars_data_frame","title":"Mutating joins — left_join.polars_data_frame","text":"Mutating joins add columns y x, matching observations based keys.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/mutating-joins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating joins — left_join.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' left_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = \"na\",   relationship = NULL )  # S3 method for class 'polars_data_frame' right_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = \"na\",   relationship = NULL )  # S3 method for class 'polars_data_frame' full_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = \"na\",   relationship = NULL )  # S3 method for class 'polars_data_frame' inner_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = \"na\",   relationship = NULL )  # S3 method for class 'polars_lazy_frame' left_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = \"na\",   relationship = NULL )  # S3 method for class 'polars_lazy_frame' right_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = \"na\",   relationship = NULL )  # S3 method for class 'polars_lazy_frame' full_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = \"na\",   relationship = NULL )  # S3 method for class 'polars_lazy_frame' inner_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = \"na\",   relationship = NULL )"},{"path":"https://tidypolars.etiennebacher.com/reference/mutating-joins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating joins — left_join.polars_data_frame","text":"x, y Two Polars Data/LazyFrames Variables join . NULL (default), *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. can take character vector, like c(\"x\", \"y\") x y datasets. join variables name, use equalities character vector, like c(\"x1\" = \"x2\", \"y\"). use character vector, join can done using strict equality. can also specification created dplyr::join_by(). Contrary input character vector shown , join_by() uses unquoted column names, e.g join_by(x1 == x2, y). Finally, inner_join() also supports inequality joins, e.g. join_by(x1 >= x2), helpers (), overlaps(), within(). See documentation dplyr::join_by() information. join types likely support inequality joins future. copy, keep supported. suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... Dots empty. na_matches two NA values match? \"na\", default, treats two NA values equal. \"never\" treats two NA values different never match together values. Note joining Polars Data/LazyFrames, NaN always considered equal, matter value na_matches. differs original dplyr implementation. relationship Handling expected relationship keys x y. Must one following: NULL, default, equivalent \"many--many\". expect relationship x y. \"one--one\" expects row x match 1 row y row y match 1 row x. \"one--many\" expects row y match 1 row x. \"many--one\" expects row x matches 1 row y.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/mutating-joins.html","id":"unknown-arguments","dir":"Reference","previous_headings":"","what":"Unknown arguments","title":"Mutating joins — left_join.polars_data_frame","text":"Arguments supported original implementation tidyverse listed throw warning default specified. change behavior error instead, use options(tidypolars_unknown_args = \"error\").","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/mutating-joins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating joins — left_join.polars_data_frame","text":"","code":"test <- polars::pl$DataFrame(   x = c(1, 2, 3),   y1 = c(1, 2, 3),   z = c(1, 2, 3) )  test2 <- polars::pl$DataFrame(   x = c(1, 2, 4),   y2 = c(1, 2, 4),   z2 = c(4, 5, 7) )  test #> shape: (3, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y1  ┆ z   │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 │ #> │ 2.0 ┆ 2.0 ┆ 2.0 │ #> │ 3.0 ┆ 3.0 ┆ 3.0 │ #> └─────┴─────┴─────┘  test2 #> shape: (3, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y2  ┆ z2  │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 4.0 │ #> │ 2.0 ┆ 2.0 ┆ 5.0 │ #> │ 4.0 ┆ 4.0 ┆ 7.0 │ #> └─────┴─────┴─────┘  # default is to use common columns, here \"x\" only left_join(test, test2) #> Joining by `x` #> shape: (3, 5) #> ┌─────┬─────┬─────┬──────┬──────┐ #> │ x   ┆ y1  ┆ z   ┆ y2   ┆ z2   │ #> │ --- ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64 ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞═════╪═════╪═════╪══════╪══════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 ┆ 1.0  ┆ 4.0  │ #> │ 2.0 ┆ 2.0 ┆ 2.0 ┆ 2.0  ┆ 5.0  │ #> │ 3.0 ┆ 3.0 ┆ 3.0 ┆ null ┆ null │ #> └─────┴─────┴─────┴──────┴──────┘  # we can specify the columns on which to join with join_by()... left_join(test, test2, by = join_by(x, y1 == y2)) #> shape: (3, 4) #> ┌─────┬─────┬─────┬──────┐ #> │ x   ┆ y1  ┆ z   ┆ z2   │ #> │ --- ┆ --- ┆ --- ┆ ---  │ #> │ f64 ┆ f64 ┆ f64 ┆ f64  │ #> ╞═════╪═════╪═════╪══════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 ┆ 4.0  │ #> │ 2.0 ┆ 2.0 ┆ 2.0 ┆ 5.0  │ #> │ 3.0 ┆ 3.0 ┆ 3.0 ┆ null │ #> └─────┴─────┴─────┴──────┘  # ... or with a character vector left_join(test, test2, by = c(\"x\", \"y1\" = \"y2\")) #> shape: (3, 4) #> ┌─────┬─────┬─────┬──────┐ #> │ x   ┆ y1  ┆ z   ┆ z2   │ #> │ --- ┆ --- ┆ --- ┆ ---  │ #> │ f64 ┆ f64 ┆ f64 ┆ f64  │ #> ╞═════╪═════╪═════╪══════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 ┆ 4.0  │ #> │ 2.0 ┆ 2.0 ┆ 2.0 ┆ 5.0  │ #> │ 3.0 ┆ 3.0 ┆ 3.0 ┆ null │ #> └─────┴─────┴─────┴──────┘  # we can customize the suffix of common column names not used to join test2 <- polars::pl$DataFrame(   x = c(1, 2, 4),   y1 = c(1, 2, 4),   z = c(4, 5, 7) )  left_join(test, test2, by = \"x\", suffix = c(\"_left\", \"_right\")) #> shape: (3, 5) #> ┌─────┬─────────┬────────┬──────────┬─────────┐ #> │ x   ┆ y1_left ┆ z_left ┆ y1_right ┆ z_right │ #> │ --- ┆ ---     ┆ ---    ┆ ---      ┆ ---     │ #> │ f64 ┆ f64     ┆ f64    ┆ f64      ┆ f64     │ #> ╞═════╪═════════╪════════╪══════════╪═════════╡ #> │ 1.0 ┆ 1.0     ┆ 1.0    ┆ 1.0      ┆ 4.0     │ #> │ 2.0 ┆ 2.0     ┆ 2.0    ┆ 2.0      ┆ 5.0     │ #> │ 3.0 ┆ 3.0     ┆ 3.0    ┆ null     ┆ null    │ #> └─────┴─────────┴────────┴──────────┴─────────┘  # the argument \"relationship\" ensures the join matches the expectation country <- polars::pl$DataFrame(   iso = c(\"FRA\", \"DEU\"),   value = 1:2 ) country #> shape: (2, 2) #> ┌─────┬───────┐ #> │ iso ┆ value │ #> │ --- ┆ ---   │ #> │ str ┆ i32   │ #> ╞═════╪═══════╡ #> │ FRA ┆ 1     │ #> │ DEU ┆ 2     │ #> └─────┴───────┘  country_year <- polars::pl$DataFrame(   iso = rep(c(\"FRA\", \"DEU\"), each = 2),   year = rep(2019:2020, 2),   value2 = 3:6 ) country_year #> shape: (4, 3) #> ┌─────┬──────┬────────┐ #> │ iso ┆ year ┆ value2 │ #> │ --- ┆ ---  ┆ ---    │ #> │ str ┆ i32  ┆ i32    │ #> ╞═════╪══════╪════════╡ #> │ FRA ┆ 2019 ┆ 3      │ #> │ FRA ┆ 2020 ┆ 4      │ #> │ DEU ┆ 2019 ┆ 5      │ #> │ DEU ┆ 2020 ┆ 6      │ #> └─────┴──────┴────────┘  # We expect that each row in \"x\" matches only one row in \"y\" but, it's not # true as each row of \"x\" matches two rows of \"y\" tryCatch(   left_join(country, country_year, join_by(iso), relationship = \"one-to-one\"),   error = function(e) e ) #> <error/rlang_error> #> Error in `x$join()`: #> ! Evaluation failed in `$join()`. #> Caused by error: #> ! Evaluation failed in `$collect()`. #> Caused by error: #> ! join keys did not fulfill 1:1 validation #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = TRUE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         ├─pkgdown:::unwrap_purrr_error(...) #>   6.         │ └─base::withCallingHandlers(...) #>   7.         └─purrr::map(...) #>   8.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   9.             ├─purrr:::with_indexed_errors(...) #>  10.             │ └─base::withCallingHandlers(...) #>  11.             ├─purrr:::call_with_cleanup(...) #>  12.             └─pkgdown (local) .f(.x[[i]], ...) #>  13.               ├─base::withCallingHandlers(...) #>  14.               └─pkgdown:::data_reference_topic(...) #>  15.                 └─pkgdown:::run_examples(...) #>  16.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  17.                     └─downlit::evaluate_and_highlight(...) #>  18.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  19.                         ├─base::withRestarts(...) #>  20.                         │ └─base (local) withRestartList(expr, restarts) #>  21.                         │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]]) #>  22.                         │   │ └─base (local) doWithOneRestart(return(expr), restart) #>  23.                         │   └─base (local) withRestartList(expr, restarts[-nr]) #>  24.                         │     └─base (local) withOneRestart(expr, restarts[[1L]]) #>  25.                         │       └─base (local) doWithOneRestart(return(expr), restart) #>  26.                         ├─evaluate:::with_handlers(...) #>  27.                         │ ├─base::eval(call) #>  28.                         │ │ └─base::eval(call) #>  29.                         │ └─base::withCallingHandlers(...) #>  30.                         ├─base::withVisible(eval(expr, envir)) #>  31.                         └─base::eval(expr, envir) #>  32.                           └─base::eval(expr, envir) #>  33.                             ├─base::tryCatch(...) #>  34.                             │ └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  35.                             │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  36.                             │     └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  37.                             ├─dplyr::left_join(country, country_year, join_by(iso), relationship = \"one-to-one\") #>  38.                             └─tidypolars:::left_join.polars_data_frame(...) #>  39.                               └─tidypolars:::join_(...) #>  40.                                 └─x$join(...) #>  41.                                   ├─polars:::wrap(...) #>  42.                                   │ └─rlang::try_fetch(...) #>  43.                                   │   ├─base::tryCatch(...) #>  44.                                   │   │ └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  45.                                   │   │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  46.                                   │   │     └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  47.                                   │   └─base::withCallingHandlers(...) #>  48.                                   └─self$lazy()$join(other = other$lazy(), left_on = left_on, right_on = right_on, ... #>  49.                                     ├─polars:::wrap(...) #>  50.                                     │ └─rlang::try_fetch(...) #>  51.                                     │   ├─base::tryCatch(...) #>  52.                                     │   │ └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  53.                                     │   │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  54.                                     │   │     └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  55.                                     │   └─base::withCallingHandlers(...) #>  56.                                     └─ldf$collect(engine) #>  57.                                       └─polars:::.savvy_wrap_PlRDataFrame(...)  # A correct expectation would be \"one-to-many\": left_join(country, country_year, join_by(iso), relationship = \"one-to-many\") #> shape: (4, 4) #> ┌─────┬───────┬──────┬────────┐ #> │ iso ┆ value ┆ year ┆ value2 │ #> │ --- ┆ ---   ┆ ---  ┆ ---    │ #> │ str ┆ i32   ┆ i32  ┆ i32    │ #> ╞═════╪═══════╪══════╪════════╡ #> │ FRA ┆ 1     ┆ 2019 ┆ 3      │ #> │ FRA ┆ 1     ┆ 2020 ┆ 4      │ #> │ DEU ┆ 2     ┆ 2019 ┆ 5      │ #> │ DEU ┆ 2     ┆ 2020 ┆ 6      │ #> └─────┴───────┴──────┴────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/partitioned_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions to export a LazyFrame as a partitioned output — partitioned_output","title":"Helper functions to export a LazyFrame as a partitioned output — partitioned_output","text":"details examples documentation sink_*() functions.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/partitioned_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions to export a LazyFrame as a partitioned output — partitioned_output","text":"","code":"partition_by_key(   base_path,   ...,   by,   include_key = TRUE,   per_partition_sort_by = NULL )  partition_by_max_size(base_path, ..., max_size, per_partition_sort_by = NULL)"},{"path":"https://tidypolars.etiennebacher.com/reference/partitioned_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions to export a LazyFrame as a partitioned output — partitioned_output","text":"base_path base path output files. Use mkdir option sink_* methods ensure directories path created. ... dots future extensions must empty. Something can coerced list Polars expressions. Used partition . include_key TRUE (default), include key columns output files. per_partition_sort_by Something can coerced list Polars expressions, NULL (default). Used  sort within partition. Note might increase memory consumption needed partition. max_size integer-ish value indicating maximum number rows generated files.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/pivot_longer.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot a Data/LazyFrame from wide to long — pivot_longer.polars_data_frame","title":"Pivot a Data/LazyFrame from wide to long — pivot_longer.polars_data_frame","text":"Pivot Data/LazyFrame wide long","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/pivot_longer.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot a Data/LazyFrame from wide to long — pivot_longer.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' pivot_longer(   data,   cols,   ...,   names_to = \"name\",   names_prefix = NULL,   values_to = \"value\" )  # S3 method for class 'polars_lazy_frame' pivot_longer(   data,   cols,   ...,   names_to = \"name\",   names_prefix = NULL,   values_to = \"value\" )"},{"path":"https://tidypolars.etiennebacher.com/reference/pivot_longer.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot a Data/LazyFrame from wide to long — pivot_longer.polars_data_frame","text":"data Polars Data/LazyFrame cols Columns pivot longer format. Can anything accepted dplyr::select(). ... Dots empty. names_to (quoted) name column contain column names specified cols. names_prefix regular expression used remove matching text start variable name. values_to string specifying name column create data stored cell values.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/pivot_longer.polars_data_frame.html","id":"unknown-arguments","dir":"Reference","previous_headings":"","what":"Unknown arguments","title":"Pivot a Data/LazyFrame from wide to long — pivot_longer.polars_data_frame","text":"Arguments supported original implementation tidyverse listed throw warning default specified. change behavior error instead, use options(tidypolars_unknown_args = \"error\").","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/pivot_longer.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot a Data/LazyFrame from wide to long — pivot_longer.polars_data_frame","text":"","code":"pl_relig_income <- as_polars_df(tidyr::relig_income) pl_relig_income #> shape: (18, 11) #> ┌────────────────────┬───────┬─────────┬─────────┬───┬──────────┬───────────┬───────┬──────────────┐ #> │ religion           ┆ <$10k ┆ $10-20k ┆ $20-30k ┆ … ┆ $75-100k ┆ $100-150k ┆ >150k ┆ Don't        │ #> │ ---                ┆ ---   ┆ ---     ┆ ---     ┆   ┆ ---      ┆ ---       ┆ ---   ┆ know/refused │ #> │ str                ┆ f64   ┆ f64     ┆ f64     ┆   ┆ f64      ┆ f64       ┆ f64   ┆ ---          │ #> │                    ┆       ┆         ┆         ┆   ┆          ┆           ┆       ┆ f64          │ #> ╞════════════════════╪═══════╪═════════╪═════════╪═══╪══════════╪═══════════╪═══════╪══════════════╡ #> │ Agnostic           ┆ 27.0  ┆ 34.0    ┆ 60.0    ┆ … ┆ 122.0    ┆ 109.0     ┆ 84.0  ┆ 96.0         │ #> │ Atheist            ┆ 12.0  ┆ 27.0    ┆ 37.0    ┆ … ┆ 73.0     ┆ 59.0      ┆ 74.0  ┆ 76.0         │ #> │ Buddhist           ┆ 27.0  ┆ 21.0    ┆ 30.0    ┆ … ┆ 62.0     ┆ 39.0      ┆ 53.0  ┆ 54.0         │ #> │ Catholic           ┆ 418.0 ┆ 617.0   ┆ 732.0   ┆ … ┆ 949.0    ┆ 792.0     ┆ 633.0 ┆ 1489.0       │ #> │ Don’t know/refused ┆ 15.0  ┆ 14.0    ┆ 15.0    ┆ … ┆ 21.0     ┆ 17.0      ┆ 18.0  ┆ 116.0        │ #> │ …                  ┆ …     ┆ …       ┆ …       ┆ … ┆ …        ┆ …         ┆ …     ┆ …            │ #> │ Orthodox           ┆ 13.0  ┆ 17.0    ┆ 23.0    ┆ … ┆ 38.0     ┆ 42.0      ┆ 46.0  ┆ 73.0         │ #> │ Other Christian    ┆ 9.0   ┆ 7.0     ┆ 11.0    ┆ … ┆ 18.0     ┆ 14.0      ┆ 12.0  ┆ 18.0         │ #> │ Other Faiths       ┆ 20.0  ┆ 33.0    ┆ 40.0    ┆ … ┆ 46.0     ┆ 40.0      ┆ 41.0  ┆ 71.0         │ #> │ Other World        ┆ 5.0   ┆ 2.0     ┆ 3.0     ┆ … ┆ 3.0      ┆ 4.0       ┆ 4.0   ┆ 8.0          │ #> │ Religions          ┆       ┆         ┆         ┆   ┆          ┆           ┆       ┆              │ #> │ Unaffiliated       ┆ 217.0 ┆ 299.0   ┆ 374.0   ┆ … ┆ 407.0    ┆ 321.0     ┆ 258.0 ┆ 597.0        │ #> └────────────────────┴───────┴─────────┴─────────┴───┴──────────┴───────────┴───────┴──────────────┘  pl_relig_income |>   pivot_longer(!religion, names_to = \"income\", values_to = \"count\") #> shape: (180, 3) #> ┌──────────────┬────────────────────┬───────┐ #> │ religion     ┆ income             ┆ count │ #> │ ---          ┆ ---                ┆ ---   │ #> │ str          ┆ str                ┆ f64   │ #> ╞══════════════╪════════════════════╪═══════╡ #> │ Agnostic     ┆ <$10k              ┆ 27.0  │ #> │ Agnostic     ┆ $10-20k            ┆ 34.0  │ #> │ Agnostic     ┆ $20-30k            ┆ 60.0  │ #> │ Agnostic     ┆ $30-40k            ┆ 81.0  │ #> │ Agnostic     ┆ $40-50k            ┆ 76.0  │ #> │ …            ┆ …                  ┆ …     │ #> │ Unaffiliated ┆ $50-75k            ┆ 528.0 │ #> │ Unaffiliated ┆ $75-100k           ┆ 407.0 │ #> │ Unaffiliated ┆ $100-150k          ┆ 321.0 │ #> │ Unaffiliated ┆ >150k              ┆ 258.0 │ #> │ Unaffiliated ┆ Don't know/refused ┆ 597.0 │ #> └──────────────┴────────────────────┴───────┘  pl_billboard <- as_polars_df(tidyr::billboard) pl_billboard #> shape: (317, 79) #> ┌──────────────────┬─────────────────────────┬──────────────┬──────┬───┬──────┬──────┬──────┬──────┐ #> │ artist           ┆ track                   ┆ date.entered ┆ wk1  ┆ … ┆ wk73 ┆ wk74 ┆ wk75 ┆ wk76 │ #> │ ---              ┆ ---                     ┆ ---          ┆ ---  ┆   ┆ ---  ┆ ---  ┆ ---  ┆ ---  │ #> │ str              ┆ str                     ┆ date         ┆ f64  ┆   ┆ bool ┆ bool ┆ bool ┆ bool │ #> ╞══════════════════╪═════════════════════════╪══════════════╪══════╪═══╪══════╪══════╪══════╪══════╡ #> │ 2 Pac            ┆ Baby Don't Cry (Keep... ┆ 2000-02-26   ┆ 87.0 ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 2Ge+her          ┆ The Hardest Part Of ... ┆ 2000-09-02   ┆ 91.0 ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 3 Doors Down     ┆ Kryptonite              ┆ 2000-04-08   ┆ 81.0 ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 3 Doors Down     ┆ Loser                   ┆ 2000-10-21   ┆ 76.0 ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 504 Boyz         ┆ Wobble Wobble           ┆ 2000-04-15   ┆ 57.0 ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ …                ┆ …                       ┆ …            ┆ …    ┆ … ┆ …    ┆ …    ┆ …    ┆ …    │ #> │ Yankee Grey      ┆ Another Nine Minutes    ┆ 2000-04-29   ┆ 86.0 ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ Yearwood, Trisha ┆ Real Live Woman         ┆ 2000-04-01   ┆ 85.0 ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ Ying Yang Twins  ┆ Whistle While You Tw... ┆ 2000-03-18   ┆ 95.0 ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ Zombie Nation    ┆ Kernkraft 400           ┆ 2000-09-02   ┆ 99.0 ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ matchbox twenty  ┆ Bent                    ┆ 2000-04-29   ┆ 60.0 ┆ … ┆ null ┆ null ┆ null ┆ null │ #> └──────────────────┴─────────────────────────┴──────────────┴──────┴───┴──────┴──────┴──────┴──────┘  pl_billboard |>   pivot_longer(     cols = starts_with(\"wk\"),     names_to = \"week\",     names_prefix = \"wk\",     values_to = \"rank\",   ) #> shape: (24_092, 5) #> ┌─────────────────┬─────────────────────────┬──────────────┬──────┬──────┐ #> │ artist          ┆ track                   ┆ date.entered ┆ week ┆ rank │ #> │ ---             ┆ ---                     ┆ ---          ┆ ---  ┆ ---  │ #> │ str             ┆ str                     ┆ date         ┆ str  ┆ f64  │ #> ╞═════════════════╪═════════════════════════╪══════════════╪══════╪══════╡ #> │ 2 Pac           ┆ Baby Don't Cry (Keep... ┆ 2000-02-26   ┆ 2    ┆ 82.0 │ #> │ 2 Pac           ┆ Baby Don't Cry (Keep... ┆ 2000-02-26   ┆ 76   ┆ null │ #> │ 2 Pac           ┆ Baby Don't Cry (Keep... ┆ 2000-02-26   ┆ 75   ┆ null │ #> │ 2 Pac           ┆ Baby Don't Cry (Keep... ┆ 2000-02-26   ┆ 74   ┆ null │ #> │ 2 Pac           ┆ Baby Don't Cry (Keep... ┆ 2000-02-26   ┆ 73   ┆ null │ #> │ …               ┆ …                       ┆ …            ┆ …    ┆ …    │ #> │ matchbox twenty ┆ Bent                    ┆ 2000-04-29   ┆ 32   ┆ 28.0 │ #> │ matchbox twenty ┆ Bent                    ┆ 2000-04-29   ┆ 56   ┆ null │ #> │ matchbox twenty ┆ Bent                    ┆ 2000-04-29   ┆ 17   ┆ 2.0  │ #> │ matchbox twenty ┆ Bent                    ┆ 2000-04-29   ┆ 3    ┆ 29.0 │ #> │ matchbox twenty ┆ Bent                    ┆ 2000-04-29   ┆ 76   ┆ null │ #> └─────────────────┴─────────────────────────┴──────────────┴──────┴──────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/pivot_wider.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot a DataFrame from long to wide — pivot_wider.polars_data_frame","title":"Pivot a DataFrame from long to wide — pivot_wider.polars_data_frame","text":"Pivot DataFrame long wide","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/pivot_wider.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot a DataFrame from long to wide — pivot_wider.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' pivot_wider(   data,   ...,   id_cols = NULL,   names_from = name,   values_from = value,   names_prefix = \"\",   names_sep = \"_\",   names_glue = NULL,   values_fill = NULL )"},{"path":"https://tidypolars.etiennebacher.com/reference/pivot_wider.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot a DataFrame from long to wide — pivot_wider.polars_data_frame","text":"data Polars DataFrame (LazyFrames supported). ... Dots empty. id_cols set columns uniquely identify observation. Typically used redundant variables, .e. variables whose values perfectly correlated existing variables. Defaults columns data except columns specified names_from values_from. tidyselect expression supplied, evaluated data removing columns specified names_from values_from. names_from (quoted unquoted) column names whose values used names new columns. values_from (quoted unquoted) column names whose values used fill new columns. names_prefix String added start every variable name. particularly useful names_from numeric vector want create syntactic variable names. names_sep names_from values_from contains multiple variables, used join values together single string use column name. names_glue Instead names_sep names_prefix, can supply glue specification uses names_from columns create custom column names. values_fill scalar used replace missing values new columns. Note type value applied new columns. example, provide character value fill numeric columns, columns converted character.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/pivot_wider.polars_data_frame.html","id":"unknown-arguments","dir":"Reference","previous_headings":"","what":"Unknown arguments","title":"Pivot a DataFrame from long to wide — pivot_wider.polars_data_frame","text":"Arguments supported original implementation tidyverse listed throw warning default specified. change behavior error instead, use options(tidypolars_unknown_args = \"error\").","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/pivot_wider.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot a DataFrame from long to wide — pivot_wider.polars_data_frame","text":"","code":"pl_fish_encounters <- as_polars_df(tidyr::fish_encounters)  pl_fish_encounters |>   pivot_wider(names_from = station, values_from = seen) #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> shape: (19, 12) #> ┌──────┬─────────┬───────┬────────┬───┬──────┬──────┬──────┬──────┐ #> │ fish ┆ Release ┆ I80_1 ┆ Lisbon ┆ … ┆ BCE2 ┆ BCW2 ┆ MAE  ┆ MAW  │ #> │ ---  ┆ ---     ┆ ---   ┆ ---    ┆   ┆ ---  ┆ ---  ┆ ---  ┆ ---  │ #> │ cat  ┆ i32     ┆ i32   ┆ i32    ┆   ┆ i32  ┆ i32  ┆ i32  ┆ i32  │ #> ╞══════╪═════════╪═══════╪════════╪═══╪══════╪══════╪══════╪══════╡ #> │ 4842 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1    ┆ 1    │ #> │ 4843 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1    ┆ 1    │ #> │ 4844 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1    ┆ 1    │ #> │ 4845 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 4847 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ …    ┆ …       ┆ …     ┆ …      ┆ … ┆ …    ┆ …    ┆ …    ┆ …    │ #> │ 4861 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1    ┆ 1    │ #> │ 4862 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ null ┆ null │ #> │ 4863 ┆ 1       ┆ 1     ┆ null   ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 4864 ┆ 1       ┆ 1     ┆ null   ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 4865 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ null ┆ null ┆ null ┆ null │ #> └──────┴─────────┴───────┴────────┴───┴──────┴──────┴──────┴──────┘  pl_fish_encounters |>   pivot_wider(names_from = station, values_from = seen, values_fill = 0) #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> shape: (19, 12) #> ┌──────┬─────────┬───────┬────────┬───┬──────┬──────┬─────┬─────┐ #> │ fish ┆ Release ┆ I80_1 ┆ Lisbon ┆ … ┆ BCE2 ┆ BCW2 ┆ MAE ┆ MAW │ #> │ ---  ┆ ---     ┆ ---   ┆ ---    ┆   ┆ ---  ┆ ---  ┆ --- ┆ --- │ #> │ cat  ┆ f64     ┆ f64   ┆ f64    ┆   ┆ f64  ┆ f64  ┆ f64 ┆ f64 │ #> ╞══════╪═════════╪═══════╪════════╪═══╪══════╪══════╪═════╪═════╡ #> │ 4842 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 1.0 ┆ 1.0 │ #> │ 4843 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 1.0 ┆ 1.0 │ #> │ 4844 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 1.0 ┆ 1.0 │ #> │ 4845 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> │ 4847 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> │ …    ┆ …       ┆ …     ┆ …      ┆ … ┆ …    ┆ …    ┆ …   ┆ …   │ #> │ 4861 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 1.0 ┆ 1.0 │ #> │ 4862 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 0.0 ┆ 0.0 │ #> │ 4863 ┆ 1.0     ┆ 1.0   ┆ 0.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> │ 4864 ┆ 1.0     ┆ 1.0   ┆ 0.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> │ 4865 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> └──────┴─────────┴───────┴────────┴───┴──────┴──────┴─────┴─────┘  # be careful about the type of the replacement value! pl_fish_encounters |>   pivot_wider(names_from = station, values_from = seen, values_fill = \"a\") #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> shape: (19, 12) #> ┌──────┬─────────┬───────┬────────┬───┬──────┬──────┬─────┬─────┐ #> │ fish ┆ Release ┆ I80_1 ┆ Lisbon ┆ … ┆ BCE2 ┆ BCW2 ┆ MAE ┆ MAW │ #> │ ---  ┆ ---     ┆ ---   ┆ ---    ┆   ┆ ---  ┆ ---  ┆ --- ┆ --- │ #> │ cat  ┆ str     ┆ str   ┆ str    ┆   ┆ str  ┆ str  ┆ str ┆ str │ #> ╞══════╪═════════╪═══════╪════════╪═══╪══════╪══════╪═════╪═════╡ #> │ 4842 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1   ┆ 1   │ #> │ 4843 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1   ┆ 1   │ #> │ 4844 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1   ┆ 1   │ #> │ 4845 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> │ 4847 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> │ …    ┆ …       ┆ …     ┆ …      ┆ … ┆ …    ┆ …    ┆ …   ┆ …   │ #> │ 4861 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1   ┆ 1   │ #> │ 4862 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ a   ┆ a   │ #> │ 4863 ┆ 1       ┆ 1     ┆ a      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> │ 4864 ┆ 1       ┆ 1     ┆ a      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> │ 4865 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> └──────┴─────────┴───────┴────────┴───┴──────┴──────┴─────┴─────┘  # using \"names_glue\" to specify the names of new columns production <- expand.grid(   product = c(\"A\", \"B\"),   country = c(\"AI\", \"EI\"),   year = 2000:2014 ) |>   filter((product == \"A\" & country == \"AI\") | product == \"B\") |>   mutate(production = 1:45) |>   as_polars_df()  production #> shape: (45, 4) #> ┌─────────┬─────────┬──────┬────────────┐ #> │ product ┆ country ┆ year ┆ production │ #> │ ---     ┆ ---     ┆ ---  ┆ ---        │ #> │ cat     ┆ cat     ┆ i32  ┆ i32        │ #> ╞═════════╪═════════╪══════╪════════════╡ #> │ A       ┆ AI      ┆ 2000 ┆ 1          │ #> │ B       ┆ AI      ┆ 2000 ┆ 2          │ #> │ B       ┆ EI      ┆ 2000 ┆ 3          │ #> │ A       ┆ AI      ┆ 2001 ┆ 4          │ #> │ B       ┆ AI      ┆ 2001 ┆ 5          │ #> │ …       ┆ …       ┆ …    ┆ …          │ #> │ B       ┆ AI      ┆ 2013 ┆ 41         │ #> │ B       ┆ EI      ┆ 2013 ┆ 42         │ #> │ A       ┆ AI      ┆ 2014 ┆ 43         │ #> │ B       ┆ AI      ┆ 2014 ┆ 44         │ #> │ B       ┆ EI      ┆ 2014 ┆ 45         │ #> └─────────┴─────────┴──────┴────────────┘  production |>   pivot_wider(     names_from = c(product, country),     values_from = production,     names_glue = \"prod_{product}_{country}\"   ) #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> shape: (15, 4) #> ┌──────┬───────────┬───────────┬───────────┐ #> │ year ┆ prod_A_AI ┆ prod_B_AI ┆ prod_B_EI │ #> │ ---  ┆ ---       ┆ ---       ┆ ---       │ #> │ i32  ┆ i32       ┆ i32       ┆ i32       │ #> ╞══════╪═══════════╪═══════════╪═══════════╡ #> │ 2000 ┆ 1         ┆ 2         ┆ 3         │ #> │ 2001 ┆ 4         ┆ 5         ┆ 6         │ #> │ 2002 ┆ 7         ┆ 8         ┆ 9         │ #> │ 2003 ┆ 10        ┆ 11        ┆ 12        │ #> │ 2004 ┆ 13        ┆ 14        ┆ 15        │ #> │ …    ┆ …         ┆ …         ┆ …         │ #> │ 2010 ┆ 31        ┆ 32        ┆ 33        │ #> │ 2011 ┆ 34        ┆ 35        ┆ 36        │ #> │ 2012 ┆ 37        ┆ 38        ┆ 39        │ #> │ 2013 ┆ 40        ┆ 41        ┆ 42        │ #> │ 2014 ┆ 43        ┆ 44        ┆ 45        │ #> └──────┴───────────┴───────────┴───────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/pull.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a variable of a Data/LazyFrame — pull.polars_data_frame","title":"Extract a variable of a Data/LazyFrame — pull.polars_data_frame","text":"returns R vector Polars Series.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/pull.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a variable of a Data/LazyFrame — pull.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' pull(.data, var, ...)  # S3 method for class 'polars_lazy_frame' pull(.data, var, ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/pull.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a variable of a Data/LazyFrame — pull.polars_data_frame","text":".data Polars Data/LazyFrame var quoted unquoted variable name, variable index. ... Dots empty.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/pull.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a variable of a Data/LazyFrame — pull.polars_data_frame","text":"","code":"pl_test <- as_polars_df(iris) pull(pl_test, Sepal.Length) #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 #>  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 #>  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 #>  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 #>  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 #>  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 #> [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 #> [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 #> [145] 6.7 6.7 6.3 6.5 6.2 5.9 pull(pl_test, \"Sepal.Length\") #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 #>  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 #>  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 #>  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 #>  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 #>  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 #> [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 #> [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 #> [145] 6.7 6.7 6.3 6.5 6.2 5.9"},{"path":"https://tidypolars.etiennebacher.com/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. polars as_polars_df, as_polars_lf, is_polars_df, is_polars_expr, is_polars_lf","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/relocate.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Change column order — relocate.polars_data_frame","title":"Change column order — relocate.polars_data_frame","text":"Use relocate() change column positions, using syntax select() make easy move blocks columns .","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/relocate.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change column order — relocate.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' relocate(.data, ..., .before = NULL, .after = NULL)  # S3 method for class 'polars_lazy_frame' relocate(.data, ..., .before = NULL, .after = NULL)"},{"path":"https://tidypolars.etiennebacher.com/reference/relocate.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change column order — relocate.polars_data_frame","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. ., .Column name (either quoted unquoted) indicates destination columns selected .... Supplying neither move columns left-hand side; specifying error.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/relocate.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change column order — relocate.polars_data_frame","text":"","code":"dat <- as_polars_df(mtcars)  dat |>   relocate(hp, vs, .before = cyl) #> shape: (32, 11) #> ┌──────┬───────┬─────┬─────┬───┬───────┬─────┬──────┬──────┐ #> │ mpg  ┆ hp    ┆ vs  ┆ cyl ┆ … ┆ qsec  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ ---   ┆ --- ┆ --- ┆   ┆ ---   ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64   ┆ f64 ┆ f64 ┆   ┆ f64   ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═══════╪═════╪═════╪═══╪═══════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 110.0 ┆ 0.0 ┆ 6.0 ┆ … ┆ 16.46 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 110.0 ┆ 0.0 ┆ 6.0 ┆ … ┆ 17.02 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 93.0  ┆ 1.0 ┆ 4.0 ┆ … ┆ 18.61 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 110.0 ┆ 1.0 ┆ 6.0 ┆ … ┆ 19.44 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 18.7 ┆ 175.0 ┆ 0.0 ┆ 8.0 ┆ … ┆ 17.02 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ …    ┆ …     ┆ …   ┆ …   ┆ … ┆ …     ┆ …   ┆ …    ┆ …    │ #> │ 30.4 ┆ 113.0 ┆ 1.0 ┆ 4.0 ┆ … ┆ 16.9  ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 15.8 ┆ 264.0 ┆ 0.0 ┆ 8.0 ┆ … ┆ 14.5  ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 175.0 ┆ 0.0 ┆ 6.0 ┆ … ┆ 15.5  ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 335.0 ┆ 0.0 ┆ 8.0 ┆ … ┆ 14.6  ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 109.0 ┆ 1.0 ┆ 4.0 ┆ … ┆ 18.6  ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴───────┴─────┴─────┴───┴───────┴─────┴──────┴──────┘  # if .before and .after are not specified, selected columns are moved to the # first positions dat |>   relocate(hp, vs) #> shape: (32, 11) #> ┌───────┬─────┬──────┬─────┬───┬───────┬─────┬──────┬──────┐ #> │ hp    ┆ vs  ┆ mpg  ┆ cyl ┆ … ┆ qsec  ┆ am  ┆ gear ┆ carb │ #> │ ---   ┆ --- ┆ ---  ┆ --- ┆   ┆ ---   ┆ --- ┆ ---  ┆ ---  │ #> │ f64   ┆ f64 ┆ f64  ┆ f64 ┆   ┆ f64   ┆ f64 ┆ f64  ┆ f64  │ #> ╞═══════╪═════╪══════╪═════╪═══╪═══════╪═════╪══════╪══════╡ #> │ 110.0 ┆ 0.0 ┆ 21.0 ┆ 6.0 ┆ … ┆ 16.46 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 110.0 ┆ 0.0 ┆ 21.0 ┆ 6.0 ┆ … ┆ 17.02 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 93.0  ┆ 1.0 ┆ 22.8 ┆ 4.0 ┆ … ┆ 18.61 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 110.0 ┆ 1.0 ┆ 21.4 ┆ 6.0 ┆ … ┆ 19.44 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 175.0 ┆ 0.0 ┆ 18.7 ┆ 8.0 ┆ … ┆ 17.02 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ …     ┆ …   ┆ …    ┆ …   ┆ … ┆ …     ┆ …   ┆ …    ┆ …    │ #> │ 113.0 ┆ 1.0 ┆ 30.4 ┆ 4.0 ┆ … ┆ 16.9  ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 264.0 ┆ 0.0 ┆ 15.8 ┆ 8.0 ┆ … ┆ 14.5  ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 175.0 ┆ 0.0 ┆ 19.7 ┆ 6.0 ┆ … ┆ 15.5  ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 335.0 ┆ 0.0 ┆ 15.0 ┆ 8.0 ┆ … ┆ 14.6  ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 109.0 ┆ 1.0 ┆ 21.4 ┆ 4.0 ┆ … ┆ 18.6  ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └───────┴─────┴──────┴─────┴───┴───────┴─────┴──────┴──────┘  # .before and .after can be quoted or unquoted dat |>   relocate(hp, vs, .after = \"gear\") #> shape: (32, 11) #> ┌──────┬─────┬───────┬──────┬───┬──────┬───────┬─────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ drat ┆ … ┆ gear ┆ hp    ┆ vs  ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---  ┆   ┆ ---  ┆ ---   ┆ --- ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64  ┆   ┆ f64  ┆ f64   ┆ f64 ┆ f64  │ #> ╞══════╪═════╪═══════╪══════╪═══╪══════╪═══════╪═════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 3.9  ┆ … ┆ 4.0  ┆ 110.0 ┆ 0.0 ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 3.9  ┆ … ┆ 4.0  ┆ 110.0 ┆ 0.0 ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 3.85 ┆ … ┆ 4.0  ┆ 93.0  ┆ 1.0 ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 3.08 ┆ … ┆ 3.0  ┆ 110.0 ┆ 1.0 ┆ 1.0  │ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 3.15 ┆ … ┆ 3.0  ┆ 175.0 ┆ 0.0 ┆ 2.0  │ #> │ …    ┆ …   ┆ …     ┆ …    ┆ … ┆ …    ┆ …     ┆ …   ┆ …    │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 3.77 ┆ … ┆ 5.0  ┆ 113.0 ┆ 1.0 ┆ 2.0  │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 4.22 ┆ … ┆ 5.0  ┆ 264.0 ┆ 0.0 ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 3.62 ┆ … ┆ 5.0  ┆ 175.0 ┆ 0.0 ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 3.54 ┆ … ┆ 5.0  ┆ 335.0 ┆ 0.0 ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 4.11 ┆ … ┆ 4.0  ┆ 109.0 ┆ 1.0 ┆ 2.0  │ #> └──────┴─────┴───────┴──────┴───┴──────┴───────┴─────┴──────┘  # select helpers are also available dat |>   relocate(contains(\"[aeiou]\")) #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘  dat |>   relocate(hp, vs, .after = last_col()) #> shape: (32, 11) #> ┌──────┬─────┬───────┬──────┬───┬──────┬──────┬───────┬─────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ drat ┆ … ┆ gear ┆ carb ┆ hp    ┆ vs  │ #> │ ---  ┆ --- ┆ ---   ┆ ---  ┆   ┆ ---  ┆ ---  ┆ ---   ┆ --- │ #> │ f64  ┆ f64 ┆ f64   ┆ f64  ┆   ┆ f64  ┆ f64  ┆ f64   ┆ f64 │ #> ╞══════╪═════╪═══════╪══════╪═══╪══════╪══════╪═══════╪═════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 3.9  ┆ … ┆ 4.0  ┆ 4.0  ┆ 110.0 ┆ 0.0 │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 3.9  ┆ … ┆ 4.0  ┆ 4.0  ┆ 110.0 ┆ 0.0 │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 3.85 ┆ … ┆ 4.0  ┆ 1.0  ┆ 93.0  ┆ 1.0 │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 3.08 ┆ … ┆ 3.0  ┆ 1.0  ┆ 110.0 ┆ 1.0 │ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 3.15 ┆ … ┆ 3.0  ┆ 2.0  ┆ 175.0 ┆ 0.0 │ #> │ …    ┆ …   ┆ …     ┆ …    ┆ … ┆ …    ┆ …    ┆ …     ┆ …   │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 3.77 ┆ … ┆ 5.0  ┆ 2.0  ┆ 113.0 ┆ 1.0 │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 4.22 ┆ … ┆ 5.0  ┆ 4.0  ┆ 264.0 ┆ 0.0 │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 3.62 ┆ … ┆ 5.0  ┆ 6.0  ┆ 175.0 ┆ 0.0 │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 3.54 ┆ … ┆ 5.0  ┆ 8.0  ┆ 335.0 ┆ 0.0 │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 4.11 ┆ … ┆ 4.0  ┆ 2.0  ┆ 109.0 ┆ 1.0 │ #> └──────┴─────┴───────┴──────┴───┴──────┴──────┴───────┴─────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/rename.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns — rename.polars_data_frame","title":"Rename columns — rename.polars_data_frame","text":"Rename columns","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/rename.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns — rename.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' rename(.data, ...)  # S3 method for class 'polars_lazy_frame' rename(.data, ...)  # S3 method for class 'polars_data_frame' rename_with(.data, .fn, .cols = tidyselect::everything(), ...)  # S3 method for class 'polars_lazy_frame' rename_with(.data, .fn, .cols = tidyselect::everything(), ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/rename.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns — rename.polars_data_frame","text":".data Polars Data/LazyFrame ... rename(), use new_name = old_name rename selected variables. also possible use quotation marks, e.g \"new_name\" = \"old_name\". rename_with, additional arguments passed fn. .fn Function apply column names .cols Columns apply fn. Can anything accepted dplyr::select().","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/rename.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns — rename.polars_data_frame","text":"","code":"pl_test <- polars::as_polars_df(mtcars)  rename(pl_test, miles_per_gallon = mpg, horsepower = \"hp\") #> shape: (32, 11) #> ┌──────────────────┬─────┬───────┬────────────┬───┬─────┬─────┬──────┬──────┐ #> │ miles_per_gallon ┆ cyl ┆ disp  ┆ horsepower ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---              ┆ --- ┆ ---   ┆ ---        ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64              ┆ f64 ┆ f64   ┆ f64        ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════════════════╪═════╪═══════╪════════════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8             ┆ 4.0 ┆ 108.0 ┆ 93.0       ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4             ┆ 6.0 ┆ 258.0 ┆ 110.0      ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 18.7             ┆ 8.0 ┆ 360.0 ┆ 175.0      ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ …                ┆ …   ┆ …     ┆ …          ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 30.4             ┆ 4.0 ┆ 95.1  ┆ 113.0      ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 15.8             ┆ 8.0 ┆ 351.0 ┆ 264.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7             ┆ 6.0 ┆ 145.0 ┆ 175.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0             ┆ 8.0 ┆ 301.0 ┆ 335.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4             ┆ 4.0 ┆ 121.0 ┆ 109.0      ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────────────────┴─────┴───────┴────────────┴───┴─────┴─────┴──────┴──────┘  rename(pl_test, `Miles per gallon` = \"mpg\", `Horse power` = \"hp\") #> shape: (32, 11) #> ┌──────────────────┬─────┬───────┬─────────────┬───┬─────┬─────┬──────┬──────┐ #> │ Miles per gallon ┆ cyl ┆ disp  ┆ Horse power ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---              ┆ --- ┆ ---   ┆ ---         ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64              ┆ f64 ┆ f64   ┆ f64         ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════════════════╪═════╪═══════╪═════════════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8             ┆ 4.0 ┆ 108.0 ┆ 93.0        ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4             ┆ 6.0 ┆ 258.0 ┆ 110.0       ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 18.7             ┆ 8.0 ┆ 360.0 ┆ 175.0       ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ …                ┆ …   ┆ …     ┆ …           ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 30.4             ┆ 4.0 ┆ 95.1  ┆ 113.0       ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 15.8             ┆ 8.0 ┆ 351.0 ┆ 264.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7             ┆ 6.0 ┆ 145.0 ┆ 175.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0             ┆ 8.0 ┆ 301.0 ┆ 335.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4             ┆ 4.0 ┆ 121.0 ┆ 109.0       ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────────────────┴─────┴───────┴─────────────┴───┴─────┴─────┴──────┴──────┘  rename_with(pl_test, toupper, .cols = contains(\"p\")) #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ MPG  ┆ cyl ┆ DISP  ┆ HP    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 30.4 ┆ 4.0 ┆ 95.1  ┆ 113.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 5.0  ┆ 2.0  │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘  pl_test_2 <- polars::as_polars_df(iris)  rename_with(pl_test_2, function(x) tolower(gsub(\".\", \"_\", x, fixed = TRUE))) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ sepal_length ┆ sepal_width ┆ petal_length ┆ petal_width ┆ species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  rename_with(pl_test_2, \\(x) tolower(gsub(\".\", \"_\", x, fixed = TRUE))) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ sepal_length ┆ sepal_width ┆ petal_length ┆ petal_width ┆ species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.7          ┆ 3.0         ┆ 5.2          ┆ 2.3         ┆ virginica │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/replace_na.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NAs with specified values — replace_na.polars_data_frame","title":"Replace NAs with specified values — replace_na.polars_data_frame","text":"Replace NAs specified values","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/replace_na.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NAs with specified values — replace_na.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' replace_na(data, replace, ...)  # S3 method for class 'polars_lazy_frame' replace_na(data, replace, ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/replace_na.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace NAs with specified values — replace_na.polars_data_frame","text":"data Polars Data/LazyFrame replace Either scalar used replace NA columns, named list column name value used replace NA . ... Dots empty.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/replace_na.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace NAs with specified values — replace_na.polars_data_frame","text":"","code":"pl_test <- polars::pl$DataFrame(x = c(NA, 1), y = c(2, NA))  # replace all NA with 0 replace_na(pl_test, 0) #> shape: (2, 2) #> ┌─────┬─────┐ #> │ x   ┆ y   │ #> │ --- ┆ --- │ #> │ f64 ┆ f64 │ #> ╞═════╪═════╡ #> │ 0.0 ┆ 2.0 │ #> │ 1.0 ┆ 0.0 │ #> └─────┴─────┘  # custom replacement per column replace_na(pl_test, list(x = 0, y = 999)) #> shape: (2, 2) #> ┌─────┬───────┐ #> │ x   ┆ y     │ #> │ --- ┆ ---   │ #> │ f64 ┆ f64   │ #> ╞═════╪═══════╡ #> │ 0.0 ┆ 2.0   │ #> │ 1.0 ┆ 999.0 │ #> └─────┴───────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/rowwise.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Group input by rows — rowwise.polars_data_frame","title":"Group input by rows — rowwise.polars_data_frame","text":"[EXPERIMENTAL] rowwise() allows compute Data/LazyFrame row---time. useful vectorised function exist. rowwise() produces another type grouped data, therefore can removed ungroup().","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/rowwise.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group input by rows — rowwise.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' rowwise(data, ...)  # S3 method for class 'polars_lazy_frame' rowwise(data, ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/rowwise.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group input by rows — rowwise.polars_data_frame","text":"data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/rowwise.polars_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group input by rows — rowwise.polars_data_frame","text":"Polars Data/LazyFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/rowwise.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group input by rows — rowwise.polars_data_frame","text":"","code":"df <- polars::pl$DataFrame(x = c(1, 3, 4), y = c(2, 1, 5), z = c(2, 3, 1))  # Compute the mean of x, y, z in each row df |>  rowwise() |>  mutate(m = mean(c(x, y, z))) #> shape: (3, 4) #> ┌─────┬─────┬─────┬──────────┐ #> │ x   ┆ y   ┆ z   ┆ m        │ #> │ --- ┆ --- ┆ --- ┆ ---      │ #> │ f64 ┆ f64 ┆ f64 ┆ f64      │ #> ╞═════╪═════╪═════╪══════════╡ #> │ 1.0 ┆ 2.0 ┆ 2.0 ┆ 1.666667 │ #> │ 3.0 ┆ 1.0 ┆ 3.0 ┆ 2.333333 │ #> │ 4.0 ┆ 5.0 ┆ 1.0 ┆ 3.333333 │ #> └─────┴─────┴─────┴──────────┘ #>  #> Rowwise: TRUE  # Compute the min and max of x and y in each row df |>  rowwise() |>  mutate(min = min(c(x, y)), max = max(c(x, y))) #> shape: (3, 5) #> ┌─────┬─────┬─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   ┆ min ┆ max │ #> │ --- ┆ --- ┆ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╪═════╪═════╡ #> │ 1.0 ┆ 2.0 ┆ 2.0 ┆ 1.0 ┆ 2.0 │ #> │ 3.0 ┆ 1.0 ┆ 3.0 ┆ 1.0 ┆ 3.0 │ #> │ 4.0 ┆ 5.0 ┆ 1.0 ┆ 4.0 ┆ 5.0 │ #> └─────┴─────┴─────┴─────┴─────┘ #>  #> Rowwise: TRUE"},{"path":"https://tidypolars.etiennebacher.com/reference/select.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Select columns from a Data/LazyFrame — select.polars_data_frame","title":"Select columns from a Data/LazyFrame — select.polars_data_frame","text":"Select columns Data/LazyFrame","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/select.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select columns from a Data/LazyFrame — select.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' select(.data, ...)  # S3 method for class 'polars_lazy_frame' select(.data, ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/select.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select columns from a Data/LazyFrame — select.polars_data_frame","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. Renaming also possible.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/select.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select columns from a Data/LazyFrame — select.polars_data_frame","text":"","code":"pl_iris <- polars::as_polars_df(iris)  select(pl_iris, c(\"Sepal.Length\", \"Sepal.Width\")) #> shape: (150, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 4.9          ┆ 3.0         │ #> │ 4.7          ┆ 3.2         │ #> │ 4.6          ┆ 3.1         │ #> │ 5.0          ┆ 3.6         │ #> │ …            ┆ …           │ #> │ 6.7          ┆ 3.0         │ #> │ 6.3          ┆ 2.5         │ #> │ 6.5          ┆ 3.0         │ #> │ 6.2          ┆ 3.4         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘ select(pl_iris, Sepal.Length, Sepal.Width) #> shape: (150, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 4.9          ┆ 3.0         │ #> │ 4.7          ┆ 3.2         │ #> │ 4.6          ┆ 3.1         │ #> │ 5.0          ┆ 3.6         │ #> │ …            ┆ …           │ #> │ 6.7          ┆ 3.0         │ #> │ 6.3          ┆ 2.5         │ #> │ 6.5          ┆ 3.0         │ #> │ 6.2          ┆ 3.4         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘ select(pl_iris, 1:3) #> shape: (150, 3) #> ┌──────────────┬─────────────┬──────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length │ #> │ ---          ┆ ---         ┆ ---          │ #> │ f64          ┆ f64         ┆ f64          │ #> ╞══════════════╪═════════════╪══════════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          │ #> │ 4.9          ┆ 3.0         ┆ 1.4          │ #> │ 4.7          ┆ 3.2         ┆ 1.3          │ #> │ 4.6          ┆ 3.1         ┆ 1.5          │ #> │ 5.0          ┆ 3.6         ┆ 1.4          │ #> │ …            ┆ …           ┆ …            │ #> │ 6.7          ┆ 3.0         ┆ 5.2          │ #> │ 6.3          ┆ 2.5         ┆ 5.0          │ #> │ 6.5          ┆ 3.0         ┆ 5.2          │ #> │ 6.2          ┆ 3.4         ┆ 5.4          │ #> │ 5.9          ┆ 3.0         ┆ 5.1          │ #> └──────────────┴─────────────┴──────────────┘ select(pl_iris, starts_with(\"Sepal\")) #> shape: (150, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 4.9          ┆ 3.0         │ #> │ 4.7          ┆ 3.2         │ #> │ 4.6          ┆ 3.1         │ #> │ 5.0          ┆ 3.6         │ #> │ …            ┆ …           │ #> │ 6.7          ┆ 3.0         │ #> │ 6.3          ┆ 2.5         │ #> │ 6.5          ┆ 3.0         │ #> │ 6.2          ┆ 3.4         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘ select(pl_iris, -ends_with(\"Length\")) #> shape: (150, 3) #> ┌─────────────┬─────────────┬───────────┐ #> │ Sepal.Width ┆ Petal.Width ┆ Species   │ #> │ ---         ┆ ---         ┆ ---       │ #> │ f64         ┆ f64         ┆ cat       │ #> ╞═════════════╪═════════════╪═══════════╡ #> │ 3.5         ┆ 0.2         ┆ setosa    │ #> │ 3.0         ┆ 0.2         ┆ setosa    │ #> │ 3.2         ┆ 0.2         ┆ setosa    │ #> │ 3.1         ┆ 0.2         ┆ setosa    │ #> │ 3.6         ┆ 0.2         ┆ setosa    │ #> │ …           ┆ …           ┆ …         │ #> │ 3.0         ┆ 2.3         ┆ virginica │ #> │ 2.5         ┆ 1.9         ┆ virginica │ #> │ 3.0         ┆ 2.0         ┆ virginica │ #> │ 3.4         ┆ 2.3         ┆ virginica │ #> │ 3.0         ┆ 1.8         ┆ virginica │ #> └─────────────┴─────────────┴───────────┘  # Renaming while selecting is also possible select(pl_iris, foo1 = Sepal.Length, Sepal.Width) #> shape: (150, 2) #> ┌──────┬─────────────┐ #> │ foo1 ┆ Sepal.Width │ #> │ ---  ┆ ---         │ #> │ f64  ┆ f64         │ #> ╞══════╪═════════════╡ #> │ 5.1  ┆ 3.5         │ #> │ 4.9  ┆ 3.0         │ #> │ 4.7  ┆ 3.2         │ #> │ 4.6  ┆ 3.1         │ #> │ 5.0  ┆ 3.6         │ #> │ …    ┆ …           │ #> │ 6.7  ┆ 3.0         │ #> │ 6.3  ┆ 2.5         │ #> │ 6.5  ┆ 3.0         │ #> │ 6.2  ┆ 3.4         │ #> │ 5.9  ┆ 3.0         │ #> └──────┴─────────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/semi_join.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtering joins — semi_join.polars_data_frame","title":"Filtering joins — semi_join.polars_data_frame","text":"Filtering joins filter rows x based presence absence matches y: semi_join() return rows x match y. anti_join() return rows x without match y.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/semi_join.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtering joins — semi_join.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' semi_join(x, y, by = NULL, ..., na_matches = \"na\")  # S3 method for class 'polars_data_frame' anti_join(x, y, by = NULL, ..., na_matches = \"na\")  # S3 method for class 'polars_lazy_frame' semi_join(x, y, by = NULL, ..., na_matches = \"na\")  # S3 method for class 'polars_lazy_frame' anti_join(x, y, by = NULL, ..., na_matches = \"na\")"},{"path":"https://tidypolars.etiennebacher.com/reference/semi_join.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filtering joins — semi_join.polars_data_frame","text":"x, y Two Polars Data/LazyFrames Variables join . NULL (default), *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. can take character vector, like c(\"x\", \"y\") x y datasets. join variables name, use equalities character vector, like c(\"x1\" = \"x2\", \"y\"). use character vector, join can done using strict equality. can also specification created dplyr::join_by(). Contrary input character vector shown , join_by() uses unquoted column names, e.g join_by(x1 == x2, y). Finally, inner_join() also supports inequality joins, e.g. join_by(x1 >= x2), helpers (), overlaps(), within(). See documentation dplyr::join_by() information. join types likely support inequality joins future. ... Dots empty. na_matches two NA values match? \"na\", default, treats two NA values equal. \"never\" treats two NA values different never match together values. Note joining Polars Data/LazyFrames, NaN always considered equal, matter value na_matches. differs original dplyr implementation.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/semi_join.polars_data_frame.html","id":"unknown-arguments","dir":"Reference","previous_headings":"","what":"Unknown arguments","title":"Filtering joins — semi_join.polars_data_frame","text":"Arguments supported original implementation tidyverse listed throw warning default specified. change behavior error instead, use options(tidypolars_unknown_args = \"error\").","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/semi_join.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filtering joins — semi_join.polars_data_frame","text":"","code":"test <- polars::pl$DataFrame(   x = c(1, 2, 3),   y = c(1, 2, 3),   z = c(1, 2, 3) )  test2 <- polars::pl$DataFrame(   x = c(1, 2, 4),   y = c(1, 2, 4),   z2 = c(1, 2, 4) )  test #> shape: (3, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 │ #> │ 2.0 ┆ 2.0 ┆ 2.0 │ #> │ 3.0 ┆ 3.0 ┆ 3.0 │ #> └─────┴─────┴─────┘  test2 #> shape: (3, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z2  │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 │ #> │ 2.0 ┆ 2.0 ┆ 2.0 │ #> │ 4.0 ┆ 4.0 ┆ 4.0 │ #> └─────┴─────┴─────┘  # only keep the rows of `test` that have matching keys in `test2` semi_join(test, test2, by = c(\"x\", \"y\")) #> shape: (2, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 │ #> │ 2.0 ┆ 2.0 ┆ 2.0 │ #> └─────┴─────┴─────┘  # only keep the rows of `test` that don't have matching keys in `test2` anti_join(test, test2, by = c(\"x\", \"y\")) #> shape: (1, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 3.0 ┆ 3.0 ┆ 3.0 │ #> └─────┴─────┴─────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/separate.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate a character column into multiple columns based on a substring — separate.polars_data_frame","title":"Separate a character column into multiple columns based on a substring — separate.polars_data_frame","text":"Currently, splitting column regular expression position possible.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/separate.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate a character column into multiple columns based on a substring — separate.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' separate(data, col, into, sep = \" \", remove = TRUE, ...)  # S3 method for class 'polars_lazy_frame' separate(data, col, into, sep = \" \", remove = TRUE, ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/separate.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate a character column into multiple columns based on a substring — separate.polars_data_frame","text":"data Polars Data/LazyFrame col Column split Character vector containing names new variables create. Use NA omit variable output. sep String used split column. Regular expressions supported yet. remove TRUE, remove input column output data frame. ... Dots empty.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/separate.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate a character column into multiple columns based on a substring — separate.polars_data_frame","text":"","code":"test <- polars::pl$DataFrame(   x = c(NA, \"x.y\", \"x.z\", \"y.z\") ) separate(test, x, into = c(\"foo\", \"foo2\"), sep = \".\") #> shape: (4, 2) #> ┌──────┬──────┐ #> │ foo  ┆ foo2 │ #> │ ---  ┆ ---  │ #> │ str  ┆ str  │ #> ╞══════╪══════╡ #> │ null ┆ null │ #> │ x    ┆ y    │ #> │ x    ┆ z    │ #> │ y    ┆ z    │ #> └──────┴──────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/sink_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream output to a CSV file — sink_csv","title":"Stream output to a CSV file — sink_csv","text":"function allows stream LazyFrame larger RAM directly .csv file without collecting R session, thus preventing crashes small memory.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream output to a CSV file — sink_csv","text":"","code":"sink_csv(   .data,   path,   ...,   include_bom = FALSE,   include_header = TRUE,   separator = \",\",   line_terminator = \"\\n\",   quote_char = \"\\\"\",   batch_size = 1024,   datetime_format = NULL,   date_format = NULL,   time_format = NULL,   float_precision = NULL,   null_value = \"\",   quote_style = \"necessary\",   maintain_order = TRUE,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   no_optimization = FALSE,   mkdir = FALSE,   quote,   null_values )"},{"path":"https://tidypolars.etiennebacher.com/reference/sink_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream output to a CSV file — sink_csv","text":".data Polars LazyFrame. path Output file. Can also partition_*() function export output multiple files (see Details section ). ... Ignored. include_bom Whether include UTF-8 BOM (byte order mark) CSV output. include_header Whether include header CSV output. separator Separate CSV fields symbol. line_terminator String used end row. quote_char Byte use quoting character. batch_size Number rows processed per thread. datetime_format, date_format, time_format format string used format date time values. See ?strptime() accepted values. format specified, default fractional-second precision inferred maximum time unit found Datetime cols (). float_precision Number decimal places write, applied Float32 Float64 datatypes. null_value string representing null values (defaulting empty string). quote_style Determines quoting strategy used: \"necessary\" (default): puts quotes around fields necessary. necessary fields contain quote, delimiter record terminator. Quotes also necessary writing empty record (indistinguishable record one empty field). \"always\": puts quotes around every field. \"non_numeric\": puts quotes around fields non-numeric. Namely, writing field parse valid float integer, quotes used even strictly necessary. maintain_order Whether maintain order data processed (default TRUE). Setting FALSE slightly faster. type_coercion Coerce types operations succeed run minimal required memory (default TRUE). predicate_pushdown Applies filters early possible scan level (default TRUE). projection_pushdown Select columns needed scan level (default TRUE). simplify_expression Various optimizations, constant folding replacing expensive operations faster alternatives (default TRUE). slice_pushdown load required slice scan. materialize sliced outputs level. materialize sliced outputs (default TRUE). no_optimization Sets following optimizations FALSE: predicate_pushdown, projection_pushdown,  slice_pushdown, simplify_expression. Default FALSE. mkdir Recursively create directories path. quote Deprecated, use quote_char instead. null_values Deprecated, use null_value instead.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stream output to a CSV file — sink_csv","text":"input LazyFrame.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/reference/sink_csv.html","id":"partitioned-output","dir":"Reference","previous_headings":"","what":"Partitioned output","title":"Stream output to a CSV file — sink_csv","text":"possible export LazyFrame multiple files, also called partitioned output. partition can determined several ways: key(s): split values keys. amount files can written limited. However, writing beyond certain amount files, data remaining partitions buffered writing file. maximum number rows: number rows file reaches maximum number rows, file closed new file opened. partitioning schemes can used functions partition_by_key() partition_by_max_size(). See Examples . Writing partitioned output usually requires setting mkdir = TRUE automatically create required subfolders.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stream output to a CSV file — sink_csv","text":"","code":"# This is an example workflow where sink_csv() is not very useful because # the data would fit in memory. It simply is an example of using it at the # end of a piped workflow.  # Create files for the CSV input and output: file_csv <- tempfile(fileext = \".csv\") file_csv2 <- tempfile(fileext = \".csv\")  # Write some data in a CSV file fake_data <- do.call(\"rbind\", rep(list(mtcars), 1000)) write.csv(fake_data, file = file_csv, row.names = FALSE)  # In a new R session, we could read this file as a LazyFrame, do some operations, # and write it to another CSV file without ever collecting it in the R session: scan_csv_polars(file_csv) |>   filter(cyl %in% c(4, 6), mpg > 22) |>   mutate(     hp_gear_ratio = hp / gear   ) |>   sink_csv(path = file_csv2)   #---------------------------------------------- # Write a LazyFrame to multiple files depending on various strategies. my_lf <- as_polars_lf(mtcars)  # Split the LazyFrame by key(s) and write each split to a different file: out_path <- withr::local_tempdir() sink_csv(my_lf, partition_by_key(out_path, by = c(\"am\", \"cyl\")), mkdir = TRUE) fs::dir_tree(out_path) #> /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file101265e7bdfb #> ├── am=0.0 #> │   ├── cyl=4.0 #> │   │   └── 0.csv #> │   ├── cyl=6.0 #> │   │   └── 0.csv #> │   └── cyl=8.0 #> │       └── 0.csv #> └── am=1.0 #>     ├── cyl=4.0 #>     │   └── 0.csv #>     ├── cyl=6.0 #>     │   └── 0.csv #>     └── cyl=8.0 #>         └── 0.csv  # Split the LazyFrame by max number of rows per file: out_path <- withr::local_tempdir() sink_csv(my_lf, partition_by_max_size(out_path, max_size = 5), mkdir = TRUE) fs::dir_tree(out_path) # mtcars has 32 rows so we have 7 output files #> /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10125169de01 #> ├── 00000000.csv #> ├── 00000001.csv #> ├── 00000002.csv #> ├── 00000003.csv #> ├── 00000004.csv #> ├── 00000005.csv #> └── 00000006.csv"},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ipc.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream output to an IPC file — sink_ipc","title":"Stream output to an IPC file — sink_ipc","text":"function allows stream LazyFrame larger RAM directly IPC file without collecting R session, thus preventing crashes small memory.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ipc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream output to an IPC file — sink_ipc","text":"","code":"sink_ipc(   .data,   path,   ...,   compression = \"zstd\",   compat_level = \"newest\",   maintain_order = TRUE,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   no_optimization = FALSE,   mkdir = FALSE )"},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ipc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream output to an IPC file — sink_ipc","text":".data Polars LazyFrame. path Output file. Can also partition_*() function export output multiple files (see Details section ). ... Ignored. compression NULL character compression method, \"uncompressed\" \"lz4\" \"zstd\". NULL equivalent \"uncompressed\". Choose \"zstd\" good compression performance. Choose \"lz4\" fast compression/decompression. compat_level Determines compatibility level exporting Polars' internal data structures. specifying new compatibility level, Polars exports internal data structures might interpretable Arrow implementations. level can specified name (e.g., \"newest\") scalar integer (currently, 0 1 supported). \"newest\" (default): Use highest level, currently 1 (Low compatibility). \"oldest\": 0 (High compatibility). maintain_order Whether maintain order data processed (default TRUE). Setting FALSE slightly faster. type_coercion Coerce types operations succeed run minimal required memory (default TRUE). predicate_pushdown Applies filters early possible scan level (default TRUE). projection_pushdown Select columns needed scan level (default TRUE). simplify_expression Various optimizations, constant folding replacing expensive operations faster alternatives (default TRUE). slice_pushdown load required slice scan. materialize sliced outputs level. materialize sliced outputs (default TRUE). no_optimization Sets following optimizations FALSE: predicate_pushdown, projection_pushdown,  slice_pushdown, simplify_expression. Default FALSE. mkdir Recursively create directories path.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ipc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stream output to an IPC file — sink_ipc","text":"input LazyFrame.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ipc.html","id":"partitioned-output","dir":"Reference","previous_headings":"","what":"Partitioned output","title":"Stream output to an IPC file — sink_ipc","text":"possible export LazyFrame multiple files, also called partitioned output. partition can determined several ways: key(s): split values keys. amount files can written limited. However, writing beyond certain amount files, data remaining partitions buffered writing file. maximum number rows: number rows file reaches maximum number rows, file closed new file opened. partitioning schemes can used functions partition_by_key() partition_by_max_size(). See Examples . Writing partitioned output usually requires setting mkdir = TRUE automatically create required subfolders.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ipc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stream output to an IPC file — sink_ipc","text":"","code":"# This is an example workflow where sink_ipc() is not very useful because # the data would fit in memory. It simply is an example of using it at the # end of a piped workflow.  # Create files for the IPC input and output: file_ipc <- tempfile(fileext = \".ipc\") file_ipc2 <- tempfile(fileext = \".ipc\")  # Write some data in an IPC file fake_data <- do.call(\"rbind\", rep(list(mtcars), 1000)) arrow::write_ipc_file(fake_data, file_ipc)  # In a new R session, we could read this file as a LazyFrame, do some operations, # and write it to another IPC file without ever collecting it in the R session: scan_ipc_polars(file_ipc) |>   filter(cyl %in% c(4, 6), mpg > 22) |>   mutate(     hp_gear_ratio = hp / gear   ) |>   sink_ipc(path = file_ipc2)   #---------------------------------------------- # Write a LazyFrame to multiple files depending on various strategies. my_lf <- as_polars_lf(mtcars)  # Split the LazyFrame by key(s) and write each split to a different file: out_path <- withr::local_tempdir() sink_ipc(my_lf, partition_by_key(out_path, by = c(\"am\", \"cyl\")), mkdir = TRUE) fs::dir_tree(out_path) #> /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10126b81777 #> ├── am=0.0 #> │   ├── cyl=4.0 #> │   │   └── 0.ipc #> │   ├── cyl=6.0 #> │   │   └── 0.ipc #> │   └── cyl=8.0 #> │       └── 0.ipc #> └── am=1.0 #>     ├── cyl=4.0 #>     │   └── 0.ipc #>     ├── cyl=6.0 #>     │   └── 0.ipc #>     └── cyl=8.0 #>         └── 0.ipc  # Split the LazyFrame by max number of rows per file: out_path <- withr::local_tempdir() sink_ipc(my_lf, partition_by_max_size(out_path, max_size = 5), mkdir = TRUE) fs::dir_tree(out_path) # mtcars has 32 rows so we have 7 output files #> /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file1012200c8913 #> ├── 00000000.ipc #> ├── 00000001.ipc #> ├── 00000002.ipc #> ├── 00000003.ipc #> ├── 00000004.ipc #> ├── 00000005.ipc #> └── 00000006.ipc"},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ndjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream output to a NDJSON file — sink_ndjson","title":"Stream output to a NDJSON file — sink_ndjson","text":"writes output query directly NDJSON file without collecting R session first. useful output query still larger RAM crash R session collected R.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ndjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream output to a NDJSON file — sink_ndjson","text":"","code":"sink_ndjson(   .data,   path,   ...,   maintain_order = TRUE,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   no_optimization = FALSE,   mkdir = FALSE )"},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ndjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream output to a NDJSON file — sink_ndjson","text":".data Polars LazyFrame. path Output file. Can also partition_*() function export output multiple files (see Details section ). ... Ignored. maintain_order Whether maintain order data processed (default TRUE). Setting FALSE slightly faster. type_coercion Coerce types operations succeed run minimal required memory (default TRUE). predicate_pushdown Applies filters early possible scan level (default TRUE). projection_pushdown Select columns needed scan level (default TRUE). simplify_expression Various optimizations, constant folding replacing expensive operations faster alternatives (default TRUE). slice_pushdown load required slice scan. materialize sliced outputs level. materialize sliced outputs (default TRUE). no_optimization Sets following optimizations FALSE: predicate_pushdown, projection_pushdown,  slice_pushdown, simplify_expression. Default FALSE. mkdir Recursively create directories path.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ndjson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stream output to a NDJSON file — sink_ndjson","text":"input LazyFrame.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ndjson.html","id":"partitioned-output","dir":"Reference","previous_headings":"","what":"Partitioned output","title":"Stream output to a NDJSON file — sink_ndjson","text":"possible export LazyFrame multiple files, also called partitioned output. partition can determined several ways: key(s): split values keys. amount files can written limited. However, writing beyond certain amount files, data remaining partitions buffered writing file. maximum number rows: number rows file reaches maximum number rows, file closed new file opened. partitioning schemes can used functions partition_by_key() partition_by_max_size(). See Examples . Writing partitioned output usually requires setting mkdir = TRUE automatically create required subfolders.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_ndjson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stream output to a NDJSON file — sink_ndjson","text":"","code":"# This is an example workflow where sink_ndjson() is not very useful because # the data would fit in memory. It simply is an example of using it at the # end of a piped workflow.  # Create files for the NDJSON input and output: file_ndjson <- tempfile(fileext = \".ndjson\") file_ndjson2 <- tempfile(fileext = \".ndjson\")  # Write some data in a CSV file fake_data <- do.call(\"rbind\", rep(list(mtcars), 1000)) jsonlite::stream_out(fake_data, file(file_ndjson), verbose = FALSE)  # In a new R session, we could read this file as a LazyFrame, do some operations, # and write it to another NDJSON file without ever collecting it in the R session: scan_ndjson_polars(file_ndjson) |>   filter(cyl %in% c(4, 6), mpg > 22) |>   mutate(     hp_gear_ratio = hp / gear   ) |>   sink_ndjson(path = file_ndjson2)   #---------------------------------------------- # Write a LazyFrame to multiple files depending on various strategies. my_lf <- as_polars_lf(mtcars)  # Split the LazyFrame by key(s) and write each split to a different file: out_path <- withr::local_tempdir() sink_ndjson(my_lf, partition_by_key(out_path, by = c(\"am\", \"cyl\")), mkdir = TRUE) fs::dir_tree(out_path) #> /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file1012530270e0 #> ├── am=0.0 #> │   ├── cyl=4.0 #> │   │   └── 0.jsonl #> │   ├── cyl=6.0 #> │   │   └── 0.jsonl #> │   └── cyl=8.0 #> │       └── 0.jsonl #> └── am=1.0 #>     ├── cyl=4.0 #>     │   └── 0.jsonl #>     ├── cyl=6.0 #>     │   └── 0.jsonl #>     └── cyl=8.0 #>         └── 0.jsonl  # Split the LazyFrame by max number of rows per file: out_path <- withr::local_tempdir() sink_ndjson(my_lf, partition_by_max_size(out_path, max_size = 5), mkdir = TRUE) fs::dir_tree(out_path) # mtcars has 32 rows so we have 7 output files #> /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10124540acb3 #> ├── 00000000.jsonl #> ├── 00000001.jsonl #> ├── 00000002.jsonl #> ├── 00000003.jsonl #> ├── 00000004.jsonl #> ├── 00000005.jsonl #> └── 00000006.jsonl"},{"path":"https://tidypolars.etiennebacher.com/reference/sink_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream output to a parquet file — sink_parquet","title":"Stream output to a parquet file — sink_parquet","text":"function allows stream LazyFrame larger RAM directly .parquet file without collecting R session, thus preventing crashes small memory.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream output to a parquet file — sink_parquet","text":"","code":"sink_parquet(   .data,   path,   ...,   compression = \"zstd\",   compression_level = 3,   statistics = FALSE,   row_group_size = NULL,   data_page_size = NULL,   maintain_order = TRUE,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   no_optimization = FALSE,   mkdir = FALSE )"},{"path":"https://tidypolars.etiennebacher.com/reference/sink_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream output to a parquet file — sink_parquet","text":".data Polars LazyFrame. path Output file. Can also partition_*() function export output multiple files (see Details section ). ... Ignored. compression compression method. One : \"uncompressed\" \"zstd\" (default): good compression performance \"lz4\": fast compression / decompression \"snappy\": backwards compatibility guarantees deal older parquet readers. \"gzip\", \"lzo\", \"brotli\" compression_level level compression use (default 3). used compression one \"gzip\", \"brotli\", \"zstd\". Higher compression means smaller files disk. \"gzip\" : min-level = 0, max-level = 10 \"brotli\" : min-level = 0, max-level = 11 \"zstd\" : min-level = 1, max-level = 22. statistics Whether compute write column statistics (default FALSE). requires computations. row_group_size Size row groups number rows. NULL (default), chunks DataFrame used. Writing smaller chunks may reduce memory pressure improve writing speeds. data_page_size NULL (default), limit around 1MB. maintain_order Whether maintain order data processed (default TRUE). Setting FALSE slightly faster. type_coercion Coerce types operations succeed run minimal required memory (default TRUE). predicate_pushdown Applies filters early possible scan level (default TRUE). projection_pushdown Select columns needed scan level (default TRUE). simplify_expression Various optimizations, constant folding replacing expensive operations faster alternatives (default TRUE). slice_pushdown load required slice scan. materialize sliced outputs level. materialize sliced outputs (default TRUE). no_optimization Sets following optimizations FALSE: predicate_pushdown, projection_pushdown,  slice_pushdown, simplify_expression. Default FALSE. mkdir Recursively create directories path.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stream output to a parquet file — sink_parquet","text":"input LazyFrame.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/reference/sink_parquet.html","id":"partitioned-output","dir":"Reference","previous_headings":"","what":"Partitioned output","title":"Stream output to a parquet file — sink_parquet","text":"possible export LazyFrame multiple files, also called partitioned output. partition can determined several ways: key(s): split values keys. amount files can written limited. However, writing beyond certain amount files, data remaining partitions buffered writing file. maximum number rows: number rows file reaches maximum number rows, file closed new file opened. partitioning schemes can used functions partition_by_key() partition_by_max_size(). See Examples . Writing partitioned output usually requires setting mkdir = TRUE automatically create required subfolders.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/sink_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stream output to a parquet file — sink_parquet","text":"","code":"# This is an example workflow where sink_parquet() is not very useful because # the data would fit in memory. It simply is an example of using it at the # end of a piped workflow.  # Create files for the CSV input and the Parquet output: file_csv <- tempfile(fileext = \".csv\") file_parquet <- tempfile(fileext = \".parquet\")  # Write some data in a CSV file fake_data <- do.call(\"rbind\", rep(list(mtcars), 1000)) write.csv(fake_data, file = file_csv, row.names = FALSE)  # In a new R session, we could read this file as a LazyFrame, do some operations, # and write it to a parquet file without ever collecting it in the R session: scan_csv_polars(file_csv) |>   filter(cyl %in% c(4, 6), mpg > 22) |>   mutate(     hp_gear_ratio = hp / gear   ) |>   sink_parquet(path = file_parquet)   #---------------------------------------------- # Write a LazyFrame to multiple files depending on various strategies. my_lf <- as_polars_lf(mtcars)  # Split the LazyFrame by key(s) and write each split to a different file: out_path <- withr::local_tempdir() sink_parquet(my_lf, partition_by_key(out_path, by = c(\"am\", \"cyl\")), mkdir = TRUE) fs::dir_tree(out_path) #> /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file1012496003bf #> ├── am=0.0 #> │   ├── cyl=4.0 #> │   │   └── 0.parquet #> │   ├── cyl=6.0 #> │   │   └── 0.parquet #> │   └── cyl=8.0 #> │       └── 0.parquet #> └── am=1.0 #>     ├── cyl=4.0 #>     │   └── 0.parquet #>     ├── cyl=6.0 #>     │   └── 0.parquet #>     └── cyl=8.0 #>         └── 0.parquet  # Split the LazyFrame by max number of rows per file: out_path <- withr::local_tempdir() sink_parquet(my_lf, partition_by_max_size(out_path, max_size = 5), mkdir = TRUE) fs::dir_tree(out_path) # mtcars has 32 rows so we have 7 output files #> /var/folders/x7/ch5v91h56_zbvbd1y2f600dm0000gn/T//Rtmpg2nYWf/file10123e96163b #> ├── 00000000.parquet #> ├── 00000001.parquet #> ├── 00000002.parquet #> ├── 00000003.parquet #> ├── 00000004.parquet #> ├── 00000005.parquet #> └── 00000006.parquet"},{"path":"https://tidypolars.etiennebacher.com/reference/slice_tail.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows of a Data/LazyFrame — slice_tail.polars_data_frame","title":"Subset rows of a Data/LazyFrame — slice_tail.polars_data_frame","text":"Subset rows Data/LazyFrame","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/slice_tail.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows of a Data/LazyFrame — slice_tail.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' slice_tail(.data, ..., n, by = NULL)  # S3 method for class 'polars_lazy_frame' slice_tail(.data, ..., n, by = NULL)  # S3 method for class 'polars_data_frame' slice_head(.data, ..., n, by = NULL)  # S3 method for class 'polars_lazy_frame' slice_head(.data, ..., n, by = NULL)  # S3 method for class 'polars_data_frame' slice_sample(.data, ..., n = NULL, prop = NULL, by = NULL, replace = FALSE)"},{"path":"https://tidypolars.etiennebacher.com/reference/slice_tail.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows of a Data/LazyFrame — slice_tail.polars_data_frame","text":".data Polars Data/LazyFrame ... Dots empty. n number rows select start end data. used prop. Optionally, selection columns group just operation, functioning alternative group_by(). group order maintained, use group_by() want control . prop Proportion rows select. used n. replace Perform sampling replacement (TRUE) without (FALSE).","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/slice_tail.polars_data_frame.html","id":"unknown-arguments","dir":"Reference","previous_headings":"","what":"Unknown arguments","title":"Subset rows of a Data/LazyFrame — slice_tail.polars_data_frame","text":"Arguments supported original implementation tidyverse listed throw warning default specified. change behavior error instead, use options(tidypolars_unknown_args = \"error\").","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/slice_tail.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows of a Data/LazyFrame — slice_tail.polars_data_frame","text":"","code":"pl_test <- polars::as_polars_df(iris) slice_head(pl_test, n = 3) #> shape: (3, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘ slice_tail(pl_test, n = 3) #> shape: (3, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘ slice_sample(pl_test, n = 5) #> shape: (5, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 6.7          ┆ 3.3         ┆ 5.7          ┆ 2.1         ┆ virginica │ #> │ 7.3          ┆ 2.9         ┆ 6.3          ┆ 1.8         ┆ virginica │ #> │ 5.7          ┆ 3.8         ┆ 1.7          ┆ 0.3         ┆ setosa    │ #> │ 5.1          ┆ 3.3         ┆ 1.7          ┆ 0.5         ┆ setosa    │ #> │ 6.5          ┆ 3.0         ┆ 5.5          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘ slice_sample(pl_test, prop = 0.1) #> shape: (15, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species    │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat        │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡ #> │ 5.8          ┆ 2.7         ┆ 5.1          ┆ 1.9         ┆ virginica  │ #> │ 6.7          ┆ 3.1         ┆ 4.7          ┆ 1.5         ┆ versicolor │ #> │ 4.9          ┆ 2.4         ┆ 3.3          ┆ 1.0         ┆ versicolor │ #> │ 6.4          ┆ 3.2         ┆ 4.5          ┆ 1.5         ┆ versicolor │ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa     │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …          │ #> │ 4.4          ┆ 2.9         ┆ 1.4          ┆ 0.2         ┆ setosa     │ #> │ 7.7          ┆ 3.0         ┆ 6.1          ┆ 2.3         ┆ virginica  │ #> │ 5.6          ┆ 3.0         ┆ 4.1          ┆ 1.3         ┆ versicolor │ #> │ 6.3          ┆ 2.9         ┆ 5.6          ┆ 1.8         ┆ virginica  │ #> │ 4.9          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa     │ #> └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/summarize.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize each group down to one row — summarize.polars_data_frame","title":"Summarize each group down to one row — summarize.polars_data_frame","text":"summarize() returns one row combination grouping variables (one difference dplyr::summarize() summarize() accepts grouped data). contain one column grouping variable one column summary statistics specified.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/summarize.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize each group down to one row — summarize.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' summarize(.data, ..., .by = NULL, .groups = \"drop_last\")  # S3 method for class 'polars_data_frame' summarise(.data, ..., .by = NULL, .groups = \"drop_last\")  # S3 method for class 'polars_lazy_frame' summarize(.data, ..., .by = NULL, .groups = \"drop_last\")  # S3 method for class 'polars_lazy_frame' summarise(.data, ..., .by = NULL, .groups = \"drop_last\")"},{"path":"https://tidypolars.etiennebacher.com/reference/summarize.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize each group down to one row — summarize.polars_data_frame","text":".data Polars Data/LazyFrame ... Name-value pairs. name gives name column output. value can : vector length current group (whole data frame ungrouped). NULL, remove column. across() mostly supported, except cases. particular, .cols argument (...), select variables created across(). select helpers supported. See examples. .Optionally, selection columns group just operation, functioning alternative group_by(). group order maintained, use group_by() want control . .groups Grouping structure result. Must one : \"drop_last\" (default): drop last level grouping; \"drop\": levels grouping dropped; \"keep\": keep grouping structure .data. now, \"rowwise\" supported. Note dplyr uses .groups = NULL default, whose behavior depends number rows group output. However, returning several rows group summarize() deprecated (one use reframe() instead), .groups = NULL supported tidypolars.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/summarize.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize each group down to one row — summarize.polars_data_frame","text":"","code":"mtcars |>   as_polars_df() |>   group_by(cyl) |>   summarize(m_gear = mean(gear), sd_gear = sd(gear)) #> shape: (3, 3) #> ┌─────┬──────────┬──────────┐ #> │ cyl ┆ m_gear   ┆ sd_gear  │ #> │ --- ┆ ---      ┆ ---      │ #> │ f64 ┆ f64      ┆ f64      │ #> ╞═════╪══════════╪══════════╡ #> │ 6.0 ┆ 3.857143 ┆ 0.690066 │ #> │ 4.0 ┆ 4.090909 ┆ 0.53936  │ #> │ 8.0 ┆ 3.285714 ┆ 0.726273 │ #> └─────┴──────────┴──────────┘  # an alternative syntax is to use `.by` mtcars |>   as_polars_df() |>   summarize(m_gear = mean(gear), sd_gear = sd(gear), .by = cyl) #> shape: (3, 3) #> ┌─────┬──────────┬──────────┐ #> │ cyl ┆ m_gear   ┆ sd_gear  │ #> │ --- ┆ ---      ┆ ---      │ #> │ f64 ┆ f64      ┆ f64      │ #> ╞═════╪══════════╪══════════╡ #> │ 6.0 ┆ 3.857143 ┆ 0.690066 │ #> │ 4.0 ┆ 4.090909 ┆ 0.53936  │ #> │ 8.0 ┆ 3.285714 ┆ 0.726273 │ #> └─────┴──────────┴──────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/summary.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics for a Polars DataFrame — summary.polars_data_frame","title":"Summary statistics for a Polars DataFrame — summary.polars_data_frame","text":"Summary statistics Polars DataFrame","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/summary.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics for a Polars DataFrame — summary.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' summary(object, percentiles = c(0.25, 0.5, 0.75), ...)"},{"path":"https://tidypolars.etiennebacher.com/reference/summary.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistics for a Polars DataFrame — summary.polars_data_frame","text":"object Polars DataFrame. percentiles One percentiles include summary statistics. values must 0 1 (NULL ignored). ... Ignored.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/summary.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary statistics for a Polars DataFrame — summary.polars_data_frame","text":"","code":"mtcars |>   as_polars_df() |>   summary(percentiles = c(0.2, 0.4, 0.6, 0.8)) #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> shape: (10, 12) #> ┌────────────┬───────────┬──────────┬────────────┬───┬──────────┬──────────┬──────────┬────────┐ #> │ statistic  ┆ mpg       ┆ cyl      ┆ disp       ┆ … ┆ vs       ┆ am       ┆ gear     ┆ carb   │ #> │ ---        ┆ ---       ┆ ---      ┆ ---        ┆   ┆ ---      ┆ ---      ┆ ---      ┆ ---    │ #> │ str        ┆ f64       ┆ f64      ┆ f64        ┆   ┆ f64      ┆ f64      ┆ f64      ┆ f64    │ #> ╞════════════╪═══════════╪══════════╪════════════╪═══╪══════════╪══════════╪══════════╪════════╡ #> │ count      ┆ 32.0      ┆ 32.0     ┆ 32.0       ┆ … ┆ 32.0     ┆ 32.0     ┆ 32.0     ┆ 32.0   │ #> │ null_count ┆ 0.0       ┆ 0.0      ┆ 0.0        ┆ … ┆ 0.0      ┆ 0.0      ┆ 0.0      ┆ 0.0    │ #> │ mean       ┆ 20.090625 ┆ 6.1875   ┆ 230.721875 ┆ … ┆ 0.4375   ┆ 0.40625  ┆ 3.6875   ┆ 2.8125 │ #> │ std        ┆ 6.026948  ┆ 1.785922 ┆ 123.938694 ┆ … ┆ 0.504016 ┆ 0.498991 ┆ 0.737804 ┆ 1.6152 │ #> │ min        ┆ 10.4      ┆ 4.0      ┆ 71.1       ┆ … ┆ 0.0      ┆ 0.0      ┆ 3.0      ┆ 1.0    │ #> │ 20%        ┆ 15.2      ┆ 4.0      ┆ 120.1      ┆ … ┆ 0.0      ┆ 0.0      ┆ 3.0      ┆ 1.0    │ #> │ 40%        ┆ 17.8      ┆ 6.0      ┆ 160.0      ┆ … ┆ 0.0      ┆ 0.0      ┆ 3.0      ┆ 2.0    │ #> │ 60%        ┆ 21.0      ┆ 8.0      ┆ 275.8      ┆ … ┆ 1.0      ┆ 1.0      ┆ 4.0      ┆ 3.0    │ #> │ 80%        ┆ 24.4      ┆ 8.0      ┆ 351.0      ┆ … ┆ 1.0      ┆ 1.0      ┆ 4.0      ┆ 4.0    │ #> │ max        ┆ 33.9      ┆ 8.0      ┆ 472.0      ┆ … ┆ 1.0      ┆ 1.0      ┆ 5.0      ┆ 8.0    │ #> └────────────┴───────────┴──────────┴────────────┴───┴──────────┴──────────┴──────────┴────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/tidypolars-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidypolars: More Efficient Tidyverse Code, Using Polars in the Background — tidypolars-package","title":"tidypolars: More Efficient Tidyverse Code, Using Polars in the Background — tidypolars-package","text":"Polars cross-language tool manipulating large data. However, one drawback R implementation syntax look odd many R users used Python syntax. objective tidypolars improve ease--use Polars R providing tidyverse syntax polars.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/reference/tidypolars-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidypolars: More Efficient Tidyverse Code, Using Polars in the Background — tidypolars-package","text":"Maintainer: Etienne Bacher etienne.bacher@protonmail.com [copyright holder] contributors: Anatoly Tsyplenkov atsyplenkov@fastmail.com (ORCID) [contributor]","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/tidypolars_options.html","id":null,"dir":"Reference","previous_headings":"","what":"tidypolars global options — tidypolars_options","title":"tidypolars global options — tidypolars_options","text":"tidypolars following global options: tidypolars_unknown_args controls happens arguments passed expression unknown, e.g argument prob sample(). default (\"warn\") warns user arguments ignored tidypolars. accepted value \"error\" throw error happens. tidypolars_fallback_to_r controls happens unknown function (translated use polars syntax) passed expression. default FALSE, meaning unknown functions trigger error. Setting option TRUE convert data R, apply unknown function, convert output back polars. Using fallback R several drawbacks: loses polars built-parallelism optimizations; session may crash experience severe slowdown data converted R (especially input LazyFrame). package polars also contains several global options may useful, changing default behavior converting Int64 values R: https://pola-rs.github.io/r-polars/man/polars_options.html.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/tidypolars_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tidypolars global options — tidypolars_options","text":"","code":"##### Unknown arguments  options(tidypolars_unknown_args = \"warn\") test <- polars::pl$DataFrame(x = c(2, 1, 5, 3, 1))  # The default is to warn the user mutate(test, x2 = sample(x, prob = 0.5)) #> Warning: tidypolars doesn't know how to use some arguments of `sample()`. #> ℹ The following argument(s) will be ignored: \"prob\". #> shape: (5, 2) #> ┌─────┬─────┐ #> │ x   ┆ x2  │ #> │ --- ┆ --- │ #> │ f64 ┆ f64 │ #> ╞═════╪═════╡ #> │ 2.0 ┆ 5.0 │ #> │ 1.0 ┆ 5.0 │ #> │ 5.0 ┆ 5.0 │ #> │ 3.0 ┆ 5.0 │ #> │ 1.0 ┆ 5.0 │ #> └─────┴─────┘  # But one can make this stricter and throw an error when this happens options(tidypolars_unknown_args = \"error\") try(mutate(test, x2 = sample(x, prob = 0.5))) #> Error in mutate(test, x2 = sample(x, prob = 0.5)) :  #>   Error while running function `sample()` in Polars. #> ✖ tidypolars doesn't know how to use some arguments of `sample()`: \"prob\". #> ℹ Use `options(tidypolars_unknown_args = \"warn\")` to warn when this happens #>   instead of throwing an error.  options(tidypolars_unknown_args = \"warn\")  ##### Fallback to R  test <- polars::pl$DataFrame(x = c(2, 1, 5, 3, 1))  # The default is to error because mad() isn't translated internally try(mutate(test, x2 = mad(x))) #> Error in mutate(test, x2 = mad(x)) :  #>   tidypolars doesn't know how to translate this function: `mad()` (from #> package stats). #> ℹ You can ask for it to be translated here: #>   <https://github.com/etiennebacher/tidypolars/issues>. #> ℹ See `?tidypolars_options` to set automatic fallback to R to handle unknown #>   functions.  # But one can allow fallback to R to apply this function and then convert # the output back to polars (see drawbacks in the \"description\" section # above) options(tidypolars_fallback_to_r = TRUE) mutate(test, x2 = mad(x)) #> ℹ The `blob` package is not installed. #> ℹ The blob class vector will not be printed correctly. #> shape: (5, 2) #> ┌─────┬────────┐ #> │ x   ┆ x2     │ #> │ --- ┆ ---    │ #> │ f64 ┆ f64    │ #> ╞═════╪════════╡ #> │ 2.0 ┆ 1.4826 │ #> │ 1.0 ┆ 1.4826 │ #> │ 5.0 ┆ 1.4826 │ #> │ 3.0 ┆ 1.4826 │ #> │ 1.0 ┆ 1.4826 │ #> └─────┴────────┘  options(tidypolars_fallback_to_r = FALSE)"},{"path":"https://tidypolars.etiennebacher.com/reference/uncount.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncount a Data/LazyFrame — uncount.polars_data_frame","title":"Uncount a Data/LazyFrame — uncount.polars_data_frame","text":"duplicates rows according weighting variable (expression). opposite count().","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/uncount.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncount a Data/LazyFrame — uncount.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' uncount(data, weights, ..., .remove = TRUE, .id = NULL)  # S3 method for class 'polars_lazy_frame' uncount(data, weights, ..., .remove = TRUE, .id = NULL)"},{"path":"https://tidypolars.etiennebacher.com/reference/uncount.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncount a Data/LazyFrame — uncount.polars_data_frame","text":"data Polars Data/LazyFrame weights vector weights. Evaluated context data. ... Dots empty. .remove TRUE, weights name column data, column removed. .id Supply string create new variable gives unique identifier created row.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/uncount.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncount a Data/LazyFrame — uncount.polars_data_frame","text":"","code":"test <- polars::pl$DataFrame(x = c(\"a\", \"b\"), y = 100:101, n = c(1, 2)) test #> shape: (2, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ n   │ #> │ --- ┆ --- ┆ --- │ #> │ str ┆ i32 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ a   ┆ 100 ┆ 1.0 │ #> │ b   ┆ 101 ┆ 2.0 │ #> └─────┴─────┴─────┘  uncount(test, n) #> shape: (3, 2) #> ┌─────┬─────┐ #> │ x   ┆ y   │ #> │ --- ┆ --- │ #> │ str ┆ i32 │ #> ╞═════╪═════╡ #> │ a   ┆ 100 │ #> │ b   ┆ 101 │ #> │ b   ┆ 101 │ #> └─────┴─────┘  uncount(test, n, .id = \"id\") #> shape: (3, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ id  │ #> │ --- ┆ --- ┆ --- │ #> │ str ┆ i32 ┆ u32 │ #> ╞═════╪═════╪═════╡ #> │ a   ┆ 100 ┆ 1   │ #> │ b   ┆ 101 ┆ 1   │ #> │ b   ┆ 101 ┆ 2   │ #> └─────┴─────┴─────┘  # using constants uncount(test, 2) #> shape: (4, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ n   │ #> │ --- ┆ --- ┆ --- │ #> │ str ┆ i32 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ a   ┆ 100 ┆ 1.0 │ #> │ a   ┆ 100 ┆ 1.0 │ #> │ b   ┆ 101 ┆ 2.0 │ #> │ b   ┆ 101 ┆ 2.0 │ #> └─────┴─────┴─────┘  # using expressions uncount(test, 2 / n) #> shape: (3, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ n   │ #> │ --- ┆ --- ┆ --- │ #> │ str ┆ i32 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ a   ┆ 100 ┆ 1.0 │ #> │ a   ┆ 100 ┆ 1.0 │ #> │ b   ┆ 101 ┆ 2.0 │ #> └─────┴─────┴─────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/unite.polars_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite multiple columns into one by pasting strings together — unite.polars_data_frame","title":"Unite multiple columns into one by pasting strings together — unite.polars_data_frame","text":"Unite multiple columns one pasting strings together","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/unite.polars_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite multiple columns into one by pasting strings together — unite.polars_data_frame","text":"","code":"# S3 method for class 'polars_data_frame' unite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)  # S3 method for class 'polars_lazy_frame' unite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)"},{"path":"https://tidypolars.etiennebacher.com/reference/unite.polars_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite multiple columns into one by pasting strings together — unite.polars_data_frame","text":"data Polars Data/LazyFrame col name new column, string symbol. ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. sep Separator use values. remove TRUE, remove input columns output Data/LazyFrame. na.rm TRUE, missing values replaced empty string prior uniting value.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/unite.polars_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite multiple columns into one by pasting strings together — unite.polars_data_frame","text":"","code":"test <- polars::pl$DataFrame(   year = 2009:2011,   month = 10:12,   day = c(11L, 22L, 28L),   name_day = c(\"Monday\", \"Thursday\", \"Wednesday\") )  # By default, united columns are dropped unite(test, col = \"full_date\", year, month, day, sep = \"-\") #> shape: (3, 2) #> ┌───────────┬────────────┐ #> │ name_day  ┆ full_date  │ #> │ ---       ┆ ---        │ #> │ str       ┆ str        │ #> ╞═══════════╪════════════╡ #> │ Monday    ┆ 2009-10-11 │ #> │ Thursday  ┆ 2010-11-22 │ #> │ Wednesday ┆ 2011-12-28 │ #> └───────────┴────────────┘ unite(test, col = \"full_date\", year, month, day, sep = \"-\", remove = FALSE) #> shape: (3, 5) #> ┌──────┬───────┬─────┬───────────┬────────────┐ #> │ year ┆ month ┆ day ┆ name_day  ┆ full_date  │ #> │ ---  ┆ ---   ┆ --- ┆ ---       ┆ ---        │ #> │ i32  ┆ i32   ┆ i32 ┆ str       ┆ str        │ #> ╞══════╪═══════╪═════╪═══════════╪════════════╡ #> │ 2009 ┆ 10    ┆ 11  ┆ Monday    ┆ 2009-10-11 │ #> │ 2010 ┆ 11    ┆ 22  ┆ Thursday  ┆ 2010-11-22 │ #> │ 2011 ┆ 12    ┆ 28  ┆ Wednesday ┆ 2011-12-28 │ #> └──────┴───────┴─────┴───────────┴────────────┘  test2 <- polars::pl$DataFrame(   name = c(\"John\", \"Jack\", \"Thomas\"),   middlename = c(\"T.\", NA, \"F.\"),   surname = c(\"Smith\", \"Thompson\", \"Jones\") )  # By default, NA values are kept in the character output unite(test2, col = \"full_name\", everything(), sep = \" \") #> shape: (3, 1) #> ┌──────────────────┐ #> │ full_name        │ #> │ ---              │ #> │ str              │ #> ╞══════════════════╡ #> │ John T. Smith    │ #> │ Jack NA Thompson │ #> │ Thomas F. Jones  │ #> └──────────────────┘ unite(test2, col = \"full_name\", everything(), sep = \" \", na.rm = TRUE) #> shape: (3, 1) #> ┌─────────────────┐ #> │ full_name       │ #> │ ---             │ #> │ str             │ #> ╞═════════════════╡ #> │ John T. Smith   │ #> │ Jack  Thompson  │ #> │ Thomas F. Jones │ #> └─────────────────┘"},{"path":"https://tidypolars.etiennebacher.com/reference/write_csv_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data to CSV file(s) — write_csv_polars","title":"Export data to CSV file(s) — write_csv_polars","text":"Export data CSV file(s)","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_csv_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data to CSV file(s) — write_csv_polars","text":"","code":"write_csv_polars(   .data,   file,   ...,   include_bom = FALSE,   include_header = TRUE,   separator = \",\",   line_terminator = \"\\n\",   quote_char = \"\\\"\",   batch_size = 1024,   datetime_format = NULL,   date_format = NULL,   time_format = NULL,   float_precision = NULL,   null_value = \"\",   quote_style = \"necessary\",   quote,   null_values )"},{"path":"https://tidypolars.etiennebacher.com/reference/write_csv_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data to CSV file(s) — write_csv_polars","text":".data Polars DataFrame. file File path result written. ... Ignored. include_bom Whether include UTF-8 BOM (byte order mark) CSV output. include_header Whether include header CSV output. separator Separate CSV fields symbol. line_terminator String used end row. quote_char Byte use quoting character. batch_size Number rows processed per thread. datetime_format format string, specifiers defined chrono Rust crate. format specified, default fractional-second precision inferred maximum timeunit found frame’s Datetime cols (). date_format format string, specifiers defined chrono Rust crate. time_format format string, specifiers defined chrono Rust crate. float_precision Number decimal places write, applied Float32 Float64 datatypes. null_value string representing null values (defaulting empty string). quote_style Determines quoting strategy used. \"necessary\" (default): puts quotes around fields necessary. necessary fields contain quote, delimiter record terminator. Quotes also necessary writing empty record (indistinguishable record one empty field). default. \"always\": puts quotes around every field. \"non_numeric\": puts quotes around fields non-numeric. Namely, writing field parse valid float integer, quotes used even aren`t strictly necessary. \"never\": never puts quotes around fields, even results invalid CSV data (e.g. quoting strings containing separator). quote Deprecated, use quote_char instead. null_values Deprecated, use null_value instead.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_csv_polars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data to CSV file(s) — write_csv_polars","text":"input DataFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_csv_polars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export data to CSV file(s) — write_csv_polars","text":"","code":"dest <- tempfile(fileext = \".csv\") mtcars |>   as_polars_df() |>   write_csv_polars(dest)  read.csv(dest) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://tidypolars.etiennebacher.com/reference/write_ipc_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data to IPC file(s) — write_ipc_polars","title":"Export data to IPC file(s) — write_ipc_polars","text":"Export data IPC file(s)","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_ipc_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data to IPC file(s) — write_ipc_polars","text":"","code":"write_ipc_polars(   .data,   file,   compression = \"uncompressed\",   ...,   compat_level = \"newest\",   future )"},{"path":"https://tidypolars.etiennebacher.com/reference/write_ipc_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data to IPC file(s) — write_ipc_polars","text":".data Polars DataFrame. file File path result written. compression NULL character compression method, \"uncompressed\" \"lz4\" \"zstd\". NULL equivalent \"uncompressed\". Choose \"zstd\" good compression performance. Choose \"lz4\" fast compression/decompression. ... Ignored. compat_level Determines compatibility level exporting Polars' internal data structures. specifying new compatibility level, Polars exports internal data structures might interpretable Arrow implementations. level can specified name (e.g., \"newest\") scalar integer (currently, 0 1 supported). \"newest\" (default): Use highest level, currently 1 (Low compatibility). \"oldest\": 0 (High compatibility). future Deprecated, use compat_level instead.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_ipc_polars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data to IPC file(s) — write_ipc_polars","text":"input DataFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_json_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data to JSON file(s) — write_json_polars","title":"Export data to JSON file(s) — write_json_polars","text":"Export data JSON file(s)","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_json_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data to JSON file(s) — write_json_polars","text":"","code":"write_json_polars(.data, file, ..., pretty = FALSE, row_oriented = FALSE)"},{"path":"https://tidypolars.etiennebacher.com/reference/write_json_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data to JSON file(s) — write_json_polars","text":".data Polars DataFrame. file File path result written. ... Ignored. pretty Deprecated replacement. row_oriented Deprecated replacement.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_json_polars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data to JSON file(s) — write_json_polars","text":"input DataFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_json_polars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export data to JSON file(s) — write_json_polars","text":"","code":"dest <- tempfile(fileext = \".json\") mtcars |>   as_polars_df() |>   write_json_polars(dest)  jsonlite::fromJSON(dest) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://tidypolars.etiennebacher.com/reference/write_ndjson_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data to NDJSON file(s) — write_ndjson_polars","title":"Export data to NDJSON file(s) — write_ndjson_polars","text":"Export data NDJSON file(s)","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_ndjson_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data to NDJSON file(s) — write_ndjson_polars","text":"","code":"write_ndjson_polars(.data, file)"},{"path":"https://tidypolars.etiennebacher.com/reference/write_ndjson_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data to NDJSON file(s) — write_ndjson_polars","text":".data Polars DataFrame. file File path result written.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_ndjson_polars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data to NDJSON file(s) — write_ndjson_polars","text":"input DataFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_ndjson_polars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export data to NDJSON file(s) — write_ndjson_polars","text":"","code":"dest <- tempfile(fileext = \".ndjson\") mtcars |>   as_polars_df() |>   write_ndjson_polars(dest)  jsonlite::stream_in(file(dest), verbose = FALSE) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://tidypolars.etiennebacher.com/reference/write_parquet_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data to Parquet file(s) — write_parquet_polars","title":"Export data to Parquet file(s) — write_parquet_polars","text":"Export data Parquet file(s)","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_parquet_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data to Parquet file(s) — write_parquet_polars","text":"","code":"write_parquet_polars(   .data,   file,   ...,   compression = \"zstd\",   compression_level = 3,   statistics = TRUE,   row_group_size = NULL,   data_page_size = NULL,   partition_by = NULL,   partition_chunk_size_bytes = 4294967296 )"},{"path":"https://tidypolars.etiennebacher.com/reference/write_parquet_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data to Parquet file(s) — write_parquet_polars","text":".data Polars DataFrame. file File path result written. ... Ignored. compression compression method. One : \"uncompressed\" \"zstd\" (default): good compression performance \"lz4\": fast compression / decompression \"snappy\": backwards compatibility guarantees deal older parquet readers. \"gzip\", \"lzo\", \"brotli\" compression_level level compression use (default 3). used compression one \"gzip\", \"brotli\", \"zstd\". Higher compression means smaller files disk. \"gzip\" : min-level = 0, max-level = 10 \"brotli\" : min-level = 0, max-level = 11 \"zstd\" : min-level = 1, max-level = 22. statistics Whether compute write column statistics (default FALSE). requires computations. row_group_size Size row groups number rows. NULL (default), chunks DataFrame used. Writing smaller chunks may reduce memory pressure improve writing speeds. data_page_size NULL (default), limit around 1MB. partition_by Column(s) partition . partitioned dataset written specified. partition_chunk_size_bytes Approximate size split DataFrames within single partition writing. Note calculated using size DataFrame memory - size output file may differ depending file format / compression.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_parquet_polars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data to Parquet file(s) — write_parquet_polars","text":"input DataFrame.","code":""},{"path":"https://tidypolars.etiennebacher.com/reference/write_parquet_polars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export data to Parquet file(s) — write_parquet_polars","text":"","code":"dest <- tempfile(fileext = \".parquet\") mtcars |>   as_polars_df() |>   write_parquet_polars(dest)  nanoparquet::read_parquet(dest) #> # A data frame: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows"},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars (development version)","text":"Add partial support stringr::str_equal() (#228). New argument mkdir sink_*() functions recursively create folder(s) specified path(s) files (#236). New functions partition_by_key() partition_by_max_size() can used path argument sink_*() functions. enable writing LazyFrame several files partitioned output. See details ?sink_parquet() (#237).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars (development version)","text":"Better error message group_by() unsupported argument .drop (#230). Better error message group_by() passing named expressions .... dplyr supports recommended use ./ argument individual functions rather using group_by() ungroup() (#238). Better error message count() passing named expressions ... (#239).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"documentation-development-version","dir":"Changelog","previous_headings":"","what":"Documentation","title":"tidypolars (development version)","text":"New vignette “benchmark tidypolars” (#232). Better documentation read_*() scan_*() functions (#241).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-0141","dir":"Changelog","previous_headings":"","what":"tidypolars 0.14.1","title":"tidypolars 0.14.1","text":"tidypolars requires polars >= 1.1.0 (#222).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-14-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.14.1","text":"Fix corner case filter() used custom function missing arguments (#220). grepl(), argument fixed now used correctly (thanks @gernophil report, #223). if_else() ifelse() now work using named arguments (#224).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-0140","dir":"Changelog","previous_headings":"","what":"tidypolars 0.14.0","title":"tidypolars 0.14.0","text":"tidypolars requires polars >= 1.0.0. release polars contains many breaking changes. invisible tidypolars users, exception deprecation messages (see ). However, code contains user-defined functions use polars syntax, may need revise (#194).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"deprecations-and-breaking-changes-0-14-0","dir":"Changelog","previous_headings":"","what":"Deprecations and breaking changes","title":"tidypolars 0.14.0","text":"following arguments deprecated removed future version. recommended replacement indicated right arrow (#194): compute() collect(): streaming -> engine; dtypes -> schema_overrides reuse_downloaded -> replacement reuse_downloaded -> replacement memory_map -> replacement null_values -> null_value quote -> quote_char pretty -> replacement row_oriented -> replacement future -> compat_level fetch() deprecated, use head() collect() instead (#194). group_keys() now returns tibble data.frame anymore (#194). lubridate::make_date(), lubridate::make_datetime(), ISOdatetime() now error components go expected range, e.g. month = 20 hour = 25. , functions returning NA situation (#194). summary() returns additional row 50% percentile (#194).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-14-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.14.0","text":"Added support various lubridate functions: force_tz() with_tz() (@atsyplenkov, #170); date() (@atsyplenkov, #181); today() now() (#183); weeks(), days(), hours(), minutes(), seconds(), milliseconds(), microseconds(), nanoseconds() (#184). tidypolars can now use expressions contain non-translated functions expressions use columns data. Example: agrep() translated function used error: However, see agrep(\"\", ) doesn’t use column instead object environment can evaluated without caring whether tidypolars knows function : Note evaluated running polars background expression can’t benefit polars parallel evaluation instance. Thanks @mgacc0 suggestion. Add support .Date() character columns (#190). Error messages due untranslated functions now suggest opening issue ask translation (#197). Add support %>% expressions (#200). Add support dplyr::tally() (#203). count() add_count() now warn error argument wt used since supported. behavior depends global option tidypolars_unknown_args (#204). tidypolars experimental support fallback R function internally translated polars syntax. default behavior still error, user can now set options(tidypolars_fallback_to_r = TRUE) handle unknown functions. See ?tidypolars_options details drawbacks approach (#205). Large performance improvement using selection helpers (contains()) data many columns (#211). tidypolars now exports rules used flir detecting deprecated functions describe_plan() describe_optimized_plan(). can used project following article. Note requires flir 0.5.0.9000 higher (#214).","code":"dat <- pl$DataFrame(foo = c(2, 1, 2)) a <- c(\"d\", \"e\", \"f\") dat |>   filter(foo >= agrep(\"a\", a)) Error in `filter()`: ! `tidypolars` doesn't know how to translate this function: `agrep()`. shape: (1, 1) ┌─────┐ │ foo │ │ --- │ │ f64 │ ╞═════╡ │ 2.0 │ └─────┘"},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-14-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.14.0","text":"Fix behavior mutate() summarize() don’t contain expression (#191). Fix error count() includes grouping variables (#193). Passing . anonymous function across() now works (#216).","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-13-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.13.0","text":"Added support stringr::str_replace_na() (#153). Better checks unknown unsupported arguments compute(), collect(), *_join(), pivot_*(), sink_*(), slice_sample() uncount()(#158, thanks @fkohrt report). Now, functions receive: argument exists tidyverse implementation supported tidypolars, warn user. default behaviour can changed error instead options(tidypolars_unknown_args = \"error\"). argument doesn’t exist , error. Add support argument explicit tidyr::complete(). Add option keep track filenames scan_csv_polars() (#171, @ginolhac). Add partial support seq() (argument length.supported) seq_len(). complete() now accepts named elements, e.g. complete(df, group, value = 1:4) (#176). Add support several lubridate functions: (), pm(), leap_year(), days_in_month() (#178);","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-13-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.13.0","text":"Fix edge cases tidypolars implementation stringr::str_sub() substr() compared original implementation (#159). arrange() now places NA values last, like dplyr.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-0120","dir":"Changelog","previous_headings":"","what":"tidypolars 0.12.0","title":"tidypolars 0.12.0","text":"tidypolars requires polars >= 0.21.0.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"breaking-changes-0-12-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidypolars 0.12.0","text":"summarize() now drops last group output default (consistency dplyr). Previously kept groups input data (#149).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-12-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.12.0","text":"Add support argument .groups summarize(). Value \"rowwise\" supported now (#149). Added support dplyr::lead(). dplyr::lead() dplyr::lag(), arguments default order_by now supported (#151).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-0110","dir":"Changelog","previous_headings":"","what":"tidypolars 0.11.0","title":"tidypolars 0.11.0","text":"tidypolars requires polars >= 0.20.0.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"breaking-changes-0-11-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidypolars 0.11.0","text":"arrange() now errors unknown variable names (like dplyr::arrange()). Previously, unknown variables silently ignored. Using expressions (like + b) now accepted (#144). parameter inherit_optimization removed sink_*() functions.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-11-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.11.0","text":"power operators ^ ** now work. New function sink_ndjson() write results lazy query NDJSON file without collecting memory. inner_join() now accepts inequality joins argument, including following helpers: (), overlaps(), within() (#148).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-11-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.11.0","text":"Using external object case_when(), ifelse() ifelse() now works. str_sub() doesn’t error anymore start positive end negative. read_*_polars() functions used return standard data.frame mistake. now return Polars DataFrame. Using [ subsetting expressions now works. Thanks @ginolhac report (#141). bind_cols_polars() bind_rows_polars() now error (expected ) elements mix Polars DataFrames LazyFrames.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-10-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.10.1","text":"error handling columns datatype Null. Note converting columns R .data.frame(), as_tibble(), collect() still issue polars 0.19.1.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-0100","dir":"Changelog","previous_headings":"","what":"tidypolars 0.10.0","title":"tidypolars 0.10.0","text":"tidypolars requires polars >= 0.19.1.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"breaking-changes-and-deprecations-0-10-0","dir":"Changelog","previous_headings":"","what":"Breaking changes and deprecations","title":"tidypolars 0.10.0","text":"describe() deprecated tidypolars 0.10.0 removed future update. Use summary() arguments instead (#127). describe_plan() describe_optimized_plan() deprecated tidypolars 0.10.0 removed future update. Use explain() optimized = TRUE/FALSE instead (#128). sink_parquet() sink_csv(), arguments except .data path must named (#136).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-10-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.10.0","text":"Add support functions: package base: substr(). Better error message function can come several packages one version translated (#130). row_number() now works without argument (#131). New functions import data Polars DataFrames LazyFrames (#136): read_<format>_polars() import data Polars DataFrame; scan_<format>_polars() import data Polars LazyFrame; <format> can “csv”, “ipc”, “json”, “parquet”. can replace functions polars. example, polars::pl$read_parquet(...) can replaced read_parquet_polars(...). New functions write Polars DataFrames external files: write_<format>_polars() <format> can “csv”, “ipc”, “json”, “ndjson”, “parquet” (#136). New function sink_ipc() similar sink_parquet() sink_csv() IPC files (#136). across() now throws better error message user passes external list .fns. works dplyr work tidypolars (#135). Added support argument .add group_by().","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.10.0","text":"stringr::str_sub() now works start end negative. Fixed bug str_sub() start greater 1. stringr::str_starts() stringr::str_ends() now work regex. fill() doesn’t error anymore ... empty. Instead, returns input data. unite() now provides proper error message col missing. unite() doesn’t error anymore ... empty. Instead, uses variables dataset. filter(), mutate() summarize() now work using column another data.frame, e.g. replace_na() longer converts column datatype replacement, e.g. data |> replace_na(\"\") error input data numeric. n_distinct() now correctly applies na.rm argument several columns passed input (#137).","code":"my_polars_df |>   filter(x %in% some_data_frame$y)"},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-090","dir":"Changelog","previous_headings":"","what":"tidypolars 0.9.0","title":"tidypolars 0.9.0","text":"tidypolars requires polars >= 0.18.0.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.9.0","text":"Add support several functions: package base: %% %/%. package dplyr: dense_rank(), row_number(). package lubridate: wday(). Better handling missing values match R behavior. following functions, least one missing value na.rm = FALSE (default), output NA: max(), mean(), median(), min(), sd(), sum(), var() (#120). New argument cluster_with_columns collect(), compute(), fetch(). Add global option tidypolars_unknown_args control happens tidypolars doesn’t know handle argument function. default warn accepted value \"error\".","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.9.0","text":"count() add_count() longer overwrite variable named n argument name unspecified.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-080","dir":"Changelog","previous_headings":"","what":"tidypolars 0.8.0","title":"tidypolars 0.8.0","text":"tidypolars requires polars >= 0.17.0.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"breaking-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidypolars 0.8.0","text":"announced tidypolars 0.7.0, behavior collect() changed. now returns standard R data.frame Polars DataFrame anymore. Replace collect() compute() (arguments) keep old behavior. bind_rows_polars(), .id passed, resulting column now type character instead integer.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.8.0","text":"Add support several functions: package base: (), (), diff(), ISOdatetime(), length(), rev(), unique(). package dplyr: consecutive_id(), min_rank(), na_if(), n_distinct(), nth(). package lubridate: make_datetime(). package stringr: str_dup(), str_split(), str_split_i(), str_trunc(). package tidyr: replace_na() (data.frame method already translated vector one can used mutate() example). now possible use explicit namespaces (dplyr::first() instead first()) mutate(), summarize() filter() (#114). bind_rows_polars(), elements named .id specified, .id column use names elements (#116). now possible rename variables select() (#117). Add support argument na_matches join functions (except cross_join() doesn’t need ) (#109).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.8.0","text":"Local variables custom functions used tidypolars functions (reported blog post Art Steinmetz). now fixed. across() now works .cols contains one variable .fns contains one function. across(), .cols argument now takes account variables created mutate() summarize() call across(). Note () function supported . example: return 0 variable foo. warning emitted behavior. Better handling negative values c() called mutate() summarize().","code":"as_polars_df(mtcars) |>   head(n = 3) |>   mutate(     foo = 1,     across(.cols = contains(\"oo\"), \\(x) x - 1)   )  shape: (3, 12) ┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬─────┐ │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ foo │ │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ --- │ │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ f64 │ ╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪═════╡ │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 0.0 │ │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 0.0 │ │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 4.0  ┆ 1.0  ┆ 0.0 │ └──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴─────┘ as_polars_df(mtcars) |>   mutate(     foo = 1,     across(.cols = where(is.numeric), \\(x) x - 1)   )"},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-070","dir":"Changelog","previous_headings":"","what":"tidypolars 0.7.0","title":"tidypolars 0.7.0","text":"tidypolars requires polars >= 0.16.0.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"breaking-changes-and-deprecations-0-7-0","dir":"Changelog","previous_headings":"","what":"Breaking changes and deprecations","title":"tidypolars 0.7.0","text":"as_polars() now removed. deprecated 0.6.0. Use as_polars_df() as_polars_lf() instead. to_r() now removed. deprecated 0.6.0. Use .data.frame() as_tibble() instead. consistency dplyr, behavior collect() change 0.8.0 perform lazy query convert result standard data.frame. now, collect() throws warning future change. recommended use compute() perform query get Polars DataFrame output (#101).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.7.0","text":"Several improvements changes pivot_wider() (#95): names_from can now takes several variables; add support id_cols names_glue; default value names_sep now _, consistency tidyr; fix documentation pivot_wider() doesn’t work LazyFrame. Add support stringr::regex(). Note argument ignore_case supported now (#97). Add support several lubridate functions: dweeks(), ddays(), dhours(), dminutes(), dseconds(), dmilliseconds(), make_date() (#107). polars function called internally fails, original error message now displayed. Add support group_split() (DataFrame ). Add support argument relationship left_join(), right_join(), full_join() inner_join() (#106).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-060","dir":"Changelog","previous_headings":"","what":"tidypolars 0.6.0","title":"tidypolars 0.6.0","text":"tidypolars requires polars >= 0.15.0.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"breaking-changes-and-deprecations-0-6-0","dir":"Changelog","previous_headings":"","what":"Breaking changes and deprecations","title":"tidypolars 0.6.0","text":"as_polars() deprecated removed 0.7.0. Use as_polars_lf() as_polars_df() instead. as_polars() doesn’t argument with_string_cache anymore. set TRUE, enabled string cache globally, lead undesirable side effects. to_r() deprecated removed 0.7.0. Use .data.frame() as_tibble() instead. used silently return LazyFrame input LazyFrame. now automatically collects LazyFrame (#88). pull() nows automatically collects input LazyFrame (#89).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.6.0","text":"Add support argument .keep mutate() (#80). Add support group_vars() group_keys() (#81). Experimental support rowwise(). now, limited functions: mean(), median(), min(), max(), sum(), (), (). rowwise() group_by() used time (#40). functions return polars Data/LazyFrame now add class \"tidypolars\" output (#86). Support .min(), .max(), dplyr::n(). Support .data[[ .env[[ addition .data$ .env$. Better error messages objects specified .data .env don’t exist.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.6.0","text":"pull() now errors var length > 1.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-050","dir":"Changelog","previous_headings":"","what":"tidypolars 0.5.0","title":"tidypolars 0.5.0","text":"tidypolars requires polars >= 0.12.0.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"breaking-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidypolars 0.5.0","text":"across() now errors argument .cols provided (either named unnamed). behavior deprecated dplyr 1.1.0. longer possible use ! arrange() sort decreasing order, compatibility dplyr::arrange(). Use - desc() instead.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.5.0","text":"summarize() now works ungrouped data returns 1-row output. now possible use desc(x1) arrange() sort decreasing order x1 (equivalent -x1). Add support argument names_prefix pivot_longer(). Add support arguments names_prefix names_sep pivot_wider(). Add support tidyr::uncount(). *_join() functions now work specification created dplyr::join_by(). Notice limited equality joins now. can now use “embrace” operator {{ }} pass unquoted column names (among things) arguments custom functions. See “Programming dplyr” vignette examples. bind_cols_polars() now works two LazyFrames, . Add support argument .name_repair bind_cols_polars() (#74). Support .env$ .data$ pronouns expressions filter(), mutate() summarize(). Support named vector argument pattern str_replace_all(), names patterns values replacements. Using %% factor variables doesn’t require enabling string cache anymore.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.5.0","text":"summarize() longer errors across(everything(), ...) used .. *_join() functions longer error named vector provided argument . Expressions values named “literal” anymore.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"misc-0-5-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"tidypolars 0.5.0","text":"Simplify procedure support new functions.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-040","dir":"Changelog","previous_headings":"","what":"tidypolars 0.4.0","title":"tidypolars 0.4.0","text":"tidypolars requires polars >= 0.11.0.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidypolars 0.4.0","text":"longer possible pass list rename().","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.4.0","text":"argument with_string_cache as_polars() now enables string cache globally set TRUE (#54). Better error message filter() comparing factors strings string cache disabled. Basic support strptime(). possible use strptime(*, strict = FALSE) error parsing characters fails. New argument .filter(), mutate(), summarize(), new argument slice_*() functions. allows operations groups without using group_by() ungroup(). See dplyr vignette information (#59). rename() now accepts unquoted names old new names. Support fixed regexes str_detect() (using fixed()) grepl() (using fixed = TRUE).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.4.0","text":"Improve robustness sequential expressions mutate() summarize() (.e expressions run one depend variables created call) (#58). relocate() now works correctly .= last_col(). functions work grouped data now correctly restore groups structure (#62).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"misc-0-4-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"tidypolars 0.4.0","text":"Error messages coming mutate(), summarize(), filter() now give right function call. Faster tidy selection (#61).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-030","dir":"Changelog","previous_headings":"","what":"tidypolars 0.3.0","title":"tidypolars 0.3.0","text":"tidypolars requires polars >= 0.10.0.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidypolars 0.3.0","text":"functions starting pl_ removed benefit S3 methods. example, pl_distinct() doesn’t exist anymore way use load dplyr use distinct() Polars DataFrame LazyFrame. avoid confusion compatibility dplyr tidyr. See #49 detailed explanation. pl_bind_rows() pl_bind_cols() renamed bind_rows_polars() bind_cols_polars() respectively. bind_rows() bind_cols() S3 methods (might change future versions dplyr).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.3.0","text":"New function duplicated_rows() opposite distinct() (#50). New argument .id bind_rows_polars(). bind_rows_polars() can now bind Data/LazyFrames don’t schema. Columns upcast common types necessary. Unknown columns filled NA.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.3.0","text":"complete() now works correctly grouped data.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"misc-0-3-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"tidypolars 0.3.0","text":"relig_income fish_encounters reexported anymore since tidyr now imported.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-020","dir":"Changelog","previous_headings":"","what":"tidypolars 0.2.0","title":"tidypolars 0.2.0","text":"tidypolars requires polars >= 0.9.0.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.2.0","text":"Rename pl_fetch() fetch(). New functions supported: describe(), sink_csv(), slice_sample(). New argument fill pl_complete(). Support stringr::str_to_title() tools::toTitleCase(). Support stringr::fixed() use literal strings. Support replacements captured groups like \\\\1 stringr::str_replace() stringr::str_replace_all().","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.2.0","text":"sink_parquet() didn’t use user inputs (apart path).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"misc-0-2-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"tidypolars 0.2.0","text":"Clearer error message expression contains <pkg>::. supported now potentially implemented later. pl_colnames() longer exported.","code":""},{"path":[]},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidypolars 0.1.0","text":"Support .numeric(), .character(), .logical(), grepl(), paste() expressions pl_filter(), pl_mutate() pl_summarize(). Support sink_parquet() (#38). Support fetch() (#42). Support additional stringr functions: str_detect(), str_extract_all(), str_pad(), str_squish(), str_trim(), word() (arguments corner cases supported yet). Add optimization parameters collect().","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidypolars 0.1.0","text":"Fix pl_mutate() pl_summarize() expressions use variables previously created modified (#10, #37). Fix bug pl_filter() passing vector RHS %%.","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"misc-0-1-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"tidypolars 0.1.0","text":"Improve backend translate R expressions Polars expressions. also led complete rewriting vignette “R Polars expressions” (#27). Error messages now report correct function call. Improve CI coverage (#35).","code":""},{"path":"https://tidypolars.etiennebacher.com/news/index.html","id":"tidypolars-001","dir":"Changelog","previous_headings":"","what":"tidypolars 0.0.1","title":"tidypolars 0.0.1","text":"First Github release.","code":""}]
