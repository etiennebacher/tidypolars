[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidypolars authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/faq.html","id":"is-tidypolars-slower-than-polars","dir":"Articles","previous_headings":"","what":"Is tidypolars slower than polars?","title":"FAQ","text":", just marginally. objective tidypolars modify data, simply translate tidyverse syntax polars syntax. polars still charge data manipulations hood. Therefore, might minor overhead still need parse expressions rewrite polars syntax (see Parsing expressions vignette) extremely marginal.","code":""},{"path":"/articles/faq.html","id":"am-i-stuck-with-tidypolars","dir":"Articles","previous_headings":"","what":"Am I stuck with tidypolars?","title":"FAQ","text":", tidypolars always return DataFrames, LazyFrames Series. Therefore, point want use polars need control want reduce number dependencies, can easily .","code":""},{"path":"/articles/faq.html","id":"do-i-still-need-to-load-polars","dir":"Articles","previous_headings":"","what":"Do I still need to load polars?","title":"FAQ","text":"Yes, tidypolars doesn’t provide functions create polars DataFrame LazyFrame read data. ’ll still need use polars .","code":""},{"path":"/articles/faq.html","id":"can-i-see-some-benchmarks","dir":"Articles","previous_headings":"","what":"Can I see some benchmarks?","title":"FAQ","text":"Making accurate benchmarks data wrangling tools difficult won’t try . refer DuckDB benchmarks. benchmarks mostly useful show polars tidypolars equivalent terms performance.","code":"library(polars) library(tidypolars) #> Registered S3 method overwritten by 'tidypolars': #>   method          from   #>   print.DataFrame polars library(dplyr, warn.conflicts = FALSE)  pl_test <- pl$DataFrame(   grp = sample(letters, 1e7, TRUE),   val1 = sample(1:1000, 1e7, TRUE),   val2 = sample(1:1000, 1e7, TRUE) )  bench::mark(   polars = pl_test$     group_by(\"grp\")$     agg(       pl$col('val1')$mean()$alias('x'),        pl$col('val2')$sum()$alias('y')     ),   tidypolars = pl_test |>      group_by(grp) |>      summarize(       x = mean(val1),       y = sum(val2)     ),   check = FALSE,   iterations = 15 ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 polars        108ms    179ms      4.15    68.5KB    0     #> 2 tidypolars    112ms    191ms      4.91     1.8MB    0.350  bench::mark(   polars = pl_test$     filter(pl$col(\"grp\") == \"a\" | pl$col(\"grp\") == \"b\"),   tidypolars = pl_test |>      filter(grp == \"a\" | grp == \"b\"),   check = FALSE,   iterations = 15 ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 polars        274ms    454ms      1.99    25.7KB        0 #> 2 tidypolars    300ms    385ms      2.37    63.6KB        0"},{"path":"/articles/r-and-polars-expressions.html","id":"how-does-tidypolars-translate-r-expressions-into-polars-expressions","dir":"Articles","previous_headings":"","what":"How does tidypolars translate R expressions into Polars expressions?","title":"R and Polars expressions","text":"tidypolars receives expression, runs function translate() several times components translated Polars equivalent. four possible components: single values, column names, external objects, functions.","code":""},{"path":"/articles/r-and-polars-expressions.html","id":"single-values-column-names-and-external-objects","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions?","what":"Single values, column names, and external objects","title":"R and Polars expressions","text":"pass single value, like x = 1 x = \"\", wrapped pl$lit(). also case external objects difference need wrapped {{ }} evaluated wrapped pl$lit(). Column names, like x = mpg, wrapped pl$col().","code":"x = \"a\"               ->  x = pl$lit(\"a\") x = {{ some_value }}  ->  x = pl$lit(*value*) x = mpg               ->  x = pl$col(\"mpg\")"},{"path":"/articles/r-and-polars-expressions.html","id":"functions","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions?","what":"Functions","title":"R and Polars expressions","text":"Functions split two categories: built-functions (.e functions provided base R packages), user-defined functions (UDF) written user ().","code":""},{"path":"/articles/r-and-polars-expressions.html","id":"built-in-functions","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions? > Functions","what":"Built-in functions","title":"R and Polars expressions","text":"first case, tidypolars checks function name whether ’s equivalent function Polars. example, R function sd(x, na.rm = TRUE) converted std(x, na.rm = TRUE). Since R Polars functions often don’t share name, check relies custom list containing equivalencies R Polars functions. can see list supported R functions bottom vignette. Note essential base R functions supported, also functions dplyr stringr example. , replacing R’s sd() function std() enough argument x (usually variable dataset) right format used Polars. Therefore, tidypolars calls translate() second time inside function. now std(pl$col(\"x\"))1. end example, need see happens additional arguments. can see didn’t modify na.rm = TRUE now. Polars doesn’t argument std() (automatically drops missing values). Internally, tidypolars checks whether additional arguments accepted throws message case:","code":"library(tidypolars) #> Registered S3 method overwritten by 'tidypolars': #>   method          from   #>   print.DataFrame polars library(polars)  mtcars |>    as_polars() |>    mutate(x = sd(mpg, na.rm = TRUE)) #> Warning:  #> Not all arguments of std() are used by Polars. #> The following argument(s) will not be used: `na.rm`. #> shape: (32, 12) #> ┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬──────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ x        │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---      │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ f64      │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪══════════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 6.026948 │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 6.026948 │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 4.0  ┆ 1.0  ┆ 6.026948 │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 1.0  ┆ 6.026948 │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …    ┆ …    ┆ …        │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 4.0  ┆ 6.026948 │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 6.0  ┆ 6.026948 │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 8.0  ┆ 6.026948 │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 2.0  ┆ 6.026948 │ #> └──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴──────────┘"},{"path":"/articles/r-and-polars-expressions.html","id":"user-defined-functions","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions? > Functions","what":"User-defined functions","title":"R and Polars expressions","text":"User-defined functions (UDF) challenging. Indeed, technically possible inspect code inside UDF, rewriting match Polars syntax extremely complicated. situation, rewrite custom function using Polars syntax returns Polars expression. example, make function standardize column like : Remember column name used x end wrapped pl$col(), check function returns Polars expression, provide pl$col() call: function correctly returns Polars expression, can now use like function:","code":"pl_standardize <- function(x) {   (x - x$mean()) / x$std() } pl_standardize(pl$col(\"mpg\")) #> polars Expr: [([(col(\"mpg\")) - (col(\"mpg\").mean())]) // (col(\"mpg\").std())] mtcars |>    as_polars() |>    mutate(x = pl_standardize(mpg)) #> shape: (32, 12) #> ┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬───────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ x         │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---       │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ f64       │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪═══════════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 0.150885  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 0.150885  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 4.0  ┆ 1.0  ┆ 0.449543  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 1.0  ┆ 0.217253  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …    ┆ …    ┆ …         │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 4.0  ┆ -0.711907 │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 6.0  ┆ -0.064813 │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 8.0  ┆ -0.844644 │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 2.0  ┆ 0.217253  │ #> └──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴───────────┘"},{"path":"/articles/r-and-polars-expressions.html","id":"special-case-across","dir":"Articles","previous_headings":"How does tidypolars translate R expressions into Polars expressions? > Functions","what":"Special case: across()","title":"R and Polars expressions","text":"across() useful function applies function (list functions) selection columns. accepts built-functions, UDFs, anonymous functions. Similarly, UDFs anonymous functions error don’t return Polars expression:","code":"mtcars |>    as_polars() |>    mutate(     across(       .cols = contains(\"a\"),       list(mean = mean, stand = pl_standardize, ~ sd(.x))     )   ) #> shape: (32, 23) #> ┌──────┬─────┬───────┬───────┬───┬──────────┬───────────┬────────────┬────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ gear_3   ┆ carb_mean ┆ carb_stand ┆ carb_3 │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ ---      ┆ ---       ┆ ---        ┆ ---    │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64      ┆ f64       ┆ f64        ┆ f64    │ #> ╞══════╪═════╪═══════╪═══════╪═══╪══════════╪═══════════╪════════════╪════════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ 0.735203   ┆ 1.6152 │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ 0.735203   ┆ 1.6152 │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 0.737804 ┆ 2.8125    ┆ -1.122152  ┆ 1.6152 │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ -1.122152  ┆ 1.6152 │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …        ┆ …         ┆ …          ┆ …      │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ 0.735203   ┆ 1.6152 │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ 1.97344    ┆ 1.6152 │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ 3.211677   ┆ 1.6152 │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 0.737804 ┆ 2.8125    ┆ -0.503034  ┆ 1.6152 │ #> └──────┴─────┴───────┴───────┴───┴──────────┴───────────┴────────────┴────────┘ mtcars |>    as_polars() |>    mutate(     across(       .cols = contains(\"a\"),       .fns = list(         mean = mean,           function(x) {            (x - mean(x)) / sd(x)         },         ~ sd(.x)       )     )   ) #> Error: #> ! Could not evaluate an anonymous function in `across()`. #> ℹ Are you sure the anonymous function returns a Polars expression?"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Etienne Bacher. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bacher E (2023). tidypolars: Get Power Polars Syntax Tidyverse. R package version 0.2.0.9000, https://etiennebacher.r-universe.dev/tidypolars, https://www.tidypolars.etiennebacher.com/.","code":"@Manual{,   title = {tidypolars: Get the Power of Polars with the Syntax of the Tidyverse},   author = {Etienne Bacher},   year = {2023},   note = {R package version 0.2.0.9000, https://etiennebacher.r-universe.dev/tidypolars},   url = {https://www.tidypolars.etiennebacher.com/}, }"},{"path":"/index.html","id":"tidypolars","dir":"","previous_headings":"","what":"Get the Power of Polars with the Syntax of the Tidyverse","title":"Get the Power of Polars with the Syntax of the Tidyverse","text":"⚠️ ’re looking Python package “tidypolars”, ’re wrong repo. right one : markfairbanks/tidypolars ⚠️ Motivation Installation Example","code":""},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Get the Power of Polars with the Syntax of the Tidyverse","text":"polars DataFrame library written Rust bindings several languages, including R. won’t argue interest using polars, already lot resources website. R package polars made mimic closely original Python syntax, quite verbose. makes easy read, yet another syntax learn R users accustomed far either base R, data.table tidyverse. objective tidypolars provide power speed polars keeping tidyverse syntax.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get the Power of Polars with the Syntax of the Tidyverse","text":"tidypolars built polars, available CRAN. means tidypolars also can’t CRAN. However, can install R-universe.","code":""},{"path":"/index.html","id":"windows-or-macos","dir":"","previous_headings":"Installation","what":"Windows or macOS","title":"Get the Power of Polars with the Syntax of the Tidyverse","text":"","code":"install.packages(   'tidypolars',    repos = c('https://etiennebacher.r-universe.dev', getOption(\"repos\")) )"},{"path":"/index.html","id":"linux","dir":"","previous_headings":"Installation","what":"Linux","title":"Get the Power of Polars with the Syntax of the Tidyverse","text":"","code":"install.packages(   'tidypolars',    repos = c('https://etiennebacher.r-universe.dev/bin/linux/jammy/4.3', getOption(\"repos\")) )"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Get the Power of Polars with the Syntax of the Tidyverse","text":"Suppose already code uses dplyr: tidypolars, can provide Polars DataFrame LazyFrame keep exact code: ’re used tidyverse functions syntax, feel much easier read pure polars syntax: Since work rewriting tidyverse code polars syntax, tidypolars polars similar performance. serious benchmarks polars, take look DuckDB benchmarks.","code":"library(dplyr, warn.conflicts = FALSE)  iris |>    select(starts_with(c(\"Sep\", \"Pet\"))) |>    mutate(     petal_type = ifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")   ) |>    filter(between(Sepal.Length, 4.5, 5.5)) |>    head() #>   Sepal.Length Sepal.Width Petal.Length Petal.Width petal_type #> 1          5.1         3.5          1.4         0.2       long #> 2          4.9         3.0          1.4         0.2       long #> 3          4.7         3.2          1.3         0.2       long #> 4          4.6         3.1          1.5         0.2       long #> 5          5.0         3.6          1.4         0.2       long #> 6          5.4         3.9          1.7         0.4       long library(tidypolars) #> Registered S3 method overwritten by 'tidypolars': #>   method          from   #>   print.DataFrame polars  iris |>    as_polars() |>    select(starts_with(c(\"Sep\", \"Pet\"))) |>    mutate(     petal_type = ifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")   ) |>    filter(between(Sepal.Length, 4.5, 5.5)) |>    head() #> shape: (6, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ petal_type │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str        │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ long       │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ long       │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ long       │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ long       │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ long       │ #> │ 5.4          ┆ 3.9         ┆ 1.7          ┆ 0.4         ┆ long       │ #> └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘ library(polars)  # polars syntax pl$DataFrame(iris)$   select(c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"))$   with_columns(     pl$when(       (pl$col(\"Petal.Length\") / pl$col(\"Petal.Width\") > 3)     )$then(pl$lit(\"long\"))$       otherwise(pl$lit(\"large\"))$       alias(\"petal_type\")   )$   filter(pl$col(\"Sepal.Length\")$is_between(4.5, 5.5))$   head(6) #> shape: (6, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ petal_type │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str        │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ long       │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ long       │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ long       │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ long       │ #> │ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ long       │ #> │ 5.4          ┆ 3.9         ┆ 1.7          ┆ 0.4         ┆ long       │ #> └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘ library(collapse, warn.conflicts = FALSE) #> collapse 2.0.2, see ?`collapse-package` or ?`collapse-documentation`  large_iris <- data.table::rbindlist(rep(list(iris), 50000)) large_iris_pl <- as_polars(large_iris, lazy = TRUE)  bench::mark(   polars = {     large_iris_pl$       select(c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"))$       with_columns(         pl$when(           (pl$col(\"Petal.Length\") / pl$col(\"Petal.Width\") > 3)         )$then(pl$lit(\"long\"))$           otherwise(pl$lit(\"large\"))$           alias(\"petal_type\")       )$       filter(pl$col(\"Sepal.Length\")$is_between(4.5, 5.5))$       collect()   },   tidypolars = {     large_iris_pl |>       select(starts_with(c(\"Sep\", \"Pet\"))) |>       mutate(         petal_type = ifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")       ) |>        filter(between(Sepal.Length, 4.5, 5.5)) |>        collect()   },   dplyr = {     large_iris |>       select(starts_with(c(\"Sep\", \"Pet\"))) |>       mutate(         petal_type = ifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")       ) |>       filter(between(Sepal.Length, 4.5, 5.5))   },   collapse = {     large_iris |>       fselect(c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\")) |>       fmutate(         petal_type = data.table::fifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")       ) |>       fsubset(Sepal.Length >= 4.5 & Sepal.Length <= 5.5)   },   check = FALSE,   iterations = 10 ) #> Warning: Some expressions had a GC in every iteration; so filtering is #> disabled. #> # A tibble: 4 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 polars     141.97ms  168.5ms     5.91     26.6KB     0    #> 2 tidypolars 162.03ms 207.92ms     4.90     74.6KB     0    #> 3 dplyr         3.29s    3.43s     0.288   916.6MB     1.30 #> 4 collapse    278.9ms 390.28ms     2.53    373.1MB     2.27  # NOTE: do NOT take the \"mem_alloc\" results into account. # `bench::mark()` doesn't report the accurate memory usage for packages calling # Rust code."},{"path":"/reference/arrange.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Order rows using column values — arrange.DataFrame","title":"Order rows using column values — arrange.DataFrame","text":"Order rows using column values","code":""},{"path":"/reference/arrange.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order rows using column values — arrange.DataFrame","text":"","code":"# S3 method for DataFrame arrange(.data, ..., .by_group = FALSE)"},{"path":"/reference/arrange.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order rows using column values — arrange.DataFrame","text":".data Polars Data/LazyFrame ... Quoted unquoted variable names. Select helpers used. .by_group TRUE, sort data within groups.","code":""},{"path":"/reference/arrange.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order rows using column values — arrange.DataFrame","text":"","code":"pl_test <- polars::pl$DataFrame(   x1 = c(\"a\", \"a\", \"b\", \"a\", \"c\"),   x2 = c(2, 1, 5, 3, 1),   value = sample(1:5) )  arrange(pl_test, x1) #> shape: (5, 3) #> ┌─────┬─────┬───────┐ #> │ x1  ┆ x2  ┆ value │ #> │ --- ┆ --- ┆ ---   │ #> │ str ┆ f64 ┆ i32   │ #> ╞═════╪═════╪═══════╡ #> │ a   ┆ 2.0 ┆ 3     │ #> │ a   ┆ 1.0 ┆ 5     │ #> │ a   ┆ 3.0 ┆ 2     │ #> │ b   ┆ 5.0 ┆ 1     │ #> │ c   ┆ 1.0 ┆ 4     │ #> └─────┴─────┴───────┘ arrange(pl_test, x1, -x2) #> shape: (5, 3) #> ┌─────┬─────┬───────┐ #> │ x1  ┆ x2  ┆ value │ #> │ --- ┆ --- ┆ ---   │ #> │ str ┆ f64 ┆ i32   │ #> ╞═════╪═════╪═══════╡ #> │ a   ┆ 3.0 ┆ 2     │ #> │ a   ┆ 2.0 ┆ 3     │ #> │ a   ┆ 1.0 ┆ 5     │ #> │ b   ┆ 5.0 ┆ 1     │ #> │ c   ┆ 1.0 ┆ 4     │ #> └─────┴─────┴───────┘  # if the data is grouped, you need to specify `.by_group = TRUE` to sort by # the groups first pl_test |>   group_by(x1) |>   arrange(-x2, .by_group = TRUE) #> shape: (5, 3) #> ┌─────┬─────┬───────┐ #> │ x1  ┆ x2  ┆ value │ #> │ --- ┆ --- ┆ ---   │ #> │ str ┆ f64 ┆ i32   │ #> ╞═════╪═════╪═══════╡ #> │ a   ┆ 3.0 ┆ 2     │ #> │ a   ┆ 2.0 ┆ 3     │ #> │ a   ┆ 1.0 ┆ 5     │ #> │ b   ┆ 5.0 ┆ 1     │ #> │ c   ┆ 1.0 ┆ 4     │ #> └─────┴─────┴───────┘"},{"path":"/reference/as_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an R dataframe to a Polars Data/LazyFrame — as_polars","title":"Convert an R dataframe to a Polars Data/LazyFrame — as_polars","text":"operation time- memory-consuming. used small datasets. Use polars original functions read files instead.","code":""},{"path":"/reference/as_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an R dataframe to a Polars Data/LazyFrame — as_polars","text":"","code":"as_polars(.data, lazy = FALSE, with_string_cache = FALSE)"},{"path":"/reference/as_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an R dataframe to a Polars Data/LazyFrame — as_polars","text":".data R dataframe. lazy Convert data lazy format. with_string_cache Enable string cache. allows operations, comparing factors strings may cost performance.","code":""},{"path":"/reference/as_polars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an R dataframe to a Polars Data/LazyFrame — as_polars","text":"","code":"mtcars |>   as_polars() #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘ mtcars |>   as_polars(lazy = TRUE) #> [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\" #> DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\""},{"path":"/reference/bind_cols_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Append multiple Data/LazyFrames next to each other — bind_cols_polars","title":"Append multiple Data/LazyFrames next to each other — bind_cols_polars","text":"Append multiple Data/LazyFrames next ","code":""},{"path":"/reference/bind_cols_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append multiple Data/LazyFrames next to each other — bind_cols_polars","text":"","code":"bind_cols_polars(...)"},{"path":"/reference/bind_cols_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append multiple Data/LazyFrames next to each other — bind_cols_polars","text":"... Polars DataFrames LazyFrames combine. argument can either Data/LazyFrame, list Data/LazyFrames. Columns matched name. Data/LazyFrames must number rows duplicated column names.","code":""},{"path":"/reference/bind_cols_polars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append multiple Data/LazyFrames next to each other — bind_cols_polars","text":"","code":"p1 <- polars::pl$DataFrame(   x = sample(letters, 20),   y = sample(1:100, 20) ) p2 <- polars::pl$DataFrame(   z = sample(letters, 20),   w = sample(1:100, 20) )  bind_cols_polars(p1, p2) #> shape: (20, 4) #> ┌─────┬─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   ┆ w   │ #> │ --- ┆ --- ┆ --- ┆ --- │ #> │ str ┆ i32 ┆ str ┆ i32 │ #> ╞═════╪═════╪═════╪═════╡ #> │ r   ┆ 7   ┆ g   ┆ 55  │ #> │ s   ┆ 51  ┆ m   ┆ 62  │ #> │ q   ┆ 60  ┆ z   ┆ 34  │ #> │ m   ┆ 88  ┆ v   ┆ 32  │ #> │ …   ┆ …   ┆ …   ┆ …   │ #> │ t   ┆ 57  ┆ b   ┆ 10  │ #> │ d   ┆ 84  ┆ k   ┆ 85  │ #> │ p   ┆ 17  ┆ o   ┆ 5   │ #> │ y   ┆ 11  ┆ e   ┆ 51  │ #> └─────┴─────┴─────┴─────┘ bind_cols_polars(list(p1, p2)) #> shape: (20, 4) #> ┌─────┬─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   ┆ w   │ #> │ --- ┆ --- ┆ --- ┆ --- │ #> │ str ┆ i32 ┆ str ┆ i32 │ #> ╞═════╪═════╪═════╪═════╡ #> │ r   ┆ 7   ┆ g   ┆ 55  │ #> │ s   ┆ 51  ┆ m   ┆ 62  │ #> │ q   ┆ 60  ┆ z   ┆ 34  │ #> │ m   ┆ 88  ┆ v   ┆ 32  │ #> │ …   ┆ …   ┆ …   ┆ …   │ #> │ t   ┆ 57  ┆ b   ┆ 10  │ #> │ d   ┆ 84  ┆ k   ┆ 85  │ #> │ p   ┆ 17  ┆ o   ┆ 5   │ #> │ y   ┆ 11  ┆ e   ┆ 51  │ #> └─────┴─────┴─────┴─────┘"},{"path":"/reference/bind_rows_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack multiple Data/LazyFrames on top of each other — bind_rows_polars","title":"Stack multiple Data/LazyFrames on top of each other — bind_rows_polars","text":"Stack multiple Data/LazyFrames top ","code":""},{"path":"/reference/bind_rows_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack multiple Data/LazyFrames on top of each other — bind_rows_polars","text":"","code":"bind_rows_polars(..., .id = NULL)"},{"path":"/reference/bind_rows_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack multiple Data/LazyFrames on top of each other — bind_rows_polars","text":"... Polars DataFrames LazyFrames combine. argument can either Data/LazyFrame, list Data/LazyFrames. Columns matched name. Data/LazyFrames must number columns identical names. .id name optional identifier column. Provide string create output column identifies input.","code":""},{"path":"/reference/bind_rows_polars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack multiple Data/LazyFrames on top of each other — bind_rows_polars","text":"","code":"p1 <- polars::pl$DataFrame(   x = sample(letters, 20),   y = sample(1:100, 20) ) p2 <- polars::pl$DataFrame(   x = sample(letters, 20),   y = sample(1:100, 20) )  bind_rows_polars(p1, p2) #> shape: (40, 2) #> ┌─────┬─────┐ #> │ x   ┆ y   │ #> │ --- ┆ --- │ #> │ str ┆ i32 │ #> ╞═════╪═════╡ #> │ l   ┆ 89  │ #> │ v   ┆ 73  │ #> │ j   ┆ 23  │ #> │ k   ┆ 6   │ #> │ …   ┆ …   │ #> │ p   ┆ 54  │ #> │ l   ┆ 62  │ #> │ c   ┆ 87  │ #> │ o   ┆ 49  │ #> └─────┴─────┘  # this is equivalent bind_rows_polars(list(p1, p2)) #> shape: (40, 2) #> ┌─────┬─────┐ #> │ x   ┆ y   │ #> │ --- ┆ --- │ #> │ str ┆ i32 │ #> ╞═════╪═════╡ #> │ l   ┆ 89  │ #> │ v   ┆ 73  │ #> │ j   ┆ 23  │ #> │ k   ┆ 6   │ #> │ …   ┆ …   │ #> │ p   ┆ 54  │ #> │ l   ┆ 62  │ #> │ c   ┆ 87  │ #> │ o   ┆ 49  │ #> └─────┴─────┘  # create an id colum bind_rows_polars(p1, p2, .id = \"id\") #> shape: (40, 3) #> ┌─────┬─────┬─────┐ #> │ id  ┆ x   ┆ y   │ #> │ --- ┆ --- ┆ --- │ #> │ i32 ┆ str ┆ i32 │ #> ╞═════╪═════╪═════╡ #> │ 1   ┆ l   ┆ 89  │ #> │ 1   ┆ v   ┆ 73  │ #> │ 1   ┆ j   ┆ 23  │ #> │ 1   ┆ k   ┆ 6   │ #> │ …   ┆ …   ┆ …   │ #> │ 2   ┆ p   ┆ 54  │ #> │ 2   ┆ l   ┆ 62  │ #> │ 2   ┆ c   ┆ 87  │ #> │ 2   ┆ o   ┆ 49  │ #> └─────┴─────┴─────┘"},{"path":"/reference/collect.LazyFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect a LazyFrame — collect.LazyFrame","title":"Collect a LazyFrame — collect.LazyFrame","text":"Polars LazyFrames loaded memory. Running collect() checks execution plan, optimizes background performs . result loaded R session.","code":""},{"path":"/reference/collect.LazyFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect a LazyFrame — collect.LazyFrame","text":"","code":"# S3 method for LazyFrame collect(   x,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   comm_subplan_elim = TRUE,   comm_subexpr_elim = TRUE,   no_optimization = FALSE,   streaming = FALSE,   collect_in_background = FALSE,   ... )"},{"path":"/reference/collect.LazyFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect a LazyFrame — collect.LazyFrame","text":"x Polars LazyFrame type_coercion Coerce types operations succeed run minimal required memory (default TRUE). predicate_pushdown Applies filters early possible scan level (default TRUE). projection_pushdown Select columns needed scan level (default TRUE). simplify_expression Various optimizations, constant folding replacing expensive operations faster alternatives (default TRUE). slice_pushdown load required slice scan. materialize sliced outputs level. materialize sliced outputs (default TRUE). comm_subplan_elim Cache branching subplans occur self-joins unions (default TRUE). comm_subexpr_elim Cache common subexpressions (default TRUE). no_optimization Sets following optimizations FALSE: predicate_pushdown, projection_pushdown,  slice_pushdown, simplify_expression. Default FALSE. streaming Run parts query streaming fashion (alpha state). Default FALSE. collect_in_background Detach query R session. Computation start background. Get handle later can converted resulting DataFrame. Useful interactive mode lock R session (default FALSE). ... used.","code":""},{"path":[]},{"path":"/reference/collect.LazyFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect a LazyFrame — collect.LazyFrame","text":"","code":"dat_lazy <- polars::pl$DataFrame(iris)$lazy() collect(dat_lazy) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  # you can build a query and add collect() as the last piece dat_lazy |>   select(starts_with(\"Sepal\")) |>   filter(between(Sepal.Length, 5, 6)) |>   collect() #> shape: (67, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 5.0          ┆ 3.6         │ #> │ 5.4          ┆ 3.9         │ #> │ 5.0          ┆ 3.4         │ #> │ …            ┆ …           │ #> │ 5.6          ┆ 2.8         │ #> │ 6.0          ┆ 3.0         │ #> │ 5.8          ┆ 2.7         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘"},{"path":"/reference/complete.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete a data frame with missing combinations of data — complete.DataFrame","title":"Complete a data frame with missing combinations of data — complete.DataFrame","text":"Turns implicit missing values explicit missing values. useful completing missing combinations data. Note function work grouped data yet.","code":""},{"path":"/reference/complete.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete a data frame with missing combinations of data — complete.DataFrame","text":"","code":"# S3 method for DataFrame complete(data, ..., fill = list())  # S3 method for LazyFrame complete(data, ..., fill = list())"},{"path":"/reference/complete.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete a data frame with missing combinations of data — complete.DataFrame","text":"data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. fill named list variable supplies single value use instead NA missing combinations.","code":""},{"path":"/reference/complete.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete a data frame with missing combinations of data — complete.DataFrame","text":"","code":"df <- polars::pl$DataFrame(   group = c(1:2, 1, 2),   item_id = c(1:2, 2, 3),   item_name = c(\"a\", \"a\", \"b\", \"b\"),   value1 = c(1, NA, 3, 4),   value2 = 4:7 ) df #> shape: (4, 5) #> ┌───────┬─────────┬───────────┬────────┬────────┐ #> │ group ┆ item_id ┆ item_name ┆ value1 ┆ value2 │ #> │ ---   ┆ ---     ┆ ---       ┆ ---    ┆ ---    │ #> │ f64   ┆ f64     ┆ str       ┆ f64    ┆ i32    │ #> ╞═══════╪═════════╪═══════════╪════════╪════════╡ #> │ 1.0   ┆ 1.0     ┆ a         ┆ 1.0    ┆ 4      │ #> │ 2.0   ┆ 2.0     ┆ a         ┆ null   ┆ 5      │ #> │ 1.0   ┆ 2.0     ┆ b         ┆ 3.0    ┆ 6      │ #> │ 2.0   ┆ 3.0     ┆ b         ┆ 4.0    ┆ 7      │ #> └───────┴─────────┴───────────┴────────┴────────┘  df |> complete(group, item_id, item_name) #> shape: (12, 5) #> ┌───────┬─────────┬───────────┬────────┬────────┐ #> │ group ┆ item_id ┆ item_name ┆ value1 ┆ value2 │ #> │ ---   ┆ ---     ┆ ---       ┆ ---    ┆ ---    │ #> │ f64   ┆ f64     ┆ str       ┆ f64    ┆ i32    │ #> ╞═══════╪═════════╪═══════════╪════════╪════════╡ #> │ 1.0   ┆ 1.0     ┆ a         ┆ 1.0    ┆ 4      │ #> │ 1.0   ┆ 1.0     ┆ b         ┆ null   ┆ null   │ #> │ 1.0   ┆ 2.0     ┆ a         ┆ null   ┆ null   │ #> │ 1.0   ┆ 2.0     ┆ b         ┆ 3.0    ┆ 6      │ #> │ …     ┆ …       ┆ …         ┆ …      ┆ …      │ #> │ 2.0   ┆ 2.0     ┆ a         ┆ null   ┆ 5      │ #> │ 2.0   ┆ 2.0     ┆ b         ┆ null   ┆ null   │ #> │ 2.0   ┆ 3.0     ┆ a         ┆ null   ┆ null   │ #> │ 2.0   ┆ 3.0     ┆ b         ┆ 4.0    ┆ 7      │ #> └───────┴─────────┴───────────┴────────┴────────┘  df |>   complete(     group, item_id, item_name,     fill = list(value1 = 0, value2 = 99)   ) #> shape: (12, 5) #> ┌───────┬─────────┬───────────┬────────┬────────┐ #> │ group ┆ item_id ┆ item_name ┆ value1 ┆ value2 │ #> │ ---   ┆ ---     ┆ ---       ┆ ---    ┆ ---    │ #> │ f64   ┆ f64     ┆ str       ┆ f64    ┆ f64    │ #> ╞═══════╪═════════╪═══════════╪════════╪════════╡ #> │ 1.0   ┆ 1.0     ┆ a         ┆ 1.0    ┆ 4.0    │ #> │ 1.0   ┆ 1.0     ┆ b         ┆ 0.0    ┆ 99.0   │ #> │ 1.0   ┆ 2.0     ┆ a         ┆ 0.0    ┆ 99.0   │ #> │ 1.0   ┆ 2.0     ┆ b         ┆ 3.0    ┆ 6.0    │ #> │ …     ┆ …       ┆ …         ┆ …      ┆ …      │ #> │ 2.0   ┆ 2.0     ┆ a         ┆ 0.0    ┆ 5.0    │ #> │ 2.0   ┆ 2.0     ┆ b         ┆ 0.0    ┆ 99.0   │ #> │ 2.0   ┆ 3.0     ┆ a         ┆ 0.0    ┆ 99.0   │ #> │ 2.0   ┆ 3.0     ┆ b         ┆ 4.0    ┆ 7.0    │ #> └───────┴─────────┴───────────┴────────┴────────┘"},{"path":"/reference/count.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the observations in each group — count.DataFrame","title":"Count the observations in each group — count.DataFrame","text":"Count observations group","code":""},{"path":"/reference/count.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the observations in each group — count.DataFrame","text":"","code":"# S3 method for DataFrame count(x, ..., sort = FALSE, name = \"n\")  # S3 method for LazyFrame count(x, ..., sort = FALSE, name = \"n\")  # S3 method for DataFrame add_count(x, ..., sort = FALSE, name = \"n\")  # S3 method for LazyFrame add_count(x, ..., sort = FALSE, name = \"n\")"},{"path":"/reference/count.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the observations in each group — count.DataFrame","text":"x Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. sort TRUE, show largest groups top. name Name new column.","code":""},{"path":"/reference/count.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the observations in each group — count.DataFrame","text":"","code":"test <- polars::pl$DataFrame(mtcars) count(test, cyl) #> shape: (3, 2) #> ┌─────┬─────┐ #> │ cyl ┆ n   │ #> │ --- ┆ --- │ #> │ f64 ┆ u32 │ #> ╞═════╪═════╡ #> │ 4.0 ┆ 11  │ #> │ 6.0 ┆ 7   │ #> │ 8.0 ┆ 14  │ #> └─────┴─────┘  count(test, cyl, am) #> shape: (6, 3) #> ┌─────┬─────┬─────┐ #> │ cyl ┆ am  ┆ n   │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ u32 │ #> ╞═════╪═════╪═════╡ #> │ 4.0 ┆ 0.0 ┆ 3   │ #> │ 4.0 ┆ 1.0 ┆ 8   │ #> │ 6.0 ┆ 0.0 ┆ 4   │ #> │ 6.0 ┆ 1.0 ┆ 3   │ #> │ 8.0 ┆ 0.0 ┆ 12  │ #> │ 8.0 ┆ 1.0 ┆ 2   │ #> └─────┴─────┴─────┘  count(test, cyl, am, sort = TRUE, name = \"count\") #> shape: (6, 3) #> ┌─────┬─────┬───────┐ #> │ cyl ┆ am  ┆ count │ #> │ --- ┆ --- ┆ ---   │ #> │ f64 ┆ f64 ┆ u32   │ #> ╞═════╪═════╪═══════╡ #> │ 8.0 ┆ 0.0 ┆ 12    │ #> │ 4.0 ┆ 1.0 ┆ 8     │ #> │ 6.0 ┆ 0.0 ┆ 4     │ #> │ 6.0 ┆ 1.0 ┆ 3     │ #> │ 4.0 ┆ 0.0 ┆ 3     │ #> │ 8.0 ┆ 1.0 ┆ 2     │ #> └─────┴─────┴───────┘  add_count(test, cyl, am, sort = TRUE, name = \"count\") #> shape: (32, 12) #> ┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬───────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ count │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---   │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ u32   │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪═══════╡ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 2.0  ┆ 12    │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 4.0  ┆ 12    │ #> │ 16.4 ┆ 8.0 ┆ 275.8 ┆ 180.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 3.0  ┆ 12    │ #> │ 17.3 ┆ 8.0 ┆ 275.8 ┆ 180.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 3.0  ┆ 12    │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …    ┆ …    ┆ …     │ #> │ 21.5 ┆ 4.0 ┆ 120.1 ┆ 97.0  ┆ … ┆ 0.0 ┆ 3.0  ┆ 1.0  ┆ 3     │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 6.0  ┆ 3     │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 4.0  ┆ 2     │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 8.0  ┆ 2     │ #> └──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴───────┘"},{"path":"/reference/cross_join.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross join — cross_join.DataFrame","title":"Cross join — cross_join.DataFrame","text":"Cross joins match row x every row y, resulting dataset nrow(x) * nrow(y) rows.","code":""},{"path":"/reference/cross_join.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross join — cross_join.DataFrame","text":"","code":"# S3 method for DataFrame cross_join(x, y, suffix = c(\".x\", \".y\"), ...)  # S3 method for LazyFrame cross_join(x, y, suffix = c(\".x\", \".y\"), ...)"},{"path":"/reference/cross_join.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross join — cross_join.DataFrame","text":"x, y Two Polars Data/LazyFrames suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... used.","code":""},{"path":"/reference/cross_join.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross join — cross_join.DataFrame","text":"","code":"test <- polars::pl$DataFrame(   origin = c(\"ALG\", \"FRA\", \"GER\"),   year = c(2020, 2020, 2021) )  test2 <- polars::pl$DataFrame(   destination = c(\"USA\", \"JPN\", \"BRA\"),   language = c(\"english\", \"japanese\", \"portuguese\") )  test #> shape: (3, 2) #> ┌────────┬────────┐ #> │ origin ┆ year   │ #> │ ---    ┆ ---    │ #> │ str    ┆ f64    │ #> ╞════════╪════════╡ #> │ ALG    ┆ 2020.0 │ #> │ FRA    ┆ 2020.0 │ #> │ GER    ┆ 2021.0 │ #> └────────┴────────┘  test2 #> shape: (3, 2) #> ┌─────────────┬────────────┐ #> │ destination ┆ language   │ #> │ ---         ┆ ---        │ #> │ str         ┆ str        │ #> ╞═════════════╪════════════╡ #> │ USA         ┆ english    │ #> │ JPN         ┆ japanese   │ #> │ BRA         ┆ portuguese │ #> └─────────────┴────────────┘  cross_join(test, test2) #> shape: (9, 4) #> ┌────────┬────────┬─────────────┬────────────┐ #> │ origin ┆ year   ┆ destination ┆ language   │ #> │ ---    ┆ ---    ┆ ---         ┆ ---        │ #> │ str    ┆ f64    ┆ str         ┆ str        │ #> ╞════════╪════════╪═════════════╪════════════╡ #> │ ALG    ┆ 2020.0 ┆ USA         ┆ english    │ #> │ ALG    ┆ 2020.0 ┆ JPN         ┆ japanese   │ #> │ ALG    ┆ 2020.0 ┆ BRA         ┆ portuguese │ #> │ FRA    ┆ 2020.0 ┆ USA         ┆ english    │ #> │ FRA    ┆ 2020.0 ┆ JPN         ┆ japanese   │ #> │ FRA    ┆ 2020.0 ┆ BRA         ┆ portuguese │ #> │ GER    ┆ 2021.0 ┆ USA         ┆ english    │ #> │ GER    ┆ 2021.0 ┆ JPN         ┆ japanese   │ #> │ GER    ┆ 2021.0 ┆ BRA         ┆ portuguese │ #> └────────┴────────┴─────────────┴────────────┘"},{"path":"/reference/describe.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics for a Polars DataFrame — describe","title":"Summary statistics for a Polars DataFrame — describe","text":"Summary statistics Polars DataFrame","code":""},{"path":"/reference/describe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics for a Polars DataFrame — describe","text":"","code":"describe(.data, percentiles = c(0.25, 0.75))"},{"path":"/reference/describe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistics for a Polars DataFrame — describe","text":".data Polars Data/LazyFrame percentiles One percentiles include summary statistics. values must 0 1 (NULL ignored).","code":""},{"path":"/reference/describe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary statistics for a Polars DataFrame — describe","text":"","code":"mtcars |>   as_polars() |>   describe(percentiles = c(0.2, 0.4, 0.6, 0.8)) #> shape: (11, 12) #> ┌────────────┬───────────┬──────────┬────────────┬───┬──────────┬──────────┬──────────┬────────┐ #> │ describe   ┆ mpg       ┆ cyl      ┆ disp       ┆ … ┆ vs       ┆ am       ┆ gear     ┆ carb   │ #> │ ---        ┆ ---       ┆ ---      ┆ ---        ┆   ┆ ---      ┆ ---      ┆ ---      ┆ ---    │ #> │ str        ┆ f64       ┆ f64      ┆ f64        ┆   ┆ f64      ┆ f64      ┆ f64      ┆ f64    │ #> ╞════════════╪═══════════╪══════════╪════════════╪═══╪══════════╪══════════╪══════════╪════════╡ #> │ count      ┆ 32.0      ┆ 32.0     ┆ 32.0       ┆ … ┆ 32.0     ┆ 32.0     ┆ 32.0     ┆ 32.0   │ #> │ null_count ┆ 0.0       ┆ 0.0      ┆ 0.0        ┆ … ┆ 0.0      ┆ 0.0      ┆ 0.0      ┆ 0.0    │ #> │ mean       ┆ 20.090625 ┆ 6.1875   ┆ 230.721875 ┆ … ┆ 0.4375   ┆ 0.40625  ┆ 3.6875   ┆ 2.8125 │ #> │ std        ┆ 6.026948  ┆ 1.785922 ┆ 123.938694 ┆ … ┆ 0.504016 ┆ 0.498991 ┆ 0.737804 ┆ 1.6152 │ #> │ …          ┆ …         ┆ …        ┆ …          ┆ … ┆ …        ┆ …        ┆ …        ┆ …      │ #> │ 20pct      ┆ 15.2      ┆ 4.0      ┆ 120.1      ┆ … ┆ 0.0      ┆ 0.0      ┆ 3.0      ┆ 1.0    │ #> │ 40pct      ┆ 17.8      ┆ 6.0      ┆ 160.0      ┆ … ┆ 0.0      ┆ 0.0      ┆ 3.0      ┆ 2.0    │ #> │ 60pct      ┆ 21.0      ┆ 8.0      ┆ 275.8      ┆ … ┆ 1.0      ┆ 1.0      ┆ 4.0      ┆ 3.0    │ #> │ 80pct      ┆ 24.4      ┆ 8.0      ┆ 351.0      ┆ … ┆ 1.0      ┆ 1.0      ┆ 4.0      ┆ 4.0    │ #> └────────────┴───────────┴──────────┴────────────┴───┴──────────┴──────────┴──────────┴────────┘"},{"path":"/reference/describe_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the optimized and non-optimized query plans — describe_plan","title":"Show the optimized and non-optimized query plans — describe_plan","text":"functions available LazyFrames . describe_plan() shows query plan -, without optimization done Polars. query performed. running query, Polars applies list optimizations (filtering data sorting ). actual query plan ran Polars shown describe_optimized_plan(). Note queries read bottom top.","code":""},{"path":"/reference/describe_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the optimized and non-optimized query plans — describe_plan","text":"","code":"describe_plan(.data)  describe_optimized_plan(.data)"},{"path":"/reference/describe_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the optimized and non-optimized query plans — describe_plan","text":".data Polars LazyFrame","code":""},{"path":"/reference/describe_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the optimized and non-optimized query plans — describe_plan","text":"","code":"query <- mtcars |>   as_polars(lazy = TRUE) |>   arrange(drat) |>   filter(cyl == 3) |>   select(mpg)  describe_plan(query) #>  SELECT [col(\"mpg\")] FROM #>   FILTER [(col(\"cyl\")) == (3.0)] FROM #>  #>   SORT BY [col(\"drat\")] #>     DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"  describe_optimized_plan(query) #> FAST_PROJECT: [mpg] #>   SORT BY [col(\"drat\")] #>     DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT 3/11 COLUMNS; SELECTION: \"[(col(\\\"cyl\\\")) == (3.0)]\""},{"path":"/reference/distinct.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove or keep only duplicated rows in a Data/LazyFrame — distinct.DataFrame","title":"Remove or keep only duplicated rows in a Data/LazyFrame — distinct.DataFrame","text":"default, duplicates looked variables. possible specify subset variables duplicates looked . also possible keep either first occurrence, last occurence remove duplicates.","code":""},{"path":"/reference/distinct.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove or keep only duplicated rows in a Data/LazyFrame — distinct.DataFrame","text":"","code":"# S3 method for DataFrame distinct(.data, ..., keep = \"first\", maintain_order = TRUE)  # S3 method for LazyFrame distinct(.data, ..., keep = \"first\", maintain_order = TRUE)  duplicated_rows(.data, ...)"},{"path":"/reference/distinct.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove or keep only duplicated rows in a Data/LazyFrame — distinct.DataFrame","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. keep Either \"first\" (keep first occurrence duplicated row), \"last\" (last occurrence) \"none\" (remove ofccurences duplicated rows). maintain_order Maintain row order. default can slow process large datasets prevents use streaming.","code":""},{"path":"/reference/distinct.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove or keep only duplicated rows in a Data/LazyFrame — distinct.DataFrame","text":"","code":"pl_test <- polars::pl$DataFrame(   iso_o = c(rep(c(\"AA\", \"AB\"), each = 2), \"AC\", \"DC\"),   iso_d = rep(c(\"BA\", \"BB\", \"BC\"), each = 2),   value = c(2, 2, 3, 4, 5, 6) )  distinct(pl_test) #> shape: (5, 3) #> ┌───────┬───────┬───────┐ #> │ iso_o ┆ iso_d ┆ value │ #> │ ---   ┆ ---   ┆ ---   │ #> │ str   ┆ str   ┆ f64   │ #> ╞═══════╪═══════╪═══════╡ #> │ AA    ┆ BA    ┆ 2.0   │ #> │ AB    ┆ BB    ┆ 3.0   │ #> │ AB    ┆ BB    ┆ 4.0   │ #> │ AC    ┆ BC    ┆ 5.0   │ #> │ DC    ┆ BC    ┆ 6.0   │ #> └───────┴───────┴───────┘ distinct(pl_test, iso_o) #> shape: (4, 3) #> ┌───────┬───────┬───────┐ #> │ iso_o ┆ iso_d ┆ value │ #> │ ---   ┆ ---   ┆ ---   │ #> │ str   ┆ str   ┆ f64   │ #> ╞═══════╪═══════╪═══════╡ #> │ AA    ┆ BA    ┆ 2.0   │ #> │ AB    ┆ BB    ┆ 3.0   │ #> │ AC    ┆ BC    ┆ 5.0   │ #> │ DC    ┆ BC    ┆ 6.0   │ #> └───────┴───────┴───────┘  duplicated_rows(pl_test) #> shape: (2, 3) #> ┌───────┬───────┬───────┐ #> │ iso_o ┆ iso_d ┆ value │ #> │ ---   ┆ ---   ┆ ---   │ #> │ str   ┆ str   ┆ f64   │ #> ╞═══════╪═══════╪═══════╡ #> │ AA    ┆ BA    ┆ 2.0   │ #> │ AA    ┆ BA    ┆ 2.0   │ #> └───────┴───────┴───────┘ duplicated_rows(pl_test, iso_o, iso_d) #> shape: (4, 3) #> ┌───────┬───────┬───────┐ #> │ iso_o ┆ iso_d ┆ value │ #> │ ---   ┆ ---   ┆ ---   │ #> │ str   ┆ str   ┆ f64   │ #> ╞═══════╪═══════╪═══════╡ #> │ AA    ┆ BA    ┆ 2.0   │ #> │ AA    ┆ BA    ┆ 2.0   │ #> │ AB    ┆ BB    ┆ 3.0   │ #> │ AB    ┆ BB    ┆ 4.0   │ #> └───────┴───────┴───────┘"},{"path":"/reference/drop_na.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop missing values — drop_na.DataFrame","title":"Drop missing values — drop_na.DataFrame","text":"default, drop rows contain missing values. possible specify subset variables missing values variables considered.","code":""},{"path":"/reference/drop_na.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop missing values — drop_na.DataFrame","text":"","code":"# S3 method for DataFrame drop_na(data, ...)  # S3 method for LazyFrame drop_na(data, ...)"},{"path":"/reference/drop_na.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop missing values — drop_na.DataFrame","text":"data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc.","code":""},{"path":"/reference/drop_na.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop missing values — drop_na.DataFrame","text":"","code":"tmp <- mtcars tmp[1:3, \"mpg\"] <- NA tmp[4, \"hp\"] <- NA pl_tmp <- polars::pl$DataFrame(tmp)  drop_na(pl_tmp) #> shape: (28, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ 18.1 ┆ 6.0 ┆ 225.0 ┆ 105.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 24.4 ┆ 4.0 ┆ 146.7 ┆ 62.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘ drop_na(pl_tmp, hp, mpg) #> shape: (28, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ 18.1 ┆ 6.0 ┆ 225.0 ┆ 105.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 24.4 ┆ 4.0 ┆ 146.7 ┆ 62.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘"},{"path":"/reference/expect_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"tinytest helper — expect_colnames","title":"tinytest helper — expect_colnames","text":"tinytest helper","code":""},{"path":"/reference/expect_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tinytest helper — expect_colnames","text":"","code":"expect_colnames(x, y)"},{"path":"/reference/expect_dim.html","id":null,"dir":"Reference","previous_headings":"","what":"tinytest helper — expect_dim","title":"tinytest helper — expect_dim","text":"tinytest helper","code":""},{"path":"/reference/expect_dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tinytest helper — expect_dim","text":"","code":"expect_dim(x, y)"},{"path":"/reference/expect_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"tinytest helper — expect_equal","title":"tinytest helper — expect_equal","text":"tinytest helper","code":""},{"path":"/reference/expect_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tinytest helper — expect_equal","text":"","code":"expect_equal(x, y, ...)"},{"path":"/reference/expect_equal_lazy.html","id":null,"dir":"Reference","previous_headings":"","what":"tinytest helper — expect_equal_lazy","title":"tinytest helper — expect_equal_lazy","text":"tinytest helper","code":""},{"path":"/reference/expect_equal_lazy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tinytest helper — expect_equal_lazy","text":"","code":"expect_equal_lazy(x, y, ...)"},{"path":"/reference/expect_error_lazy.html","id":null,"dir":"Reference","previous_headings":"","what":"tinytest helper — expect_error_lazy","title":"tinytest helper — expect_error_lazy","text":"tinytest helper","code":""},{"path":"/reference/expect_error_lazy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tinytest helper — expect_error_lazy","text":"","code":"expect_error_lazy(current, pattern = \".*\", ...)"},{"path":"/reference/fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch n rows of a LazyFrame — fetch","title":"Fetch n rows of a LazyFrame — fetch","text":"Fetch way collect first n rows LazyFrame. mainly used test query runs expected subset data using collect() full query. Note fetching n rows mean output actually contain n rows, see section 'Details' information.","code":""},{"path":"/reference/fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch n rows of a LazyFrame — fetch","text":"","code":"fetch(   .data,   n_rows = 500,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   comm_subplan_elim = TRUE,   comm_subexpr_elim = TRUE,   no_optimization = FALSE,   streaming = FALSE )"},{"path":"/reference/fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch n rows of a LazyFrame — fetch","text":".data Polars LazyFrame n_rows Number rows fetch. type_coercion Coerce types operations succeed run minimal required memory (default TRUE). predicate_pushdown Applies filters early possible scan level (default TRUE). projection_pushdown Select columns needed scan level (default TRUE). simplify_expression Various optimizations, constant folding replacing expensive operations faster alternatives (default TRUE). slice_pushdown load required slice scan. materialize sliced outputs level. materialize sliced outputs (default TRUE). comm_subplan_elim Cache branching subplans occur self-joins unions (default TRUE). comm_subexpr_elim Cache common subexpressions (default TRUE). no_optimization Sets following optimizations FALSE: predicate_pushdown, projection_pushdown,  slice_pushdown, simplify_expression. Default FALSE. streaming Run parts query streaming fashion (alpha state). Default FALSE.","code":""},{"path":"/reference/fetch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch n rows of a LazyFrame — fetch","text":"parameter n_rows indicates many rows LazyFrame used beginning query, guarantee n_rows returned. example, query contains filter join operations datasets, final number rows can lower n_rows. hand, appending rows query can lead output rows n_rows.","code":""},{"path":[]},{"path":"/reference/fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch n rows of a LazyFrame — fetch","text":"","code":"dat_lazy <- polars::pl$DataFrame(iris)$lazy()  # this will return 30 rows fetch(dat_lazy, 30) #> shape: (30, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …       │ #> │ 5.0          ┆ 3.4         ┆ 1.6          ┆ 0.4         ┆ setosa  │ #> │ 5.2          ┆ 3.5         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 5.2          ┆ 3.4         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.6          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘  # this will return less than 30 rows because there are less than 30 matches # for this filter in the whole dataset dat_lazy |>   filter(Sepal.Length > 7.0) |>   fetch(30) #> shape: (12, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 7.1          ┆ 3.0         ┆ 5.9          ┆ 2.1         ┆ virginica │ #> │ 7.6          ┆ 3.0         ┆ 6.6          ┆ 2.1         ┆ virginica │ #> │ 7.3          ┆ 2.9         ┆ 6.3          ┆ 1.8         ┆ virginica │ #> │ 7.2          ┆ 3.6         ┆ 6.1          ┆ 2.5         ┆ virginica │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 7.2          ┆ 3.0         ┆ 5.8          ┆ 1.6         ┆ virginica │ #> │ 7.4          ┆ 2.8         ┆ 6.1          ┆ 1.9         ┆ virginica │ #> │ 7.9          ┆ 3.8         ┆ 6.4          ┆ 2.0         ┆ virginica │ #> │ 7.7          ┆ 3.0         ┆ 6.1          ┆ 2.3         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘"},{"path":"/reference/fill.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill in missing values with previous or next value — fill.DataFrame","title":"Fill in missing values with previous or next value — fill.DataFrame","text":"Fills missing values selected columns using next previous entry. useful common output format values repeated, recorded change.","code":""},{"path":"/reference/fill.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill in missing values with previous or next value — fill.DataFrame","text":"","code":"# S3 method for DataFrame fill(data, ..., .direction = c(\"down\", \"up\", \"downup\", \"updown\"))"},{"path":"/reference/fill.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill in missing values with previous or next value — fill.DataFrame","text":"data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. .direction Direction fill missing values. Either \"\" (default), \"\", \"downup\" (.e. first ) \"updown\" (first ).","code":""},{"path":"/reference/fill.DataFrame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill in missing values with previous or next value — fill.DataFrame","text":"grouped Data/LazyFrames, fill() applied within group, meaning fill across group boundaries.","code":""},{"path":"/reference/fill.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill in missing values with previous or next value — fill.DataFrame","text":"","code":"pl_test <- polars::pl$DataFrame(x = c(NA, 1), y = c(2, NA))  fill(pl_test, everything(), .direction = \"down\") #> shape: (2, 2) #> ┌──────┬─────┐ #> │ x    ┆ y   │ #> │ ---  ┆ --- │ #> │ f64  ┆ f64 │ #> ╞══════╪═════╡ #> │ null ┆ 2.0 │ #> │ 1.0  ┆ 2.0 │ #> └──────┴─────┘ fill(pl_test, everything(), .direction = \"up\") #> shape: (2, 2) #> ┌─────┬──────┐ #> │ x   ┆ y    │ #> │ --- ┆ ---  │ #> │ f64 ┆ f64  │ #> ╞═════╪══════╡ #> │ 1.0 ┆ 2.0  │ #> │ 1.0 ┆ null │ #> └─────┴──────┘  # with grouped data, it doesn't use values from other groups pl_grouped <- polars::pl$DataFrame(   grp = rep(c(\"A\", \"B\"), each = 3),   x = c(1, NA, NA, NA, 2, NA),   y = c(3, NA, 4, NA, 3, 1) ) |>   group_by(grp)  fill(pl_grouped, x, y, .direction = \"down\") #> shape: (6, 3) #> ┌─────┬──────┬──────┐ #> │ grp ┆ x    ┆ y    │ #> │ --- ┆ ---  ┆ ---  │ #> │ str ┆ f64  ┆ f64  │ #> ╞═════╪══════╪══════╡ #> │ A   ┆ 1.0  ┆ 3.0  │ #> │ A   ┆ 1.0  ┆ 3.0  │ #> │ A   ┆ 1.0  ┆ 4.0  │ #> │ B   ┆ null ┆ null │ #> │ B   ┆ 2.0  ┆ 3.0  │ #> │ B   ┆ 2.0  ┆ 1.0  │ #> └─────┴──────┴──────┘"},{"path":"/reference/filter.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep rows that match a condition — filter.DataFrame","title":"Keep rows that match a condition — filter.DataFrame","text":"function used subset data frame, retaining rows satisfy conditions. retained, row must produce value TRUE conditions. Note condition evaluates NA row dropped, unlike base subsetting [.","code":""},{"path":"/reference/filter.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep rows that match a condition — filter.DataFrame","text":"","code":"# S3 method for DataFrame filter(.data, ...)  # S3 method for LazyFrame filter(.data, ...)"},{"path":"/reference/filter.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep rows that match a condition — filter.DataFrame","text":".data Polars Data/LazyFrame ... Expressions return logical value, defined terms variables data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"/reference/filter.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep rows that match a condition — filter.DataFrame","text":"","code":"pl_iris <- polars::pl$DataFrame(iris)  filter(pl_iris, Sepal.Length < 5, Species == \"setosa\") #> shape: (20, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.4         ┆ 1.4          ┆ 0.3         ┆ setosa  │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …       │ #> │ 4.5          ┆ 2.3         ┆ 1.3          ┆ 0.3         ┆ setosa  │ #> │ 4.4          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.8          ┆ 3.0         ┆ 1.4          ┆ 0.3         ┆ setosa  │ #> │ 4.6          ┆ 3.2         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘  filter(pl_iris, Sepal.Length < Sepal.Width + Petal.Length) #> shape: (115, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.4          ┆ 3.9         ┆ 1.7          ┆ 0.4         ┆ setosa    │ #> │ 4.6          ┆ 3.4         ┆ 1.4          ┆ 0.3         ┆ setosa    │ #> │ 4.8          ┆ 3.4         ┆ 1.6          ┆ 0.2         ┆ setosa    │ #> │ 5.7          ┆ 4.4         ┆ 1.5          ┆ 0.4         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  filter(pl_iris, Species == \"setosa\" | is.na(Species)) #> shape: (50, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …       │ #> │ 5.1          ┆ 3.8         ┆ 1.6          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.2         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 5.3          ┆ 3.7         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 5.0          ┆ 3.3         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘  filter(pl_iris, between(Sepal.Length, 5, 6, include_bounds = FALSE)) #> shape: (51, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 5.4          ┆ 3.9         ┆ 1.7          ┆ 0.4         ┆ setosa    │ #> │ 5.4          ┆ 3.7         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ 5.8          ┆ 4.0         ┆ 1.2          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 5.8          ┆ 2.8         ┆ 5.1          ┆ 2.4         ┆ virginica │ #> │ 5.6          ┆ 2.8         ┆ 4.9          ┆ 2.0         ┆ virginica │ #> │ 5.8          ┆ 2.7         ┆ 5.1          ┆ 1.9         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  iris2 <- iris iris2$Species <- as.character(iris2$Species) iris2 |>   as_polars() |>   filter(Species %in% c(\"setosa\", \"virginica\")) #> shape: (100, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘"},{"path":"/reference/group_by.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by one or more variables — group_by.DataFrame","title":"Group by one or more variables — group_by.DataFrame","text":"data operations done groups defined variables. group_by() takes existing Polars Data/LazyFrame converts grouped one operations performed \"group\". ungroup() removes grouping.","code":""},{"path":"/reference/group_by.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by one or more variables — group_by.DataFrame","text":"","code":"# S3 method for DataFrame group_by(.data, ..., maintain_order = FALSE)  # S3 method for DataFrame ungroup(x, ...)  # S3 method for LazyFrame group_by(.data, ..., maintain_order = FALSE)  # S3 method for LazyFrame ungroup(x, ...)"},{"path":"/reference/group_by.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by one or more variables — group_by.DataFrame","text":".data Polars Data/LazyFrame ... Variables group (used group_by() ). used ungroup(). maintain_order Maintain row order. performance reasons, FALSE default). Setting TRUE can slow process large datasets prevents use streaming. x Polars Data/LazyFrame","code":""},{"path":"/reference/group_by.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group by one or more variables — group_by.DataFrame","text":"","code":"by_cyl <- mtcars |>   as_polars() |>   group_by(cyl)  by_cyl #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘ #> Groups [3]: cyl #> Maintain order: FALSE  by_cyl |> summarise(   disp = mean(disp),   hp = mean(hp) ) #> shape: (3, 3) #> ┌─────┬────────────┬────────────┐ #> │ cyl ┆ disp       ┆ hp         │ #> │ --- ┆ ---        ┆ ---        │ #> │ f64 ┆ f64        ┆ f64        │ #> ╞═════╪════════════╪════════════╡ #> │ 4.0 ┆ 105.136364 ┆ 82.636364  │ #> │ 8.0 ┆ 353.1      ┆ 209.214286 │ #> │ 6.0 ┆ 183.314286 ┆ 122.285714 │ #> └─────┴────────────┴────────────┘ by_cyl |> filter(disp == max(disp)) #> shape: (3, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 24.4 ┆ 4.0 ┆ 146.7 ┆ 62.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ 10.4 ┆ 8.0 ┆ 472.0 ┆ 205.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘ #> Groups [3]: cyl #> Maintain order: FALSE"},{"path":"/reference/left_join.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating joins — left_join.DataFrame","title":"Mutating joins — left_join.DataFrame","text":"Mutating joins add columns y x, matching observations based keys.","code":""},{"path":"/reference/left_join.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating joins — left_join.DataFrame","text":"","code":"# S3 method for DataFrame left_join(   x,   y,   by = NULL,   copy = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL )  # S3 method for DataFrame right_join(   x,   y,   by = NULL,   copy = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL )  # S3 method for DataFrame full_join(   x,   y,   by = NULL,   copy = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL )  # S3 method for DataFrame inner_join(   x,   y,   by = NULL,   copy = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL )  # S3 method for LazyFrame left_join(   x,   y,   by = NULL,   copy = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL )  # S3 method for LazyFrame right_join(   x,   y,   by = NULL,   copy = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL )  # S3 method for LazyFrame full_join(   x,   y,   by = NULL,   copy = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL )  # S3 method for LazyFrame inner_join(   x,   y,   by = NULL,   copy = NULL,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL )"},{"path":"/reference/left_join.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating joins — left_join.DataFrame","text":"x, y Two Polars Data/LazyFrames Variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. copy, keep used. suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... used.","code":""},{"path":"/reference/left_join.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating joins — left_join.DataFrame","text":"","code":"test <- polars::pl$DataFrame(   x = c(1, 2, 3),   y = c(1, 2, 3),   z = c(1, 2, 3) )  test2 <- polars::pl$DataFrame(   x = c(1, 2, 4),   y = c(1, 2, 4),   z2 = c(4, 5, 7) )  test #> shape: (3, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 │ #> │ 2.0 ┆ 2.0 ┆ 2.0 │ #> │ 3.0 ┆ 3.0 ┆ 3.0 │ #> └─────┴─────┴─────┘  test2 #> shape: (3, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z2  │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 4.0 │ #> │ 2.0 ┆ 2.0 ┆ 5.0 │ #> │ 4.0 ┆ 4.0 ┆ 7.0 │ #> └─────┴─────┴─────┘  left_join(test, test2) #> Joining by `x`, `y` #> shape: (3, 4) #> ┌─────┬─────┬─────┬──────┐ #> │ x   ┆ y   ┆ z   ┆ z2   │ #> │ --- ┆ --- ┆ --- ┆ ---  │ #> │ f64 ┆ f64 ┆ f64 ┆ f64  │ #> ╞═════╪═════╪═════╪══════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 ┆ 4.0  │ #> │ 2.0 ┆ 2.0 ┆ 2.0 ┆ 5.0  │ #> │ 3.0 ┆ 3.0 ┆ 3.0 ┆ null │ #> └─────┴─────┴─────┴──────┘  inner_join(test, test2) #> Joining by `x`, `y` #> shape: (2, 4) #> ┌─────┬─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   ┆ z2  │ #> │ --- ┆ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 ┆ 4.0 │ #> │ 2.0 ┆ 2.0 ┆ 2.0 ┆ 5.0 │ #> └─────┴─────┴─────┴─────┘  full_join(test, test2) #> Joining by `x`, `y` #> shape: (4, 4) #> ┌─────┬─────┬──────┬──────┐ #> │ x   ┆ y   ┆ z    ┆ z2   │ #> │ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞═════╪═════╪══════╪══════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0  ┆ 4.0  │ #> │ 2.0 ┆ 2.0 ┆ 2.0  ┆ 5.0  │ #> │ 4.0 ┆ 4.0 ┆ null ┆ 7.0  │ #> │ 3.0 ┆ 3.0 ┆ 3.0  ┆ null │ #> └─────┴─────┴──────┴──────┘  # Show how the arg 'suffix' works: test2 <- polars::pl$DataFrame(   x = c(1, 2, 4),   y = c(1, 2, 4),   z = c(4, 5, 7) )  left_join(test, test2, by = c(\"x\", \"y\"), suffix = c(\"_left\", \"_right\")) #> shape: (3, 4) #> ┌─────┬─────┬────────┬─────────┐ #> │ x   ┆ y   ┆ z_left ┆ z_right │ #> │ --- ┆ --- ┆ ---    ┆ ---     │ #> │ f64 ┆ f64 ┆ f64    ┆ f64     │ #> ╞═════╪═════╪════════╪═════════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0    ┆ 4.0     │ #> │ 2.0 ┆ 2.0 ┆ 2.0    ┆ 5.0     │ #> │ 3.0 ┆ 3.0 ┆ 3.0    ┆ null    │ #> └─────┴─────┴────────┴─────────┘"},{"path":"/reference/make_unique_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a column with unique id per row values — make_unique_id","title":"Create a column with unique id per row values — make_unique_id","text":"Create column unique id per row values","code":""},{"path":"/reference/make_unique_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a column with unique id per row values — make_unique_id","text":"","code":"make_unique_id(.data, ..., new_col = \"hash\")"},{"path":"/reference/make_unique_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a column with unique id per row values — make_unique_id","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. new_col Name new column","code":""},{"path":"/reference/make_unique_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a column with unique id per row values — make_unique_id","text":"","code":"mtcars |>   as_polars() |>   make_unique_id(am, gear) #> shape: (32, 12) #> ┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬─────────────────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ hash                │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---                 │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ u64                 │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪═════════════════════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 5481148325778505091 │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 5481148325778505091 │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 4.0  ┆ 1.0  ┆ 5481148325778505091 │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 1.0  ┆ 3422524176585442423 │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …    ┆ …    ┆ …                   │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 4.0  ┆ 4747741669635682153 │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 6.0  ┆ 4747741669635682153 │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 8.0  ┆ 4747741669635682153 │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 2.0  ┆ 5481148325778505091 │ #> └──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴─────────────────────┘"},{"path":"/reference/mutate.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, modify, and delete columns — mutate.DataFrame","title":"Create, modify, and delete columns — mutate.DataFrame","text":"creates new columns functions existing variables. can also modify (name existing column) delete columns (setting value NULL).","code":""},{"path":"/reference/mutate.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, modify, and delete columns — mutate.DataFrame","text":"","code":"# S3 method for DataFrame mutate(.data, ...)  # S3 method for LazyFrame mutate(.data, ...)"},{"path":"/reference/mutate.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, modify, and delete columns — mutate.DataFrame","text":".data Polars Data/LazyFrame ... Name-value pairs. name gives name column output. value can : vector length current group (whole data frame ungrouped). NULL, remove column.","code":""},{"path":"/reference/mutate.DataFrame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create, modify, and delete columns — mutate.DataFrame","text":"lot functions available base R (cos, sin, multiplying, etc.) packages (dplyr::lag(), etc.) implemented efficient way Polars. functions automatically translated Polars syntax hood can continue using classic R syntax functions. Polars built-replacement exist (example custom functions), R function passed map() Polars workflow. Note slower using functions can translated Polars syntax.","code":""},{"path":"/reference/mutate.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, modify, and delete columns — mutate.DataFrame","text":"","code":"pl_iris <- polars::pl$DataFrame(iris)  # classic operation mutate(pl_iris, x = Sepal.Width + Sepal.Length) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬─────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ x   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ --- │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ f64 │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 8.6 │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 7.9 │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 7.9 │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 7.7 │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …   │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 8.8 │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 9.5 │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 9.6 │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 8.9 │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴─────┘  # logical operation mutate(pl_iris, x = Sepal.Width > Sepal.Length & Petal.Width > Petal.Length) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬───────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ x     │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ ---   │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ bool  │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═══════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ false │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ false │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ false │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ false │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …     │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ false │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ false │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ false │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ false │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴───────┘  # overwrite existing variable mutate(pl_iris, Sepal.Width = Sepal.Width*2) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 7.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 6.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 6.4         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 6.2         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 5.0         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 6.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 6.8         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 6.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  # grouped computation pl_iris |>   group_by(Species) |>   mutate(     foo = mean(Sepal.Length)   ) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬───────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ foo   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ ---   │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ f64   │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═══════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …     │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 6.588 │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 6.588 │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 6.588 │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 6.588 │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴───────┘  # across() is available pl_iris |>   mutate(     across(.cols = contains(\"Sepal\"), .fns = mean, .names = \"{.fn}_of_{.col}\")   ) #> shape: (150, 7) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ mean_of_Sepa ┆ mean_of_Sep │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ l.Length     ┆ al.Width    │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ ---          ┆ ---         │ #> │              ┆             ┆              ┆             ┆           ┆ f64          ┆ f64         │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.843333     ┆ 3.057333    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.843333     ┆ 3.057333    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 5.843333     ┆ 3.057333    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 5.843333     ┆ 3.057333    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …            ┆ …           │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 5.843333     ┆ 3.057333    │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 5.843333     ┆ 3.057333    │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 5.843333     ┆ 3.057333    │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 5.843333     ┆ 3.057333    │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴──────────────┴─────────────┘ # It can receive several types of functions: pl_iris |>   mutate(     across(       .cols = contains(\"Sepal\"),       .fns = list(mean = mean, sd = ~ sd(.x)),       .names = \"{.fn}_of_{.col}\"     )   ) #> shape: (150, 9) #> ┌───────────┬───────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬──────────┐ #> │ Sepal.Len ┆ Sepal.Wid ┆ Petal.Len ┆ Petal.Wid ┆ … ┆ mean_of_S ┆ sd_of_Sep ┆ mean_of_S ┆ sd_of_Se │ #> │ gth       ┆ th        ┆ gth       ┆ th        ┆   ┆ epal.Leng ┆ al.Length ┆ epal.Widt ┆ pal.Widt │ #> │ ---       ┆ ---       ┆ ---       ┆ ---       ┆   ┆ th        ┆ ---       ┆ h         ┆ h        │ #> │ f64       ┆ f64       ┆ f64       ┆ f64       ┆   ┆ ---       ┆ f64       ┆ ---       ┆ ---      │ #> │           ┆           ┆           ┆           ┆   ┆ f64       ┆           ┆ f64       ┆ f64      │ #> ╞═══════════╪═══════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪══════════╡ #> │ 5.1       ┆ 3.5       ┆ 1.4       ┆ 0.2       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 4.9       ┆ 3.0       ┆ 1.4       ┆ 0.2       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 4.7       ┆ 3.2       ┆ 1.3       ┆ 0.2       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 4.6       ┆ 3.1       ┆ 1.5       ┆ 0.2       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ …         ┆ …         ┆ …         ┆ …         ┆ … ┆ …         ┆ …         ┆ …         ┆ …        │ #> │ 6.3       ┆ 2.5       ┆ 5.0       ┆ 1.9       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 6.5       ┆ 3.0       ┆ 5.2       ┆ 2.0       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 6.2       ┆ 3.4       ┆ 5.4       ┆ 2.3       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> │ 5.9       ┆ 3.0       ┆ 5.1       ┆ 1.8       ┆ … ┆ 5.843333  ┆ 0.828066  ┆ 3.057333  ┆ 0.435866 │ #> └───────────┴───────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴──────────┘  # Embracing an external variable works some_value <- 1 mutate(pl_iris, x = {{ some_value }}) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬─────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ x   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ --- │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ f64 │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 1.0 │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 1.0 │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 1.0 │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 1.0 │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …   │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 1.0 │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 1.0 │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 1.0 │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 1.0 │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴─────┘"},{"path":"/reference/pivot_longer.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot Data/LazyFrame from wide to long — pivot_longer.DataFrame","title":"Pivot Data/LazyFrame from wide to long — pivot_longer.DataFrame","text":"Pivot Data/LazyFrame wide long","code":""},{"path":"/reference/pivot_longer.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot Data/LazyFrame from wide to long — pivot_longer.DataFrame","text":"","code":"# S3 method for DataFrame pivot_longer(data, cols, ..., names_to = \"name\", values_to = \"value\")  # S3 method for LazyFrame pivot_longer(data, cols, ..., names_to = \"name\", values_to = \"value\")"},{"path":"/reference/pivot_longer.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot Data/LazyFrame from wide to long — pivot_longer.DataFrame","text":"data Polars Data/LazyFrame cols Columns pivot longer format. Can anything accepted dplyr::select(). ... used. names_to (quoted) name column contain column names specified cols. values_to string specifying name column create data stored cell values.","code":""},{"path":"/reference/pivot_longer.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot Data/LazyFrame from wide to long — pivot_longer.DataFrame","text":"","code":"pl_relig_income <- polars::pl$DataFrame(tidyr::relig_income) pl_relig_income #> shape: (18, 11) #> ┌─────────────────┬───────┬─────────┬─────────┬───┬──────────┬───────────┬───────┬──────────────┐ #> │ religion        ┆ <$10k ┆ $10-20k ┆ $20-30k ┆ … ┆ $75-100k ┆ $100-150k ┆ >150k ┆ Don't        │ #> │ ---             ┆ ---   ┆ ---     ┆ ---     ┆   ┆ ---      ┆ ---       ┆ ---   ┆ know/refused │ #> │ str             ┆ f64   ┆ f64     ┆ f64     ┆   ┆ f64      ┆ f64       ┆ f64   ┆ ---          │ #> │                 ┆       ┆         ┆         ┆   ┆          ┆           ┆       ┆ f64          │ #> ╞═════════════════╪═══════╪═════════╪═════════╪═══╪══════════╪═══════════╪═══════╪══════════════╡ #> │ Agnostic        ┆ 27.0  ┆ 34.0    ┆ 60.0    ┆ … ┆ 122.0    ┆ 109.0     ┆ 84.0  ┆ 96.0         │ #> │ Atheist         ┆ 12.0  ┆ 27.0    ┆ 37.0    ┆ … ┆ 73.0     ┆ 59.0      ┆ 74.0  ┆ 76.0         │ #> │ Buddhist        ┆ 27.0  ┆ 21.0    ┆ 30.0    ┆ … ┆ 62.0     ┆ 39.0      ┆ 53.0  ┆ 54.0         │ #> │ Catholic        ┆ 418.0 ┆ 617.0   ┆ 732.0   ┆ … ┆ 949.0    ┆ 792.0     ┆ 633.0 ┆ 1489.0       │ #> │ …               ┆ …     ┆ …       ┆ …       ┆ … ┆ …        ┆ …         ┆ …     ┆ …            │ #> │ Other Christian ┆ 9.0   ┆ 7.0     ┆ 11.0    ┆ … ┆ 18.0     ┆ 14.0      ┆ 12.0  ┆ 18.0         │ #> │ Other Faiths    ┆ 20.0  ┆ 33.0    ┆ 40.0    ┆ … ┆ 46.0     ┆ 40.0      ┆ 41.0  ┆ 71.0         │ #> │ Other World     ┆ 5.0   ┆ 2.0     ┆ 3.0     ┆ … ┆ 3.0      ┆ 4.0       ┆ 4.0   ┆ 8.0          │ #> │ Religions       ┆       ┆         ┆         ┆   ┆          ┆           ┆       ┆              │ #> │ Unaffiliated    ┆ 217.0 ┆ 299.0   ┆ 374.0   ┆ … ┆ 407.0    ┆ 321.0     ┆ 258.0 ┆ 597.0        │ #> └─────────────────┴───────┴─────────┴─────────┴───┴──────────┴───────────┴───────┴──────────────┘  pl_relig_income |>   pivot_longer(!religion, names_to = \"income\", values_to = \"count\") #> shape: (180, 3) #> ┌──────────────┬────────────────────┬───────┐ #> │ religion     ┆ income             ┆ count │ #> │ ---          ┆ ---                ┆ ---   │ #> │ str          ┆ str                ┆ f64   │ #> ╞══════════════╪════════════════════╪═══════╡ #> │ Agnostic     ┆ <$10k              ┆ 27.0  │ #> │ Agnostic     ┆ $10-20k            ┆ 34.0  │ #> │ Agnostic     ┆ $20-30k            ┆ 60.0  │ #> │ Agnostic     ┆ $30-40k            ┆ 81.0  │ #> │ …            ┆ …                  ┆ …     │ #> │ Unaffiliated ┆ $75-100k           ┆ 407.0 │ #> │ Unaffiliated ┆ $100-150k          ┆ 321.0 │ #> │ Unaffiliated ┆ >150k              ┆ 258.0 │ #> │ Unaffiliated ┆ Don't know/refused ┆ 597.0 │ #> └──────────────┴────────────────────┴───────┘"},{"path":"/reference/pivot_wider.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot Data/LazyFrame from long to wide — pivot_wider.DataFrame","title":"Pivot Data/LazyFrame from long to wide — pivot_wider.DataFrame","text":"Pivot Data/LazyFrame long wide","code":""},{"path":"/reference/pivot_wider.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot Data/LazyFrame from long to wide — pivot_wider.DataFrame","text":"","code":"# S3 method for DataFrame pivot_wider(data, ..., id_cols, names_from, values_from, values_fill = NULL)  # S3 method for LazyFrame pivot_wider(data, ..., id_cols, names_from, values_from, values_fill = NULL)"},{"path":"/reference/pivot_wider.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot Data/LazyFrame from long to wide — pivot_wider.DataFrame","text":"data Polars Data/LazyFrame ... used. id_cols Defaults columns data except columns specified names_from values_from. names_from (quoted unquoted) column name whose values used names new columns. values_from (quoted unquoted) column name whose values used fill new columns. values_fill scalar used replace missing values new columns. Note type value applied new columns. example, provide character value fill numeric columns, columns converted character.","code":""},{"path":"/reference/pivot_wider.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot Data/LazyFrame from long to wide — pivot_wider.DataFrame","text":"","code":"pl_fish_encounters <- polars::pl$DataFrame(tidyr::fish_encounters)  pl_fish_encounters |>   pivot_wider(names_from = station, values_from = seen) #> shape: (19, 12) #> ┌──────┬─────────┬───────┬────────┬───┬──────┬──────┬──────┬──────┐ #> │ fish ┆ Release ┆ I80_1 ┆ Lisbon ┆ … ┆ BCE2 ┆ BCW2 ┆ MAE  ┆ MAW  │ #> │ ---  ┆ ---     ┆ ---   ┆ ---    ┆   ┆ ---  ┆ ---  ┆ ---  ┆ ---  │ #> │ cat  ┆ i32     ┆ i32   ┆ i32    ┆   ┆ i32  ┆ i32  ┆ i32  ┆ i32  │ #> ╞══════╪═════════╪═══════╪════════╪═══╪══════╪══════╪══════╪══════╡ #> │ 4842 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1    ┆ 1    │ #> │ 4843 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1    ┆ 1    │ #> │ 4844 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1    ┆ 1    │ #> │ 4845 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ …    ┆ …       ┆ …     ┆ …      ┆ … ┆ …    ┆ …    ┆ …    ┆ …    │ #> │ 4862 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ null ┆ null │ #> │ 4863 ┆ 1       ┆ 1     ┆ null   ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 4864 ┆ 1       ┆ 1     ┆ null   ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 4865 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ null ┆ null ┆ null ┆ null │ #> └──────┴─────────┴───────┴────────┴───┴──────┴──────┴──────┴──────┘  pl_fish_encounters |>   pivot_wider(names_from = station, values_from = seen, values_fill = 0) #> shape: (19, 12) #> ┌──────┬─────────┬───────┬────────┬───┬──────┬──────┬─────┬─────┐ #> │ fish ┆ Release ┆ I80_1 ┆ Lisbon ┆ … ┆ BCE2 ┆ BCW2 ┆ MAE ┆ MAW │ #> │ ---  ┆ ---     ┆ ---   ┆ ---    ┆   ┆ ---  ┆ ---  ┆ --- ┆ --- │ #> │ cat  ┆ f64     ┆ f64   ┆ f64    ┆   ┆ f64  ┆ f64  ┆ f64 ┆ f64 │ #> ╞══════╪═════════╪═══════╪════════╪═══╪══════╪══════╪═════╪═════╡ #> │ 4842 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 1.0 ┆ 1.0 │ #> │ 4843 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 1.0 ┆ 1.0 │ #> │ 4844 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 1.0 ┆ 1.0 │ #> │ 4845 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> │ …    ┆ …       ┆ …     ┆ …      ┆ … ┆ …    ┆ …    ┆ …   ┆ …   │ #> │ 4862 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 0.0 ┆ 0.0 │ #> │ 4863 ┆ 1.0     ┆ 1.0   ┆ 0.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> │ 4864 ┆ 1.0     ┆ 1.0   ┆ 0.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> │ 4865 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> └──────┴─────────┴───────┴────────┴───┴──────┴──────┴─────┴─────┘  # be careful about the type of the replacement value! pl_fish_encounters |>   pivot_wider(names_from = station, values_from = seen, values_fill = \"a\") #> shape: (19, 12) #> ┌──────┬─────────┬───────┬────────┬───┬──────┬──────┬─────┬─────┐ #> │ fish ┆ Release ┆ I80_1 ┆ Lisbon ┆ … ┆ BCE2 ┆ BCW2 ┆ MAE ┆ MAW │ #> │ ---  ┆ ---     ┆ ---   ┆ ---    ┆   ┆ ---  ┆ ---  ┆ --- ┆ --- │ #> │ cat  ┆ str     ┆ str   ┆ str    ┆   ┆ str  ┆ str  ┆ str ┆ str │ #> ╞══════╪═════════╪═══════╪════════╪═══╪══════╪══════╪═════╪═════╡ #> │ 4842 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1   ┆ 1   │ #> │ 4843 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1   ┆ 1   │ #> │ 4844 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1   ┆ 1   │ #> │ 4845 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> │ …    ┆ …       ┆ …     ┆ …      ┆ … ┆ …    ┆ …    ┆ …   ┆ …   │ #> │ 4862 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ a   ┆ a   │ #> │ 4863 ┆ 1       ┆ 1     ┆ a      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> │ 4864 ┆ 1       ┆ 1     ┆ a      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> │ 4865 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> └──────┴─────────┴───────┴────────┴───┴──────┴──────┴─────┴─────┘"},{"path":"/reference/pull.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a variable of a Data/LazyFrame — pull.DataFrame","title":"Extract a variable of a Data/LazyFrame — pull.DataFrame","text":"returns R vector Polars Series.","code":""},{"path":"/reference/pull.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a variable of a Data/LazyFrame — pull.DataFrame","text":"","code":"# S3 method for DataFrame pull(.data, var, ...)  # S3 method for LazyFrame pull(.data, var, ...)"},{"path":"/reference/pull.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a variable of a Data/LazyFrame — pull.DataFrame","text":".data Polars Data/LazyFrame var quoted unquoted variable name ... used.","code":""},{"path":"/reference/pull.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a variable of a Data/LazyFrame — pull.DataFrame","text":"","code":"pl_test <- polars::pl$DataFrame(iris) pull(pl_test, Sepal.Length) #>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 #>  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 #>  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 #>  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 #>  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 #>  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 #> [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 #> [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 #> [145] 6.7 6.7 6.3 6.5 6.2 5.9 pull(pl_test, \"Sepal.Length\") #>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 #>  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 #>  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 #>  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 #>  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 #>  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 #> [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 #> [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 #> [145] 6.7 6.7 6.3 6.5 6.2 5.9"},{"path":"/reference/relocate.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Change column order — relocate.DataFrame","title":"Change column order — relocate.DataFrame","text":"Use relocate() change column positions, using syntax select() make easy move blocks columns .","code":""},{"path":"/reference/relocate.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change column order — relocate.DataFrame","text":"","code":"# S3 method for DataFrame relocate(.data, ..., .before = NULL, .after = NULL)  # S3 method for LazyFrame relocate(.data, ..., .before = NULL, .after = NULL)"},{"path":"/reference/relocate.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change column order — relocate.DataFrame","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. ., .Column name (either quoted unquoted) indicates destination columns selected .... Supplying neither move columns left-hand side; specifying error.","code":""},{"path":"/reference/relocate.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change column order — relocate.DataFrame","text":"","code":"dat <- as_polars(mtcars)  dat |>   relocate(hp, vs, .before = cyl) #> shape: (32, 11) #> ┌──────┬───────┬─────┬─────┬───┬───────┬─────┬──────┬──────┐ #> │ mpg  ┆ hp    ┆ vs  ┆ cyl ┆ … ┆ qsec  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ ---   ┆ --- ┆ --- ┆   ┆ ---   ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64   ┆ f64 ┆ f64 ┆   ┆ f64   ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═══════╪═════╪═════╪═══╪═══════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 110.0 ┆ 0.0 ┆ 6.0 ┆ … ┆ 16.46 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 110.0 ┆ 0.0 ┆ 6.0 ┆ … ┆ 17.02 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 93.0  ┆ 1.0 ┆ 4.0 ┆ … ┆ 18.61 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 110.0 ┆ 1.0 ┆ 6.0 ┆ … ┆ 19.44 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …    ┆ …     ┆ …   ┆ …   ┆ … ┆ …     ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 264.0 ┆ 0.0 ┆ 8.0 ┆ … ┆ 14.5  ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 175.0 ┆ 0.0 ┆ 6.0 ┆ … ┆ 15.5  ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 335.0 ┆ 0.0 ┆ 8.0 ┆ … ┆ 14.6  ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 109.0 ┆ 1.0 ┆ 4.0 ┆ … ┆ 18.6  ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴───────┴─────┴─────┴───┴───────┴─────┴──────┴──────┘  # if .before and .after are not specified, selected columns are moved to the # first positions dat |>   relocate(hp, vs) #> shape: (32, 11) #> ┌───────┬─────┬──────┬─────┬───┬───────┬─────┬──────┬──────┐ #> │ hp    ┆ vs  ┆ mpg  ┆ cyl ┆ … ┆ qsec  ┆ am  ┆ gear ┆ carb │ #> │ ---   ┆ --- ┆ ---  ┆ --- ┆   ┆ ---   ┆ --- ┆ ---  ┆ ---  │ #> │ f64   ┆ f64 ┆ f64  ┆ f64 ┆   ┆ f64   ┆ f64 ┆ f64  ┆ f64  │ #> ╞═══════╪═════╪══════╪═════╪═══╪═══════╪═════╪══════╪══════╡ #> │ 110.0 ┆ 0.0 ┆ 21.0 ┆ 6.0 ┆ … ┆ 16.46 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 110.0 ┆ 0.0 ┆ 21.0 ┆ 6.0 ┆ … ┆ 17.02 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 93.0  ┆ 1.0 ┆ 22.8 ┆ 4.0 ┆ … ┆ 18.61 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 110.0 ┆ 1.0 ┆ 21.4 ┆ 6.0 ┆ … ┆ 19.44 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …     ┆ …   ┆ …    ┆ …   ┆ … ┆ …     ┆ …   ┆ …    ┆ …    │ #> │ 264.0 ┆ 0.0 ┆ 15.8 ┆ 8.0 ┆ … ┆ 14.5  ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 175.0 ┆ 0.0 ┆ 19.7 ┆ 6.0 ┆ … ┆ 15.5  ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 335.0 ┆ 0.0 ┆ 15.0 ┆ 8.0 ┆ … ┆ 14.6  ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 109.0 ┆ 1.0 ┆ 21.4 ┆ 4.0 ┆ … ┆ 18.6  ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └───────┴─────┴──────┴─────┴───┴───────┴─────┴──────┴──────┘  # .before and .after can be quoted or unquoted dat |>   relocate(hp, vs, .after = \"gear\") #> shape: (32, 11) #> ┌──────┬─────┬───────┬──────┬───┬──────┬───────┬─────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ drat ┆ … ┆ gear ┆ hp    ┆ vs  ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---  ┆   ┆ ---  ┆ ---   ┆ --- ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64  ┆   ┆ f64  ┆ f64   ┆ f64 ┆ f64  │ #> ╞══════╪═════╪═══════╪══════╪═══╪══════╪═══════╪═════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 3.9  ┆ … ┆ 4.0  ┆ 110.0 ┆ 0.0 ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 3.9  ┆ … ┆ 4.0  ┆ 110.0 ┆ 0.0 ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 3.85 ┆ … ┆ 4.0  ┆ 93.0  ┆ 1.0 ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 3.08 ┆ … ┆ 3.0  ┆ 110.0 ┆ 1.0 ┆ 1.0  │ #> │ …    ┆ …   ┆ …     ┆ …    ┆ … ┆ …    ┆ …     ┆ …   ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 4.22 ┆ … ┆ 5.0  ┆ 264.0 ┆ 0.0 ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 3.62 ┆ … ┆ 5.0  ┆ 175.0 ┆ 0.0 ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 3.54 ┆ … ┆ 5.0  ┆ 335.0 ┆ 0.0 ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 4.11 ┆ … ┆ 4.0  ┆ 109.0 ┆ 1.0 ┆ 2.0  │ #> └──────┴─────┴───────┴──────┴───┴──────┴───────┴─────┴──────┘  # select helpers are also available dat |>   relocate(contains(\"[aeiou]\")) #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘"},{"path":"/reference/rename.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns — rename.DataFrame","title":"Rename columns — rename.DataFrame","text":"Rename columns","code":""},{"path":"/reference/rename.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns — rename.DataFrame","text":"","code":"# S3 method for DataFrame rename(.data, ...)  # S3 method for LazyFrame rename(.data, ...)  # S3 method for DataFrame rename_with(.data, .fn, .cols = tidyselect::everything(), ...)  # S3 method for LazyFrame rename_with(.data, .fn, .cols = tidyselect::everything(), ...)"},{"path":"/reference/rename.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns — rename.DataFrame","text":".data Polars Data/LazyFrame ... rename(), one following: params like new_name = \"old_name\" rename selected variables. params wrapped list rename_with, additional arguments passed fn. .fn Function apply column names .cols Columns apply fn. Can anything accepted dplyr::select().","code":""},{"path":"/reference/rename.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns — rename.DataFrame","text":"","code":"pl_test <- polars::pl$DataFrame(mtcars)  rename(pl_test, miles_per_gallon = \"mpg\", horsepower = \"hp\") #> shape: (32, 11) #> ┌──────────────────┬─────┬───────┬────────────┬───┬─────┬─────┬──────┬──────┐ #> │ miles_per_gallon ┆ cyl ┆ disp  ┆ horsepower ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---              ┆ --- ┆ ---   ┆ ---        ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64              ┆ f64 ┆ f64   ┆ f64        ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════════════════╪═════╪═══════╪════════════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8             ┆ 4.0 ┆ 108.0 ┆ 93.0       ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4             ┆ 6.0 ┆ 258.0 ┆ 110.0      ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …                ┆ …   ┆ …     ┆ …          ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8             ┆ 8.0 ┆ 351.0 ┆ 264.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7             ┆ 6.0 ┆ 145.0 ┆ 175.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0             ┆ 8.0 ┆ 301.0 ┆ 335.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4             ┆ 4.0 ┆ 121.0 ┆ 109.0      ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────────────────┴─────┴───────┴────────────┴───┴─────┴─────┴──────┴──────┘  rename(pl_test, list(miles_per_gallon = \"mpg\", horsepower = \"hp\")) #> shape: (32, 11) #> ┌──────────────────┬─────┬───────┬────────────┬───┬─────┬─────┬──────┬──────┐ #> │ miles_per_gallon ┆ cyl ┆ disp  ┆ horsepower ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---              ┆ --- ┆ ---   ┆ ---        ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64              ┆ f64 ┆ f64   ┆ f64        ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════════════════╪═════╪═══════╪════════════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8             ┆ 4.0 ┆ 108.0 ┆ 93.0       ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4             ┆ 6.0 ┆ 258.0 ┆ 110.0      ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …                ┆ …   ┆ …     ┆ …          ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8             ┆ 8.0 ┆ 351.0 ┆ 264.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7             ┆ 6.0 ┆ 145.0 ┆ 175.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0             ┆ 8.0 ┆ 301.0 ┆ 335.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4             ┆ 4.0 ┆ 121.0 ┆ 109.0      ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────────────────┴─────┴───────┴────────────┴───┴─────┴─────┴──────┴──────┘  rename(pl_test, `Miles per gallon` = \"mpg\", `Horse power` = \"hp\") #> shape: (32, 11) #> ┌──────────────────┬─────┬───────┬─────────────┬───┬─────┬─────┬──────┬──────┐ #> │ Miles per gallon ┆ cyl ┆ disp  ┆ Horse power ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---              ┆ --- ┆ ---   ┆ ---         ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64              ┆ f64 ┆ f64   ┆ f64         ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════════════════╪═════╪═══════╪═════════════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8             ┆ 4.0 ┆ 108.0 ┆ 93.0        ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4             ┆ 6.0 ┆ 258.0 ┆ 110.0       ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …                ┆ …   ┆ …     ┆ …           ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8             ┆ 8.0 ┆ 351.0 ┆ 264.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7             ┆ 6.0 ┆ 145.0 ┆ 175.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0             ┆ 8.0 ┆ 301.0 ┆ 335.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4             ┆ 4.0 ┆ 121.0 ┆ 109.0       ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────────────────┴─────┴───────┴─────────────┴───┴─────┴─────┴──────┴──────┘  rename_with(pl_test, toupper, .cols = contains(\"p\")) #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ MPG  ┆ cyl ┆ DISP  ┆ HP    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘  pl_test_2 <- polars::pl$DataFrame(iris)  rename_with(pl_test_2, function(x) tolower(gsub(\".\", \"_\", x, fixed = TRUE))) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ sepal_length ┆ sepal_width ┆ petal_length ┆ petal_width ┆ species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  rename_with(pl_test_2, \\(x) tolower(gsub(\".\", \"_\", x, fixed = TRUE))) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ sepal_length ┆ sepal_width ┆ petal_length ┆ petal_width ┆ species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘"},{"path":"/reference/replace_na.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NAs with specified values — replace_na.DataFrame","title":"Replace NAs with specified values — replace_na.DataFrame","text":"Replace NAs specified values","code":""},{"path":"/reference/replace_na.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NAs with specified values — replace_na.DataFrame","text":"","code":"# S3 method for DataFrame replace_na(data, replace, ...)  # S3 method for LazyFrame replace_na(data, replace, ...)"},{"path":"/reference/replace_na.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace NAs with specified values — replace_na.DataFrame","text":"data Polars Data/LazyFrame replace Either scalar used replace NA columns, named list column name value used replace NA . column type automatically converted type replacement value. ... used.","code":""},{"path":"/reference/replace_na.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace NAs with specified values — replace_na.DataFrame","text":"","code":"pl_test <- polars::pl$DataFrame(x = c(NA, 1), y = c(2, NA))  # replace all NA with 0 replace_na(pl_test, 0) #> shape: (2, 2) #> ┌─────┬─────┐ #> │ x   ┆ y   │ #> │ --- ┆ --- │ #> │ f64 ┆ f64 │ #> ╞═════╪═════╡ #> │ 0.0 ┆ 2.0 │ #> │ 1.0 ┆ 0.0 │ #> └─────┴─────┘  # custom replacement per column replace_na(pl_test, list(x = 0, y = 999)) #> shape: (2, 2) #> ┌─────┬───────┐ #> │ x   ┆ y     │ #> │ --- ┆ ---   │ #> │ f64 ┆ f64   │ #> ╞═════╪═══════╡ #> │ 0.0 ┆ 2.0   │ #> │ 1.0 ┆ 999.0 │ #> └─────┴───────┘  # be careful to use the same type for the replacement and for the column! replace_na(pl_test, list(x = \"a\", y = \"unknown\")) #> shape: (2, 2) #> ┌─────┬─────────┐ #> │ x   ┆ y       │ #> │ --- ┆ ---     │ #> │ str ┆ str     │ #> ╞═════╪═════════╡ #> │ a   ┆ 2.0     │ #> │ 1.0 ┆ unknown │ #> └─────┴─────────┘"},{"path":"/reference/select.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Select columns from a Data/LazyFrame — select.DataFrame","title":"Select columns from a Data/LazyFrame — select.DataFrame","text":"Select columns Data/LazyFrame","code":""},{"path":"/reference/select.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select columns from a Data/LazyFrame — select.DataFrame","text":"","code":"# S3 method for DataFrame select(.data, ...)  # S3 method for LazyFrame select(.data, ...)"},{"path":"/reference/select.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select columns from a Data/LazyFrame — select.DataFrame","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc.","code":""},{"path":"/reference/select.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select columns from a Data/LazyFrame — select.DataFrame","text":"","code":"pl_iris <- polars::pl$DataFrame(iris)  select(pl_iris, c(\"Sepal.Length\", \"Sepal.Width\")) #> shape: (150, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 4.9          ┆ 3.0         │ #> │ 4.7          ┆ 3.2         │ #> │ 4.6          ┆ 3.1         │ #> │ …            ┆ …           │ #> │ 6.3          ┆ 2.5         │ #> │ 6.5          ┆ 3.0         │ #> │ 6.2          ┆ 3.4         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘ select(pl_iris, Sepal.Length, Sepal.Width) #> shape: (150, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 4.9          ┆ 3.0         │ #> │ 4.7          ┆ 3.2         │ #> │ 4.6          ┆ 3.1         │ #> │ …            ┆ …           │ #> │ 6.3          ┆ 2.5         │ #> │ 6.5          ┆ 3.0         │ #> │ 6.2          ┆ 3.4         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘ select(pl_iris, 1:3) #> shape: (150, 3) #> ┌──────────────┬─────────────┬──────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length │ #> │ ---          ┆ ---         ┆ ---          │ #> │ f64          ┆ f64         ┆ f64          │ #> ╞══════════════╪═════════════╪══════════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          │ #> │ 4.9          ┆ 3.0         ┆ 1.4          │ #> │ 4.7          ┆ 3.2         ┆ 1.3          │ #> │ 4.6          ┆ 3.1         ┆ 1.5          │ #> │ …            ┆ …           ┆ …            │ #> │ 6.3          ┆ 2.5         ┆ 5.0          │ #> │ 6.5          ┆ 3.0         ┆ 5.2          │ #> │ 6.2          ┆ 3.4         ┆ 5.4          │ #> │ 5.9          ┆ 3.0         ┆ 5.1          │ #> └──────────────┴─────────────┴──────────────┘ select(pl_iris, starts_with(\"Sepal\")) #> shape: (150, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 4.9          ┆ 3.0         │ #> │ 4.7          ┆ 3.2         │ #> │ 4.6          ┆ 3.1         │ #> │ …            ┆ …           │ #> │ 6.3          ┆ 2.5         │ #> │ 6.5          ┆ 3.0         │ #> │ 6.2          ┆ 3.4         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘ select(pl_iris, -ends_with(\"Length\")) #> shape: (150, 3) #> ┌─────────────┬─────────────┬───────────┐ #> │ Sepal.Width ┆ Petal.Width ┆ Species   │ #> │ ---         ┆ ---         ┆ ---       │ #> │ f64         ┆ f64         ┆ cat       │ #> ╞═════════════╪═════════════╪═══════════╡ #> │ 3.5         ┆ 0.2         ┆ setosa    │ #> │ 3.0         ┆ 0.2         ┆ setosa    │ #> │ 3.2         ┆ 0.2         ┆ setosa    │ #> │ 3.1         ┆ 0.2         ┆ setosa    │ #> │ …           ┆ …           ┆ …         │ #> │ 2.5         ┆ 1.9         ┆ virginica │ #> │ 3.0         ┆ 2.0         ┆ virginica │ #> │ 3.4         ┆ 2.3         ┆ virginica │ #> │ 3.0         ┆ 1.8         ┆ virginica │ #> └─────────────┴─────────────┴───────────┘"},{"path":"/reference/semi_join.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtering joins — semi_join.DataFrame","title":"Filtering joins — semi_join.DataFrame","text":"Filtering joins filter rows x based presence absence matches y: semi_join() return rows x match y. anti_join() return rows x without match y.","code":""},{"path":"/reference/semi_join.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtering joins — semi_join.DataFrame","text":"","code":"# S3 method for DataFrame semi_join(x, y, by = NULL, ...)  # S3 method for DataFrame anti_join(x, y, by = NULL, ...)  # S3 method for LazyFrame semi_join(x, y, by = NULL, ...)  # S3 method for LazyFrame anti_join(x, y, by = NULL, ...)"},{"path":"/reference/semi_join.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filtering joins — semi_join.DataFrame","text":"x, y Two Polars Data/LazyFrames Variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. ... used.","code":""},{"path":"/reference/semi_join.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filtering joins — semi_join.DataFrame","text":"","code":"test <- polars::pl$DataFrame(   x = c(1, 2, 3),   y = c(1, 2, 3),   z = c(1, 2, 3) ) test2 <- polars::pl$DataFrame(   x = c(1, 2, 4),   y = c(1, 2, 4),   z2 = c(1, 2, 4) ) test #> shape: (3, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 │ #> │ 2.0 ┆ 2.0 ┆ 2.0 │ #> │ 3.0 ┆ 3.0 ┆ 3.0 │ #> └─────┴─────┴─────┘ test2 #> shape: (3, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z2  │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 │ #> │ 2.0 ┆ 2.0 ┆ 2.0 │ #> │ 4.0 ┆ 4.0 ┆ 4.0 │ #> └─────┴─────┴─────┘ # only keep the rows of `test` that have matching keys in `test2` semi_join(test, test2, by = c(\"x\", \"y\")) #> shape: (2, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 1.0 ┆ 1.0 ┆ 1.0 │ #> │ 2.0 ┆ 2.0 ┆ 2.0 │ #> └─────┴─────┴─────┘ # only keep the rows of `test` that don't have matching keys in `test2` anti_join(test, test2, by = c(\"x\", \"y\")) #> shape: (1, 3) #> ┌─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   │ #> │ --- ┆ --- ┆ --- │ #> │ f64 ┆ f64 ┆ f64 │ #> ╞═════╪═════╪═════╡ #> │ 3.0 ┆ 3.0 ┆ 3.0 │ #> └─────┴─────┴─────┘"},{"path":"/reference/separate.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate a character column into multiple columns based on a substring — separate.DataFrame","title":"Separate a character column into multiple columns based on a substring — separate.DataFrame","text":"Currently, splitting column regular expression position possible.","code":""},{"path":"/reference/separate.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate a character column into multiple columns based on a substring — separate.DataFrame","text":"","code":"# S3 method for DataFrame separate(data, col, into, sep = \" \", remove = TRUE, ...)  # S3 method for LazyFrame separate(data, col, into, sep = \" \", remove = TRUE, ...)"},{"path":"/reference/separate.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate a character column into multiple columns based on a substring — separate.DataFrame","text":"data Polars Data/LazyFrame col Column split Character vector containing names new variables create. Use NA omit variable output. sep String used split column. Regular expressions supported yet. remove TRUE, remove input column output data frame. ... used.","code":""},{"path":"/reference/separate.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate a character column into multiple columns based on a substring — separate.DataFrame","text":"","code":"test <- polars::pl$DataFrame(   x = c(NA, \"x.y\", \"x.z\", \"y.z\") ) separate(test, x, into = c(\"foo\", \"foo2\"), sep = \".\") #> shape: (4, 2) #> ┌──────┬──────┐ #> │ foo  ┆ foo2 │ #> │ ---  ┆ ---  │ #> │ str  ┆ str  │ #> ╞══════╪══════╡ #> │ null ┆ null │ #> │ x    ┆ y    │ #> │ x    ┆ z    │ #> │ y    ┆ z    │ #> └──────┴──────┘"},{"path":"/reference/sink_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream output to a CSV file — sink_csv","title":"Stream output to a CSV file — sink_csv","text":"function allows stream LazyFrame larger RAM directly .csv file without collecting R session, thus preventing crashes small memory.","code":""},{"path":"/reference/sink_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream output to a CSV file — sink_csv","text":"","code":"sink_csv(   .data,   path,   has_header = TRUE,   separator = \",\",   line_terminator = \"\\n\",   quote = \"\\\"\",   batch_size = 1024,   datetime_format = NULL,   date_format = NULL,   time_format = NULL,   float_precision = NULL,   null_values = \"\",   quote_style = \"necessary\",   maintain_order = TRUE,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   no_optimization = FALSE )"},{"path":"/reference/sink_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream output to a CSV file — sink_csv","text":".data Polars LazyFrame. path Output file (must .parquet file). has_header Whether include header CSV output. separator Separate CSV fields symbol. line_terminator String used end row. quote Byte use quoting character. batch_size Number rows processed per thread. datetime_format, date_format, time_format format string used format date time values. See ?strptime() accepted values. format specified, default fractional-second precision inferred maximum time unit found Datetime cols (). float_precision Number decimal places write, applied Float32 Float64 datatypes. null_values string representing null values (defaulting empty string). quote_style Determines quoting strategy used: \"necessary\" (default): puts quotes around fields necessary. necessary fields contain quote, delimiter record terminator. Quotes also necessary writing empty record (indistinguishable record one empty field). \"always\": puts quotes around every field. \"non_numeric\": puts quotes around fields non-numeric. Namely, writing field parse valid float integer, quotes used even strictly necessary. maintain_order Whether maintain order data processed (default TRUE). Setting FALSE slightly faster. type_coercion Coerce types operations succeed run minimal required memory (default TRUE). predicate_pushdown Applies filters early possible scan level (default TRUE). projection_pushdown Select columns needed scan level (default TRUE). simplify_expression Various optimizations, constant folding replacing expensive operations faster alternatives (default TRUE). slice_pushdown load required slice scan. materialize sliced outputs level. materialize sliced outputs (default TRUE). no_optimization Sets following optimizations FALSE: predicate_pushdown, projection_pushdown,  slice_pushdown, simplify_expression. Default FALSE.","code":""},{"path":"/reference/sink_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stream output to a CSV file — sink_csv","text":"Writes .csv file content LazyFrame.","code":""},{"path":"/reference/sink_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stream output to a CSV file — sink_csv","text":"","code":"if (FALSE) { # This is an example workflow where sink_csv() is not very useful because # the data would fit in memory. It simply is an example of using it at the # end of a piped workflow.  # Create files for the CSV input and output: file_csv <- tempfile(fileext = \".csv\") file_csv2 <- tempfile(fileext = \".csv\")  # Write some data in a CSV file fake_data <- do.call(\"rbind\", rep(list(mtcars), 1000)) write.csv(fake_data, file = file_csv)  # In a new R session, we could read this file as a LazyFrame, do some operations, # and write it to another CSV file without ever collecting it in the R session: polars::pl$scan_csv(file_csv) |>   filter(cyl %in% c(4, 6), mpg > 22) |>   mutate(     hp_gear_ratio = hp / gear   ) |>   sink_csv(path = file_csv2)  }"},{"path":"/reference/sink_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream output to a parquet file — sink_parquet","title":"Stream output to a parquet file — sink_parquet","text":"function allows stream LazyFrame larger RAM directly .parquet file without collecting R session, thus preventing crashes small memory.","code":""},{"path":"/reference/sink_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream output to a parquet file — sink_parquet","text":"","code":"sink_parquet(   .data,   path,   compression = \"zstd\",   compression_level = 3,   statistics = FALSE,   row_group_size = NULL,   data_pagesize_limit = NULL,   maintain_order = TRUE,   type_coercion = TRUE,   predicate_pushdown = TRUE,   projection_pushdown = TRUE,   simplify_expression = TRUE,   slice_pushdown = TRUE,   no_optimization = FALSE )"},{"path":"/reference/sink_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream output to a parquet file — sink_parquet","text":".data Polars LazyFrame. path Output file (must .parquet file). compression compression method. One : \"uncompressed\" \"zstd\" (default): good compression performance \"lz4\": fast compression / decompression \"snappy\": backwards compatibility guarantees deal older parquet readers. \"gzip\", \"lzo\", \"brotli\" compression_level level compression use (default 3). used compression one \"gzip\", \"brotli\", \"zstd\". Higher compression means smaller files disk. \"gzip\" : min-level = 0, max-level = 10 \"brotli\" : min-level = 0, max-level = 11 \"zstd\" : min-level = 1, max-level = 22. statistics Whether compute write column statistics (default FALSE). requires computations. row_group_size Size row groups number rows. NULL (default), chunks DataFrame used. Writing smaller chunks may reduce memory pressure improve writing speeds. data_pagesize_limit NULL (default), limit around 1MB. maintain_order Whether maintain order data processed (default TRUE). Setting FALSE slightly faster. type_coercion Coerce types operations succeed run minimal required memory (default TRUE). predicate_pushdown Applies filters early possible scan level (default TRUE). projection_pushdown Select columns needed scan level (default TRUE). simplify_expression Various optimizations, constant folding replacing expensive operations faster alternatives (default TRUE). slice_pushdown load required slice scan. materialize sliced outputs level. materialize sliced outputs (default TRUE). no_optimization Sets following optimizations FALSE: predicate_pushdown, projection_pushdown,  slice_pushdown, simplify_expression. Default FALSE.","code":""},{"path":"/reference/sink_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stream output to a parquet file — sink_parquet","text":"Writes .parquet file content LazyFrame.","code":""},{"path":"/reference/sink_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stream output to a parquet file — sink_parquet","text":"","code":"if (FALSE) { # This is an example workflow where sink_parquet() is not very useful because # the data would fit in memory. It simply is an example of using it at the # end of a piped workflow.  # Create files for the CSV input and the Parquet output: file_csv <- tempfile(fileext = \".csv\") file_parquet <- tempfile(fileext = \".parquet\")  # Write some data in a CSV file fake_data <- do.call(\"rbind\", rep(list(mtcars), 1000)) write.csv(fake_data, file = file_csv)  # In a new R session, we could read this file as a LazyFrame, do some operations, # and write it to a parquet file without ever collecting it in the R session: polars::pl$scan_csv(file_csv) |>   filter(cyl %in% c(4, 6), mpg > 22) |>   mutate(     hp_gear_ratio = hp / gear   ) |>   sink_parquet(path = file_parquet)  }"},{"path":"/reference/slice_tail.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows of a Data/LazyFrame — slice_tail.DataFrame","title":"Subset rows of a Data/LazyFrame — slice_tail.DataFrame","text":"Subset rows Data/LazyFrame","code":""},{"path":"/reference/slice_tail.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows of a Data/LazyFrame — slice_tail.DataFrame","text":"","code":"# S3 method for DataFrame slice_tail(.data, ..., n)  # S3 method for LazyFrame slice_tail(.data, ..., n)  # S3 method for DataFrame slice_head(.data, ..., n)  # S3 method for LazyFrame slice_head(.data, ..., n)  # S3 method for DataFrame slice_sample(.data, ..., n = NULL, prop = NULL, replace = FALSE)"},{"path":"/reference/slice_tail.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows of a Data/LazyFrame — slice_tail.DataFrame","text":".data Polars Data/LazyFrame ... used. n number rows select start end data. used prop. prop Proportion rows select. used n. replace Perform sampling replacement (TRUE) without (FALSE).","code":""},{"path":"/reference/slice_tail.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows of a Data/LazyFrame — slice_tail.DataFrame","text":"","code":"pl_test <- polars::pl$DataFrame(iris) slice_head(pl_test, n = 3) #> shape: (3, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘ slice_tail(pl_test, n = 3) #> shape: (3, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘ slice_sample(pl_test, n = 5) #> shape: (5, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species    │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat        │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡ #> │ 4.9          ┆ 2.4         ┆ 3.3          ┆ 1.0         ┆ versicolor │ #> │ 6.6          ┆ 3.0         ┆ 4.4          ┆ 1.4         ┆ versicolor │ #> │ 5.5          ┆ 3.5         ┆ 1.3          ┆ 0.2         ┆ setosa     │ #> │ 6.7          ┆ 3.3         ┆ 5.7          ┆ 2.1         ┆ virginica  │ #> │ 7.6          ┆ 3.0         ┆ 6.6          ┆ 2.1         ┆ virginica  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘ slice_sample(pl_test, prop = 0.1) #> shape: (15, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species    │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat        │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡ #> │ 6.1          ┆ 2.8         ┆ 4.7          ┆ 1.2         ┆ versicolor │ #> │ 6.0          ┆ 2.9         ┆ 4.5          ┆ 1.5         ┆ versicolor │ #> │ 6.1          ┆ 3.0         ┆ 4.6          ┆ 1.4         ┆ versicolor │ #> │ 5.9          ┆ 3.0         ┆ 4.2          ┆ 1.5         ┆ versicolor │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …          │ #> │ 6.0          ┆ 3.0         ┆ 4.8          ┆ 1.8         ┆ virginica  │ #> │ 6.9          ┆ 3.1         ┆ 5.4          ┆ 2.1         ┆ virginica  │ #> │ 5.6          ┆ 2.9         ┆ 3.6          ┆ 1.3         ┆ versicolor │ #> │ 6.7          ┆ 3.1         ┆ 4.4          ┆ 1.4         ┆ versicolor │ #> └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘"},{"path":"/reference/summarize.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize each group down to one row — summarize.DataFrame","title":"Summarize each group down to one row — summarize.DataFrame","text":"summarize() returns one row combination grouping variables (one difference dplyr::summarize() summarize() accepts grouped data). contain one column grouping variable one column summary statistics specified.","code":""},{"path":"/reference/summarize.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize each group down to one row — summarize.DataFrame","text":"","code":"# S3 method for DataFrame summarize(.data, ...)  # S3 method for DataFrame summarise(.data, ...)  # S3 method for LazyFrame summarize(.data, ...)  # S3 method for LazyFrame summarise(.data, ...)"},{"path":"/reference/summarize.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize each group down to one row — summarize.DataFrame","text":".data Polars Data/LazyFrame ... Name-value pairs. name gives name column output. value can : vector length current group (whole data frame ungrouped). NULL, remove column.","code":""},{"path":"/reference/summarize.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize each group down to one row — summarize.DataFrame","text":"","code":"mtcars |>   as_polars() |>   group_by(cyl) |>   summarize(gear = mean(gear), gear2 = sd(gear)) #> shape: (3, 2) #> ┌─────┬───────┐ #> │ cyl ┆ gear2 │ #> │ --- ┆ ---   │ #> │ f64 ┆ f64   │ #> ╞═════╪═══════╡ #> │ 6.0 ┆ null  │ #> │ 8.0 ┆ null  │ #> │ 4.0 ┆ null  │ #> └─────┴───────┘"},{"path":"/reference/to_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Polars DataFrame to an R data.frame — to_r","title":"Convert a Polars DataFrame to an R data.frame — to_r","text":"simple wrapper $to_data_frame() present polars. make function work pipe workflow.","code":""},{"path":"/reference/to_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Polars DataFrame to an R data.frame — to_r","text":"","code":"to_r(.data, shrink_i64 = TRUE)"},{"path":"/reference/to_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Polars DataFrame to an R data.frame — to_r","text":".data Polars DataFrame (LazyFrames modified). object returned -. shrink_i64 Try shrink i64 i32 lower. See Details.","code":""},{"path":"/reference/to_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a Polars DataFrame to an R data.frame — to_r","text":"Int64 format accepted Polars natively R (package bit64 helps ). Therefore, int64 values give infinitely small values converted R. shrink_i64 TRUE, int64 columns shrunk lower int converted R.","code":""},{"path":"/reference/to_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Polars DataFrame to an R data.frame — to_r","text":"","code":"iris |>   as_polars() |>   filter(Sepal.Length > 6) |>   to_r() #>    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1           7.0         3.2          4.7         1.4 versicolor #> 2           6.4         3.2          4.5         1.5 versicolor #> 3           6.9         3.1          4.9         1.5 versicolor #> 4           6.5         2.8          4.6         1.5 versicolor #> 5           6.3         3.3          4.7         1.6 versicolor #> 6           6.6         2.9          4.6         1.3 versicolor #> 7           6.1         2.9          4.7         1.4 versicolor #> 8           6.7         3.1          4.4         1.4 versicolor #> 9           6.2         2.2          4.5         1.5 versicolor #> 10          6.1         2.8          4.0         1.3 versicolor #> 11          6.3         2.5          4.9         1.5 versicolor #> 12          6.1         2.8          4.7         1.2 versicolor #> 13          6.4         2.9          4.3         1.3 versicolor #> 14          6.6         3.0          4.4         1.4 versicolor #> 15          6.8         2.8          4.8         1.4 versicolor #> 16          6.7         3.0          5.0         1.7 versicolor #> 17          6.7         3.1          4.7         1.5 versicolor #> 18          6.3         2.3          4.4         1.3 versicolor #> 19          6.1         3.0          4.6         1.4 versicolor #> 20          6.2         2.9          4.3         1.3 versicolor #> 21          6.3         3.3          6.0         2.5  virginica #> 22          7.1         3.0          5.9         2.1  virginica #> 23          6.3         2.9          5.6         1.8  virginica #> 24          6.5         3.0          5.8         2.2  virginica #> 25          7.6         3.0          6.6         2.1  virginica #> 26          7.3         2.9          6.3         1.8  virginica #> 27          6.7         2.5          5.8         1.8  virginica #> 28          7.2         3.6          6.1         2.5  virginica #> 29          6.5         3.2          5.1         2.0  virginica #> 30          6.4         2.7          5.3         1.9  virginica #> 31          6.8         3.0          5.5         2.1  virginica #> 32          6.4         3.2          5.3         2.3  virginica #> 33          6.5         3.0          5.5         1.8  virginica #> 34          7.7         3.8          6.7         2.2  virginica #> 35          7.7         2.6          6.9         2.3  virginica #> 36          6.9         3.2          5.7         2.3  virginica #> 37          7.7         2.8          6.7         2.0  virginica #> 38          6.3         2.7          4.9         1.8  virginica #> 39          6.7         3.3          5.7         2.1  virginica #> 40          7.2         3.2          6.0         1.8  virginica #> 41          6.2         2.8          4.8         1.8  virginica #> 42          6.1         3.0          4.9         1.8  virginica #> 43          6.4         2.8          5.6         2.1  virginica #> 44          7.2         3.0          5.8         1.6  virginica #> 45          7.4         2.8          6.1         1.9  virginica #> 46          7.9         3.8          6.4         2.0  virginica #> 47          6.4         2.8          5.6         2.2  virginica #> 48          6.3         2.8          5.1         1.5  virginica #> 49          6.1         2.6          5.6         1.4  virginica #> 50          7.7         3.0          6.1         2.3  virginica #> 51          6.3         3.4          5.6         2.4  virginica #> 52          6.4         3.1          5.5         1.8  virginica #> 53          6.9         3.1          5.4         2.1  virginica #> 54          6.7         3.1          5.6         2.4  virginica #> 55          6.9         3.1          5.1         2.3  virginica #> 56          6.8         3.2          5.9         2.3  virginica #> 57          6.7         3.3          5.7         2.5  virginica #> 58          6.7         3.0          5.2         2.3  virginica #> 59          6.3         2.5          5.0         1.9  virginica #> 60          6.5         3.0          5.2         2.0  virginica #> 61          6.2         3.4          5.4         2.3  virginica"},{"path":"/reference/unite.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite multiple columns into one by pasting strings together — unite.DataFrame","title":"Unite multiple columns into one by pasting strings together — unite.DataFrame","text":"Unite multiple columns one pasting strings together","code":""},{"path":"/reference/unite.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite multiple columns into one by pasting strings together — unite.DataFrame","text":"","code":"# S3 method for DataFrame unite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)  # S3 method for LazyFrame unite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)"},{"path":"/reference/unite.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite multiple columns into one by pasting strings together — unite.DataFrame","text":"data Polars Data/LazyFrame col name new column, string symbol. ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. sep Separator use values. remove TRUE, remove input columns output Data/LazyFrame. na.rm TRUE, missing values replaced empty string prior uniting value.","code":""},{"path":"/reference/unite.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite multiple columns into one by pasting strings together — unite.DataFrame","text":"","code":"test <- polars::pl$DataFrame(   year = 2009:2011,   month = 10:12,   day = c(11L, 22L, 28L),   name_day = c(\"Monday\", \"Thursday\", \"Wednesday\") )  # By default, united columns are dropped unite(test, col = \"full_date\", year, month, day, sep = \"-\") #> shape: (3, 2) #> ┌───────────┬────────────┐ #> │ name_day  ┆ full_date  │ #> │ ---       ┆ ---        │ #> │ str       ┆ str        │ #> ╞═══════════╪════════════╡ #> │ Monday    ┆ 2009-10-11 │ #> │ Thursday  ┆ 2010-11-22 │ #> │ Wednesday ┆ 2011-12-28 │ #> └───────────┴────────────┘ unite(test, col = \"full_date\", year, month, day, sep = \"-\", remove = FALSE) #> shape: (3, 5) #> ┌──────┬───────┬─────┬───────────┬────────────┐ #> │ year ┆ month ┆ day ┆ name_day  ┆ full_date  │ #> │ ---  ┆ ---   ┆ --- ┆ ---       ┆ ---        │ #> │ i32  ┆ i32   ┆ i32 ┆ str       ┆ str        │ #> ╞══════╪═══════╪═════╪═══════════╪════════════╡ #> │ 2009 ┆ 10    ┆ 11  ┆ Monday    ┆ 2009-10-11 │ #> │ 2010 ┆ 11    ┆ 22  ┆ Thursday  ┆ 2010-11-22 │ #> │ 2011 ┆ 12    ┆ 28  ┆ Wednesday ┆ 2011-12-28 │ #> └──────┴───────┴─────┴───────────┴────────────┘  test2 <- polars::pl$DataFrame(   name = c(\"John\", \"Jack\", \"Thomas\"),   middlename = c(\"T.\", NA, \"F.\"),   surname = c(\"Smith\", \"Thompson\", \"Jones\") )  # By default, NA values are kept in the character output unite(test2, col = \"full_name\", everything(), sep = \" \") #> shape: (3, 1) #> ┌──────────────────┐ #> │ full_name        │ #> │ ---              │ #> │ str              │ #> ╞══════════════════╡ #> │ John T. Smith    │ #> │ Jack NA Thompson │ #> │ Thomas F. Jones  │ #> └──────────────────┘ unite(test2, col = \"full_name\", everything(), sep = \" \", na.rm = TRUE) #> shape: (3, 1) #> ┌─────────────────┐ #> │ full_name       │ #> │ ---             │ #> │ str             │ #> ╞═════════════════╡ #> │ John T. Smith   │ #> │ Jack  Thompson  │ #> │ Thomas F. Jones │ #> └─────────────────┘"},{"path":"/news/index.html","id":"tidypolars-development-version","dir":"Changelog","previous_headings":"","what":"tidypolars (development version)","title":"tidypolars (development version)","text":"Breaking changes functions starting pl_ removed benefit S3 methods. example, pl_distinct() doesn’t exist anymore way use load dplyr use distinct() Polars DataFrame LazyFrame. avoid confusion compatibility dplyr tidyr. See #49 detailed explanation. New features New function duplicated_rows() opposite distinct() (#50). New argument .id bind_rows_polars(). Misc relig_income fish_encounters reexported anymore since tidyr now imported.","code":""},{"path":"/news/index.html","id":"tidypolars-020","dir":"Changelog","previous_headings":"","what":"tidypolars 0.2.0","title":"tidypolars 0.2.0","text":"tidypolars requires polars >= 0.9.0. New features Rename pl_fetch() fetch(). New functions supported: describe(), sink_csv(), slice_sample(). New argument fill pl_complete(). Support stringr::str_to_title() tools::toTitleCase(). Support stringr::fixed() use literal strings. Support replacements captured groups like \\\\1 stringr::str_replace() stringr::str_replace_all(). Bug fixes sink_parquet() didn’t use user inputs (apart path). Misc Clearer error message expression contains <pkg>::. supported now potentially implemented later. pl_colnames() longer exported.","code":""},{"path":"/news/index.html","id":"tidypolars-010","dir":"Changelog","previous_headings":"","what":"tidypolars 0.1.0","title":"tidypolars 0.1.0","text":"New features Support .numeric(), .character(), .logical(), grepl(), paste() expressions pl_filter(), pl_mutate() pl_summarize(). Support sink_parquet() (#38). Support fetch() (#42). Support additional stringr functions: str_detect(), str_extract_all(), str_pad(), str_squish(), str_trim(), word() (arguments corner cases supported yet). Add optimization parameters collect(). Bug fixes Fix pl_mutate() pl_summarize() expressions use variables previously created modified (#10, #37). Fix bug pl_filter() passing vector RHS %%. Misc Improve backend translate R expressions Polars expressions. also led complete rewriting vignette “R Polars expressions” (#27). Error messages now report correct function call. Improve CI coverage (#35).","code":""},{"path":"/news/index.html","id":"tidypolars-001","dir":"Changelog","previous_headings":"","what":"tidypolars 0.0.1","title":"tidypolars 0.0.1","text":"First Github release.","code":""}]
