[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidypolars authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/faq.html","id":"is-tidypolars-slower-than-polars","dir":"Articles","previous_headings":"","what":"Is tidypolars slower than polars?","title":"FAQ","text":", just marginally. objective tidypolars modify data, simply translate tidyverse syntax polars syntax. polars still charge data manipulations hood. Therefore, might minor overhead still need parse expressions rewrite polars syntax (see Parsing expressions vignette) extremely marginal.","code":""},{"path":"/articles/faq.html","id":"am-i-stuck-with-tidypolars","dir":"Articles","previous_headings":"","what":"Am I stuck with tidypolars?","title":"FAQ","text":", tidypolars always return DataFrames, LazyFrames Series. Therefore, point want use polars need control want reduce number dependencies, can easily .","code":""},{"path":"/articles/faq.html","id":"do-i-still-need-to-load-polars","dir":"Articles","previous_headings":"","what":"Do I still need to load polars?","title":"FAQ","text":"Yes, tidypolars doesn’t provide functions create polars DataFrame LazyFrame read data. ’ll still need use polars .","code":""},{"path":"/articles/faq.html","id":"can-i-see-some-benchmarks","dir":"Articles","previous_headings":"","what":"Can I see some benchmarks?","title":"FAQ","text":"Sure take grain salt: small benchmarks may representative real-life scenarios don’t necessarily use full capacities packages (e.g keyed data.tables). refer DuckDB benchmarks serious ones. benchmarks mostly useful show polars tidypolars equivalent terms performance.","code":"library(polars) library(tidypolars) library(dplyr, warn.conflicts = FALSE) library(data.table, warn.conflicts = FALSE)  test <- data.frame(   grp = sample(letters, 1e7, TRUE),   val1 = sample(1:1000, 1e7, TRUE),   val2 = sample(1:1000, 1e7, TRUE) )  pl_test <- pl$DataFrame(test) dt_test <- as.data.table(test)  bench::mark(   polars = pl_test$     groupby(\"grp\")$     agg(       pl$col('val1')$mean()$alias('x'),        pl$col('val2')$sum()$alias('y')     ),   tidypolars = pl_test |>      pl_group_by(grp) |>      pl_summarize(       x = mean(val1),       y = sum(val2)     ),   dplyr = test |>      group_by(grp) |>      summarize(       x = mean(val1),       y = sum(val2)     ),   data.table = dt_test[, .(x = mean(val1), y = sum(val2)), by = grp],   check = FALSE,   iterations = 15 ) #> Warning: Some expressions had a GC in every iteration; so filtering is #> disabled. #> # A tibble: 4 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 polars        185ms    290ms      3.58     565KB    0     #> 2 tidypolars    209ms    348ms      2.92     470KB    0.195 #> 3 dplyr         462ms       1s      1.12     242MB    1.12  #> 4 data.table    328ms    401ms      2.25     273MB    2.25  bench::mark(   polars = pl_test$     filter(pl$col(\"grp\") == \"a\" | pl$col(\"grp\") == \"b\"),   tidypolars = pl_test |>      pl_filter(grp == \"a\" | grp == \"b\"),   dplyr = test |>      filter(grp %in% c(\"a\", \"b\")),   data.table = dt_test[grp %chin% c(\"a\", \"b\")],   check = FALSE,   iterations = 15 ) #> # A tibble: 4 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 polars      121.6ms  145.1ms      5.97   163.7KB    0     #> 2 tidypolars  117.1ms  142.4ms      5.87    41.1KB    0     #> 3 dplyr       641.8ms  641.8ms      1.56   281.9MB   31.2   #> 4 data.table   42.9ms   57.1ms     13.8    100.6MB    0.982"},{"path":"/articles/parsing-expressions.html","id":"why-should-we-use-polars-expressions","dir":"Articles","previous_headings":"","what":"Why should we use Polars expressions?","title":"Parsing expressions","text":"Polars provides way evaluate custom functions using $apply() $map(). However, strongly discouraged people use Polars’ numerous built-functions, optimized parallelized (time) internally. Therefore, seems conflict two objectives tidypolars: provide Polars performance keep using R tidyverse syntax","code":""},{"path":"/articles/parsing-expressions.html","id":"how-does-tidypolars-work-with-expressions","dir":"Articles","previous_headings":"","what":"How does tidypolars work with expressions?","title":"Parsing expressions","text":"need parse expressions R users provide convert Polars syntax. , tidypolars works several steps. main tools rewriting process parse() getParseData(). example, suppose string contains expression user wants pass pl_mutate(): Using parse() getParseData(), can represent table element: particular, interested columns token text. get variable names replace pl$col(varname), keep token == SYMBOL check text values match column names data. can also extract function calls token == SYMBOL_FUNCTION_CALL. function call, check whether ’s Polars equivalent. one, prefix function call pl_. example, mean(x) transformed pl_mean(x), defined short function returns Polars expression x$mean(). Finally, one last challenge R functions Polars equivalent necessarily arguments. example, mean() argument na.rm drop missing values. Polars, done automatically. Overall, elements R function used Polars, generate message form: Now, know tidypolars converts R expressions Polars expressions.","code":"expr <- \"mean(Petal.Length) / sum(Sepal.Width)\" parsed <- parse(text = expr, keep.source = TRUE) p_d <- utils::getParseData(parsed) p_d #>    line1 col1 line2 col2 id parent                token terminal         text #> 23     1    1     1   37 23      0                 expr    FALSE              #> 10     1    1     1   18 10     23                 expr    FALSE              #> 1      1    1     1    4  1      3 SYMBOL_FUNCTION_CALL     TRUE         mean #> 3      1    1     1    4  3     10                 expr    FALSE              #> 2      1    5     1    5  2     10                  '('     TRUE            ( #> 4      1    6     1   17  4      6               SYMBOL     TRUE Petal.Length #> 6      1    6     1   17  6     10                 expr    FALSE              #> 5      1   18     1   18  5     10                  ')'     TRUE            ) #> 11     1   20     1   20 11     23                  '/'     TRUE            / #> 21     1   22     1   37 21     23                 expr    FALSE              #> 12     1   22     1   24 12     14 SYMBOL_FUNCTION_CALL     TRUE          sum #> 14     1   22     1   24 14     21                 expr    FALSE              #> 13     1   25     1   25 13     21                  '('     TRUE            ( #> 15     1   26     1   36 15     17               SYMBOL     TRUE  Sepal.Width #> 17     1   26     1   36 17     21                 expr    FALSE              #> 16     1   37     1   37 16     21                  ')'     TRUE            ) When the dataset is a Polars DataFrame or LazyFrame, `mean()` only needs  one argument. Additional arguments will not be used."},{"path":"/articles/parsing-expressions.html","id":"drawback","dir":"Articles","previous_headings":"","what":"Drawback","title":"Parsing expressions","text":"drawback approach tidypolars can work functions programmed know. example, recognizes ifelse() ifelse() buried custom function defined elsewhere, possible convert Polars syntax lose performance gains .","code":""},{"path":[]},{"path":"/articles/tidypolars.html","id":"you-dont-use-the-tidyverse","dir":"Articles","previous_headings":"","what":"You don’t use the tidyverse","title":"Getting started","text":"tidypolars provides two types functions: replicate functions tidyverse “unique” polars. former always prefixed pl_. example, tidypolars::pl_filter() equivalent dplyr::filter(). Like tidyverse, can pipe multiple tidypolars functions: use polars’ lazy API, need call pl_collect() end chained expression: tidypolars always return DataFrame LazyFrame can still use polars original syntax chained expression: code depends polars R core packages.","code":"pl_who |>    pl_filter(year > 1990) |>    pl_drop_na(newrel_f3544) |>    pl_select(iso3, year, matches(\"^newrel(.*)_f\")) #> shape: (183, 9) #> ┌──────┬──────┬───────────┬────────────┬───┬────────────┬──────────────┬──────────────┬────────────┐ #> │ iso3 ┆ year ┆ newrel_f0 ┆ newrel_f15 ┆ … ┆ newrel_f35 ┆ newrel_f4554 ┆ newrel_f5564 ┆ newrel_f65 │ #> │ ---  ┆ ---  ┆ 14        ┆ 24         ┆   ┆ 44         ┆ ---          ┆ ---          ┆ ---        │ #> │ str  ┆ i32  ┆ ---       ┆ ---        ┆   ┆ ---        ┆ i32          ┆ i32          ┆ i32        │ #> │      ┆      ┆ i32       ┆ i32        ┆   ┆ i32        ┆              ┆              ┆            │ #> ╞══════╪══════╪═══════════╪════════════╪═══╪════════════╪══════════════╪══════════════╪════════════╡ #> │ ALB  ┆ 2013 ┆ 5         ┆ 28         ┆ … ┆ 13         ┆ 18           ┆ 14           ┆ 34         │ #> │ DZA  ┆ 2013 ┆ 50        ┆ 861        ┆ … ┆ 377        ┆ 267          ┆ 205          ┆ 352        │ #> │ AND  ┆ 2013 ┆ 0         ┆ 0          ┆ … ┆ 1          ┆ 0            ┆ 0            ┆ 0          │ #> │ AGO  ┆ 2013 ┆ 626       ┆ 2644       ┆ … ┆ 1671       ┆ 991          ┆ 481          ┆ 314        │ #> │ …    ┆ …    ┆ …         ┆ …          ┆ … ┆ …          ┆ …            ┆ …            ┆ …          │ #> │ VNM  ┆ 2013 ┆ 78        ┆ 1916       ┆ … ┆ 1671       ┆ 1715         ┆ 1954         ┆ 3110       │ #> │ YEM  ┆ 2013 ┆ 522       ┆ 1194       ┆ … ┆ 825        ┆ 736          ┆ 512          ┆ 360        │ #> │ ZMB  ┆ 2013 ┆ 1517      ┆ 2709       ┆ … ┆ 3752       ┆ 1754         ┆ 941          ┆ 669        │ #> │ ZWE  ┆ 2013 ┆ 1252      ┆ 2069       ┆ … ┆ 3526       ┆ 1453         ┆ 811          ┆ 725        │ #> └──────┴──────┴───────────┴────────────┴───┴────────────┴──────────────┴──────────────┴────────────┘ pl_who_l <- as_polars(read.csv(\"who.csv\"), lazy = TRUE)  out <- pl_who_l |>    pl_filter(year > 1990) |>    pl_drop_na(newrel_f3544) |>    pl_select(iso3, year, matches(\"^newrel(.*)_f\"))  # this just prints the query out #> [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\" #>  SELECT [col(\"iso3\"), col(\"year\"), col(\"newrel_f014\"), col(\"newrel_f1524\"), col(\"newrel_f2534\"), col(\"newrel_f3544\"), col(\"newrel_f4554\"), col(\"newrel_f5564\"), col(\"newrel_f65\")] FROM #>   FILTER col(\"newrel_f3544\").is_not_null().fold([true]) FROM #>   FILTER [(col(\"year\")) > (1990.0)] FROM #>   DF [\"X\", \"country\", \"iso2\", \"iso3\"]; PROJECT */61 COLUMNS; SELECTION: \"None\"  # this performs the query out |>    pl_collect() #> shape: (183, 9) #> ┌──────┬──────┬───────────┬────────────┬───┬────────────┬──────────────┬──────────────┬────────────┐ #> │ iso3 ┆ year ┆ newrel_f0 ┆ newrel_f15 ┆ … ┆ newrel_f35 ┆ newrel_f4554 ┆ newrel_f5564 ┆ newrel_f65 │ #> │ ---  ┆ ---  ┆ 14        ┆ 24         ┆   ┆ 44         ┆ ---          ┆ ---          ┆ ---        │ #> │ str  ┆ i32  ┆ ---       ┆ ---        ┆   ┆ ---        ┆ i32          ┆ i32          ┆ i32        │ #> │      ┆      ┆ i32       ┆ i32        ┆   ┆ i32        ┆              ┆              ┆            │ #> ╞══════╪══════╪═══════════╪════════════╪═══╪════════════╪══════════════╪══════════════╪════════════╡ #> │ ALB  ┆ 2013 ┆ 5         ┆ 28         ┆ … ┆ 13         ┆ 18           ┆ 14           ┆ 34         │ #> │ DZA  ┆ 2013 ┆ 50        ┆ 861        ┆ … ┆ 377        ┆ 267          ┆ 205          ┆ 352        │ #> │ AND  ┆ 2013 ┆ 0         ┆ 0          ┆ … ┆ 1          ┆ 0            ┆ 0            ┆ 0          │ #> │ AGO  ┆ 2013 ┆ 626       ┆ 2644       ┆ … ┆ 1671       ┆ 991          ┆ 481          ┆ 314        │ #> │ …    ┆ …    ┆ …         ┆ …          ┆ … ┆ …          ┆ …            ┆ …            ┆ …          │ #> │ VNM  ┆ 2013 ┆ 78        ┆ 1916       ┆ … ┆ 1671       ┆ 1715         ┆ 1954         ┆ 3110       │ #> │ YEM  ┆ 2013 ┆ 522       ┆ 1194       ┆ … ┆ 825        ┆ 736          ┆ 512          ┆ 360        │ #> │ ZMB  ┆ 2013 ┆ 1517      ┆ 2709       ┆ … ┆ 3752       ┆ 1754         ┆ 941          ┆ 669        │ #> │ ZWE  ┆ 2013 ┆ 1252      ┆ 2069       ┆ … ┆ 3526       ┆ 1453         ┆ 811          ┆ 725        │ #> └──────┴──────┴───────────┴────────────┴───┴────────────┴──────────────┴──────────────┴────────────┘ out <- pl_who |>    pl_filter(year > 1990) |>    pl_select(iso3, year, matches(\"^newrel(.*)_f\"))  out #> shape: (4_908, 9) #> ┌──────┬──────┬───────────┬────────────┬───┬────────────┬──────────────┬──────────────┬────────────┐ #> │ iso3 ┆ year ┆ newrel_f0 ┆ newrel_f15 ┆ … ┆ newrel_f35 ┆ newrel_f4554 ┆ newrel_f5564 ┆ newrel_f65 │ #> │ ---  ┆ ---  ┆ 14        ┆ 24         ┆   ┆ 44         ┆ ---          ┆ ---          ┆ ---        │ #> │ str  ┆ i32  ┆ ---       ┆ ---        ┆   ┆ ---        ┆ i32          ┆ i32          ┆ i32        │ #> │      ┆      ┆ i32       ┆ i32        ┆   ┆ i32        ┆              ┆              ┆            │ #> ╞══════╪══════╪═══════════╪════════════╪═══╪════════════╪══════════════╪══════════════╪════════════╡ #> │ AFG  ┆ 1991 ┆ null      ┆ null       ┆ … ┆ null       ┆ null         ┆ null         ┆ null       │ #> │ AFG  ┆ 1992 ┆ null      ┆ null       ┆ … ┆ null       ┆ null         ┆ null         ┆ null       │ #> │ AFG  ┆ 1993 ┆ null      ┆ null       ┆ … ┆ null       ┆ null         ┆ null         ┆ null       │ #> │ AFG  ┆ 1994 ┆ null      ┆ null       ┆ … ┆ null       ┆ null         ┆ null         ┆ null       │ #> │ …    ┆ …    ┆ …         ┆ …          ┆ … ┆ …          ┆ …            ┆ …            ┆ …          │ #> │ ZWE  ┆ 2010 ┆ null      ┆ null       ┆ … ┆ null       ┆ null         ┆ null         ┆ null       │ #> │ ZWE  ┆ 2011 ┆ null      ┆ null       ┆ … ┆ null       ┆ null         ┆ null         ┆ null       │ #> │ ZWE  ┆ 2012 ┆ null      ┆ null       ┆ … ┆ null       ┆ null         ┆ null         ┆ null       │ #> │ ZWE  ┆ 2013 ┆ 1252      ┆ 2069       ┆ … ┆ 3526       ┆ 1453         ┆ 811          ┆ 725        │ #> └──────┴──────┴───────────┴────────────┴───┴────────────┴──────────────┴──────────────┴────────────┘  out$   groupby(\"iso3\", maintain_order = TRUE)$   agg(     pl$all()$mean()   )$   sort(c(\"iso3\", \"year\")) #> shape: (219, 9) #> ┌──────┬────────┬───────────┬────────────┬───┬────────────┬────────────┬──────────────┬────────────┐ #> │ iso3 ┆ year   ┆ newrel_f0 ┆ newrel_f15 ┆ … ┆ newrel_f35 ┆ newrel_f45 ┆ newrel_f5564 ┆ newrel_f65 │ #> │ ---  ┆ ---    ┆ 14        ┆ 24         ┆   ┆ 44         ┆ 54         ┆ ---          ┆ ---        │ #> │ str  ┆ f64    ┆ ---       ┆ ---        ┆   ┆ ---        ┆ ---        ┆ f64          ┆ f64        │ #> │      ┆        ┆ f64       ┆ f64        ┆   ┆ f64        ┆ f64        ┆              ┆            │ #> ╞══════╪════════╪═══════════╪════════════╪═══╪════════════╪════════════╪══════════════╪════════════╡ #> │ ABW  ┆ 2002.0 ┆ null      ┆ 1.0        ┆ … ┆ null       ┆ 1.0        ┆ 2.0          ┆ 2.0        │ #> │ AFG  ┆ 2002.0 ┆ 1749.0    ┆ null       ┆ … ┆ null       ┆ null       ┆ null         ┆ null       │ #> │ AGO  ┆ 2002.0 ┆ 626.0     ┆ 2644.0     ┆ … ┆ 1671.0     ┆ 991.0      ┆ 481.0        ┆ 314.0      │ #> │ AIA  ┆ 2002.0 ┆ 0.0       ┆ 0.0        ┆ … ┆ 0.0        ┆ 0.0        ┆ 0.0          ┆ 0.0        │ #> │ …    ┆ …      ┆ …         ┆ …          ┆ … ┆ …          ┆ …          ┆ …            ┆ …          │ #> │ YEM  ┆ 2002.0 ┆ 522.0     ┆ 1194.0     ┆ … ┆ 825.0      ┆ 736.0      ┆ 512.0        ┆ 360.0      │ #> │ ZAF  ┆ 2002.0 ┆ 18054.0   ┆ 21166.0    ┆ … ┆ 29297.0    ┆ 15910.0    ┆ 7807.0       ┆ 5672.0     │ #> │ ZMB  ┆ 2002.0 ┆ 1517.0    ┆ 2709.0     ┆ … ┆ 3752.0     ┆ 1754.0     ┆ 941.0        ┆ 669.0      │ #> │ ZWE  ┆ 2002.0 ┆ 1252.0    ┆ 2069.0     ┆ … ┆ 3526.0     ┆ 1453.0     ┆ 811.0        ┆ 725.0      │ #> └──────┴────────┴───────────┴────────────┴───┴────────────┴────────────┴──────────────┴────────────┘"},{"path":"/articles/tidypolars.html","id":"you-already-use-the-tidyverse","dir":"Articles","previous_headings":"","what":"You already use the tidyverse","title":"Getting started","text":"syntax close tidyverse one, can tedious add prefix pl_ every function. Therefore, already load dplyr tidyverse packages code, simply need use as_polars() data (read polars functions). rest code doesn’t need change . ’s example dplyr code: can simply use polars dataset instead, without changing anything (apart argument name rename_with()): NOTE: want use functions tidyverse ones, must load dplyr related packages first.","code":"library(dplyr, warn.conflicts = FALSE)  starwars |>    select(name, height, mass, species, sex) |>    mutate(     BMI = mass / ((height/100) ^2)   ) |>    select(BMI, everything()) |>    rename_with(.fn = toupper) #> # A tibble: 87 × 6 #>      BMI NAME               HEIGHT  MASS SPECIES SEX    #>    <dbl> <chr>               <int> <dbl> <chr>   <chr>  #>  1  26.0 Luke Skywalker        172    77 Human   male   #>  2  26.9 C-3PO                 167    75 Droid   none   #>  3  34.7 R2-D2                  96    32 Droid   none   #>  4  33.3 Darth Vader           202   136 Human   male   #>  5  21.8 Leia Organa           150    49 Human   female #>  6  37.9 Owen Lars             178   120 Human   male   #>  7  27.5 Beru Whitesun lars    165    75 Human   female #>  8  34.0 R5-D4                  97    32 Droid   none   #>  9  25.1 Biggs Darklighter     183    84 Human   male   #> 10  23.2 Obi-Wan Kenobi        182    77 Human   male   #> # ℹ 77 more rows library(tidypolars)  starwars |>    as_polars() |>    select(name, height, mass, species, sex) |>    mutate(     BMI = mass / ((height/100) ^2)   ) |>    select(BMI, everything()) |>    rename_with(fn = toupper) #> shape: (87, 6) #> ┌───────────┬────────────────┬────────┬───────┬─────────┬────────┐ #> │ BMI       ┆ NAME           ┆ HEIGHT ┆ MASS  ┆ SPECIES ┆ SEX    │ #> │ ---       ┆ ---            ┆ ---    ┆ ---   ┆ ---     ┆ ---    │ #> │ f64       ┆ str            ┆ i32    ┆ f64   ┆ str     ┆ str    │ #> ╞═══════════╪════════════════╪════════╪═══════╪═════════╪════════╡ #> │ 26.027582 ┆ Luke Skywalker ┆ 172    ┆ 77.0  ┆ Human   ┆ male   │ #> │ 26.892323 ┆ C-3PO          ┆ 167    ┆ 75.0  ┆ Droid   ┆ none   │ #> │ 34.722222 ┆ R2-D2          ┆ 96     ┆ 32.0  ┆ Droid   ┆ none   │ #> │ 33.330066 ┆ Darth Vader    ┆ 202    ┆ 136.0 ┆ Human   ┆ male   │ #> │ …         ┆ …              ┆ …      ┆ …     ┆ …       ┆ …      │ #> │ null      ┆ Poe Dameron    ┆ null   ┆ null  ┆ Human   ┆ male   │ #> │ null      ┆ BB8            ┆ null   ┆ null  ┆ Droid   ┆ none   │ #> │ null      ┆ Captain Phasma ┆ null   ┆ null  ┆ null    ┆ null   │ #> │ 16.528926 ┆ Padmé Amidala  ┆ 165    ┆ 45.0  ┆ Human   ┆ female │ #> └───────────┴────────────────┴────────┴───────┴─────────┴────────┘"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Etienne Bacher. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bacher E (2023). tidypolars: Provide Functionalities Polars Syntax Tidyverse. R package version 0.0.0.9000, https://github.com/etiennebacher/tidypolars.","code":"@Manual{,   title = {tidypolars: Provide the Functionalities of Polars with the Syntax of the Tidyverse},   author = {Etienne Bacher},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/etiennebacher/tidypolars}, }"},{"path":"/index.html","id":"tidypolars","dir":"","previous_headings":"","what":"Provide the Functionalities of Polars with the Syntax of the Tidyverse","title":"Provide the Functionalities of Polars with the Syntax of the Tidyverse","text":"⚠️ ’re looking Python package “tidypolars”, ’re wrong repo. right one : markfairbanks/tidypolars ⚠️ Motivation General syntax Example","code":""},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Provide the Functionalities of Polars with the Syntax of the Tidyverse","text":"polars (Rust source R implementation) amazing packages. won’t argue interest using polars, already lot resources website. One characteristic polars syntax 1) extremely verbose, 2) close pandas syntax Python. makes quite easy read, yet another syntax learn R users accustomed far either base R, data.table tidyverse. objective tidypolars provide functions close tidyverse ones call polars functions hood don’t lose anything capacities. Moreover, objective keep tidypolars dependency-free exception polars (dependencies).","code":""},{"path":"/index.html","id":"general-syntax","dir":"","previous_headings":"","what":"General syntax","title":"Provide the Functionalities of Polars with the Syntax of the Tidyverse","text":"Overall, need add pl_ prefix tidyverse function ’re used . example, dplyr::mutate() modifies classic R dataframes, tidypolars::pl_mutate() modifies polars’ DataFrames LazyFrames.","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Provide the Functionalities of Polars with the Syntax of the Tidyverse","text":"tidypolars makes easier R users use polars: ’s still fast original polars syntax:","code":"library(polars) library(tidypolars)  # polars syntax pl$DataFrame(iris)$   select(c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"))$   with_columns(     pl$when(       (pl$col(\"Petal.Length\") / pl$col(\"Petal.Width\") > 3)     )$then(\"long\")$       otherwise(\"large\")$       alias(\"petal_type\")   ) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ petal_type │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str        │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ long       │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ long       │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ long       │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ long       │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …          │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ large      │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ large      │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ large      │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ large      │ #> └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘  # tidypolars syntax iris |>    as_polars() |>    pl_select(starts_with(\"Sep\", \"Pet\")) |>    pl_mutate(     petal_type = ifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")   ) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ petal_type │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str        │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ long       │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ long       │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ long       │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ long       │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …          │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ large      │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ large      │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ large      │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ large      │ #> └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘ library(dplyr, warn.conflicts = FALSE)  large_iris <- data.table::rbindlist(rep(list(iris), 100000))  bench::mark(   polars = {     pl$DataFrame(large_iris)$       select(c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"))$       with_columns(         pl$when(           (pl$col(\"Petal.Length\") / pl$col(\"Petal.Width\") > 3)         )$then(\"long\")$           otherwise(\"large\")$           alias(\"petal_type\")       )   },    tidypolars = {     large_iris |>        as_polars() |>        pl_select(starts_with(\"Sep\", \"Pet\")) |>        pl_mutate(         petal_type = ifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")       )   },   dplyr = {     large_iris |>        select(starts_with(c(\"Sep\", \"Pet\"))) |>        mutate(         petal_type = ifelse((Petal.Length / Petal.Width) > 3, \"long\", \"large\")       )   },   check = FALSE,   iterations = 10 ) #> # A tibble: 3 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 polars        1.88s    2.07s     0.482     629MB     2.89 #> 2 tidypolars    1.86s    1.91s     0.491     629MB     1.80 #> 3 dplyr         3.81s    3.81s     0.263     918MB     3.68"},{"path":"/reference/as_polars.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an R dataframe to a Polars Data/LazyFrame — as_polars","title":"Convert an R dataframe to a Polars Data/LazyFrame — as_polars","text":"operation time- memory-consuming. used small datasets. Use polars original functions read files instead.","code":""},{"path":"/reference/as_polars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an R dataframe to a Polars Data/LazyFrame — as_polars","text":"","code":"as_polars(.data, lazy = FALSE)"},{"path":"/reference/as_polars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an R dataframe to a Polars Data/LazyFrame — as_polars","text":".data R dataframe. lazy Convert data lazy format.","code":""},{"path":"/reference/as_polars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an R dataframe to a Polars Data/LazyFrame — as_polars","text":"","code":"mtcars |>   as_polars() #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘"},{"path":"/reference/describe_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the optimized and non-optimized query plans — describe_plan","title":"Show the optimized and non-optimized query plans — describe_plan","text":"functions available LazyFrames . describe_plan() shows query plan -, without optimization done Polars. query performed. running query, Polars applies list optimizations (filtering data sorting ). actual query plan ran Polars shown describe_optimized_plan(). Note queries read bottom top.","code":""},{"path":"/reference/describe_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the optimized and non-optimized query plans — describe_plan","text":"","code":"describe_plan(.data)  describe_optimized_plan(.data)"},{"path":"/reference/describe_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the optimized and non-optimized query plans — describe_plan","text":".data Polars LazyFrame","code":""},{"path":"/reference/describe_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the optimized and non-optimized query plans — describe_plan","text":"","code":"query <- mtcars |>   as_polars(lazy = TRUE) |>   pl_arrange(drat) |>   pl_filter(cyl == 3) |>   pl_select(mpg)  describe_plan(query) #>  SELECT [col(\"mpg\")] FROM #>   FILTER [(col(\"cyl\")) == (3.0)] FROM #>   SORT BY [col(\"drat\")] #>     DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"  describe_optimized_plan(query) #> FAST_PROJECT: [mpg] #>   SORT BY [col(\"drat\")] #>     DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT 3/11 COLUMNS; SELECTION: \"[(col(\\\"cyl\\\")) == (3.0)]\""},{"path":"/reference/expect_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"tinytest helper — expect_colnames","title":"tinytest helper — expect_colnames","text":"tinytest helper","code":""},{"path":"/reference/expect_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tinytest helper — expect_colnames","text":"","code":"expect_colnames(x, y)"},{"path":"/reference/expect_dim.html","id":null,"dir":"Reference","previous_headings":"","what":"tinytest helper — expect_dim","title":"tinytest helper — expect_dim","text":"tinytest helper","code":""},{"path":"/reference/expect_dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tinytest helper — expect_dim","text":"","code":"expect_dim(x, y)"},{"path":"/reference/fish_encounters.html","id":null,"dir":"Reference","previous_headings":"","what":"Fish encounters — fish_encounters","title":"Fish encounters — fish_encounters","text":"dataset reexported tidyr::fish_encounters","code":""},{"path":"/reference/fish_encounters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fish encounters — fish_encounters","text":"","code":"fish_encounters"},{"path":"/reference/fish_encounters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fish encounters — fish_encounters","text":"dataset variables: fish: Fish identifier station: Measurement station seen: fish seen? (1 yes, true rows)","code":""},{"path":"/reference/fish_encounters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fish encounters — fish_encounters","text":"Dataset provided Myfanwy Johnston; details https://fishsciences.github.io/post/visualizing-fish-encounter-histories/","code":""},{"path":"/reference/make_unique_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a column with unique id per row values — make_unique_id","title":"Create a column with unique id per row values — make_unique_id","text":"Create column unique id per row values","code":""},{"path":"/reference/make_unique_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a column with unique id per row values — make_unique_id","text":"","code":"make_unique_id(.data, ..., new_col = \"hash\")"},{"path":"/reference/make_unique_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a column with unique id per row values — make_unique_id","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. new_col Name new column","code":""},{"path":"/reference/make_unique_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a column with unique id per row values — make_unique_id","text":"","code":"mtcars |>   as_polars() |>   make_unique_id(am, gear) #> shape: (32, 12) #> ┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬─────────────────────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ hash                │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---                 │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ u64                 │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪═════════════════════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 5481148325778505091 │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 5481148325778505091 │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 4.0  ┆ 1.0  ┆ 5481148325778505091 │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 1.0  ┆ 3422524176585442423 │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …    ┆ …    ┆ …                   │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 4.0  ┆ 4747741669635682153 │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 6.0  ┆ 4747741669635682153 │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 8.0  ┆ 4747741669635682153 │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 2.0  ┆ 5481148325778505091 │ #> └──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴─────────────────────┘"},{"path":"/reference/pl_arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Order rows using column values — pl_arrange","title":"Order rows using column values — pl_arrange","text":"Order rows using column values","code":""},{"path":"/reference/pl_arrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order rows using column values — pl_arrange","text":"","code":"pl_arrange(.data, ...)"},{"path":"/reference/pl_arrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order rows using column values — pl_arrange","text":".data Polars Data/LazyFrame ... Quoted unquoted variable names. Select helpers used.","code":""},{"path":"/reference/pl_arrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order rows using column values — pl_arrange","text":"","code":"pl_test <- polars::pl$DataFrame(   x1 = c(\"a\", \"a\", \"b\", \"a\", \"c\"),   x2 = c(2, 1, 5, 3, 1),   value = sample(1:5) )  pl_arrange(pl_test, x1) #> shape: (5, 3) #> ┌─────┬─────┬───────┐ #> │ x1  ┆ x2  ┆ value │ #> │ --- ┆ --- ┆ ---   │ #> │ str ┆ f64 ┆ i32   │ #> ╞═════╪═════╪═══════╡ #> │ a   ┆ 2.0 ┆ 5     │ #> │ a   ┆ 1.0 ┆ 1     │ #> │ a   ┆ 3.0 ┆ 4     │ #> │ b   ┆ 5.0 ┆ 2     │ #> │ c   ┆ 1.0 ┆ 3     │ #> └─────┴─────┴───────┘ pl_arrange(pl_test, -\"x1\") #> shape: (5, 3) #> ┌─────┬─────┬───────┐ #> │ x1  ┆ x2  ┆ value │ #> │ --- ┆ --- ┆ ---   │ #> │ str ┆ f64 ┆ i32   │ #> ╞═════╪═════╪═══════╡ #> │ c   ┆ 1.0 ┆ 3     │ #> │ b   ┆ 5.0 ┆ 2     │ #> │ a   ┆ 2.0 ┆ 5     │ #> │ a   ┆ 1.0 ┆ 1     │ #> │ a   ┆ 3.0 ┆ 4     │ #> └─────┴─────┴───────┘ pl_arrange(pl_test, x1, -x2) #> shape: (5, 3) #> ┌─────┬─────┬───────┐ #> │ x1  ┆ x2  ┆ value │ #> │ --- ┆ --- ┆ ---   │ #> │ str ┆ f64 ┆ i32   │ #> ╞═════╪═════╪═══════╡ #> │ a   ┆ 3.0 ┆ 4     │ #> │ a   ┆ 2.0 ┆ 5     │ #> │ a   ┆ 1.0 ┆ 1     │ #> │ b   ┆ 5.0 ┆ 2     │ #> │ c   ┆ 1.0 ┆ 3     │ #> └─────┴─────┴───────┘"},{"path":"/reference/pl_bind_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Append multiple Data/LazyFrames next to each other — pl_bind_cols","title":"Append multiple Data/LazyFrames next to each other — pl_bind_cols","text":"Append multiple Data/LazyFrames next ","code":""},{"path":"/reference/pl_bind_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append multiple Data/LazyFrames next to each other — pl_bind_cols","text":"","code":"pl_bind_cols(...)"},{"path":"/reference/pl_bind_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append multiple Data/LazyFrames next to each other — pl_bind_cols","text":"... Polars DataFrames LazyFrames combine. argument can either Data/LazyFrame, list Data/LazyFrames. Columns matched name. Data/LazyFrames must number rows duplicated column names.","code":""},{"path":"/reference/pl_bind_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append multiple Data/LazyFrames next to each other — pl_bind_cols","text":"","code":"p1 <- polars::pl$DataFrame(   x = sample(letters, 20),   y = sample(1:100, 20) ) p2 <- polars::pl$DataFrame(   z = sample(letters, 20),   w = sample(1:100, 20) )  pl_bind_cols(p1, p2) #> shape: (20, 4) #> ┌─────┬─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   ┆ w   │ #> │ --- ┆ --- ┆ --- ┆ --- │ #> │ str ┆ i32 ┆ str ┆ i32 │ #> ╞═════╪═════╪═════╪═════╡ #> │ q   ┆ 12  ┆ y   ┆ 52  │ #> │ r   ┆ 28  ┆ c   ┆ 49  │ #> │ h   ┆ 77  ┆ f   ┆ 3   │ #> │ x   ┆ 26  ┆ g   ┆ 73  │ #> │ …   ┆ …   ┆ …   ┆ …   │ #> │ u   ┆ 1   ┆ i   ┆ 42  │ #> │ n   ┆ 22  ┆ m   ┆ 82  │ #> │ a   ┆ 99  ┆ j   ┆ 58  │ #> │ g   ┆ 93  ┆ o   ┆ 27  │ #> └─────┴─────┴─────┴─────┘ pl_bind_cols(list(p1, p2)) #> shape: (20, 4) #> ┌─────┬─────┬─────┬─────┐ #> │ x   ┆ y   ┆ z   ┆ w   │ #> │ --- ┆ --- ┆ --- ┆ --- │ #> │ str ┆ i32 ┆ str ┆ i32 │ #> ╞═════╪═════╪═════╪═════╡ #> │ q   ┆ 12  ┆ y   ┆ 52  │ #> │ r   ┆ 28  ┆ c   ┆ 49  │ #> │ h   ┆ 77  ┆ f   ┆ 3   │ #> │ x   ┆ 26  ┆ g   ┆ 73  │ #> │ …   ┆ …   ┆ …   ┆ …   │ #> │ u   ┆ 1   ┆ i   ┆ 42  │ #> │ n   ┆ 22  ┆ m   ┆ 82  │ #> │ a   ┆ 99  ┆ j   ┆ 58  │ #> │ g   ┆ 93  ┆ o   ┆ 27  │ #> └─────┴─────┴─────┴─────┘"},{"path":"/reference/pl_bind_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack multiple Data/LazyFrames on top of each other — pl_bind_rows","title":"Stack multiple Data/LazyFrames on top of each other — pl_bind_rows","text":"Stack multiple Data/LazyFrames top ","code":""},{"path":"/reference/pl_bind_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack multiple Data/LazyFrames on top of each other — pl_bind_rows","text":"","code":"pl_bind_rows(...)"},{"path":"/reference/pl_bind_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack multiple Data/LazyFrames on top of each other — pl_bind_rows","text":"... Polars DataFrames LazyFrames combine. argument can either Data/LazyFrame, list Data/LazyFrames. Columns matched name. Data/LazyFrames must number columns identical names.","code":""},{"path":"/reference/pl_bind_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack multiple Data/LazyFrames on top of each other — pl_bind_rows","text":"","code":"p1 <- polars::pl$DataFrame(   x = sample(letters, 20),   y = sample(1:100, 20) ) p2 <- polars::pl$DataFrame(   x = sample(letters, 20),   y = sample(1:100, 20) )  pl_bind_rows(p1, p2) #> shape: (40, 2) #> ┌─────┬─────┐ #> │ x   ┆ y   │ #> │ --- ┆ --- │ #> │ str ┆ i32 │ #> ╞═════╪═════╡ #> │ k   ┆ 70  │ #> │ r   ┆ 77  │ #> │ b   ┆ 85  │ #> │ g   ┆ 98  │ #> │ …   ┆ …   │ #> │ s   ┆ 86  │ #> │ r   ┆ 26  │ #> │ p   ┆ 91  │ #> │ y   ┆ 100 │ #> └─────┴─────┘  # this is equivalent pl_bind_rows(list(p1, p2)) #> shape: (40, 2) #> ┌─────┬─────┐ #> │ x   ┆ y   │ #> │ --- ┆ --- │ #> │ str ┆ i32 │ #> ╞═════╪═════╡ #> │ k   ┆ 70  │ #> │ r   ┆ 77  │ #> │ b   ┆ 85  │ #> │ g   ┆ 98  │ #> │ …   ┆ …   │ #> │ s   ┆ 86  │ #> │ r   ┆ 26  │ #> │ p   ┆ 91  │ #> │ y   ┆ 100 │ #> └─────┴─────┘"},{"path":"/reference/pl_collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect a LazyFrame — pl_collect","title":"Collect a LazyFrame — pl_collect","text":"Polars LazyFrames loaded memory. Running collect() checks execution plan, optimizes background performs . result loaded R session.","code":""},{"path":"/reference/pl_collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect a LazyFrame — pl_collect","text":"","code":"pl_collect(.data)"},{"path":"/reference/pl_collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect a LazyFrame — pl_collect","text":".data Polars LazyFrame","code":""},{"path":"/reference/pl_collect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect a LazyFrame — pl_collect","text":"","code":"dat_lazy <- polars::pl$DataFrame(iris)$lazy() pl_collect(dat_lazy) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘"},{"path":"/reference/pl_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get column names of a Polars Data/LazyFrame — pl_colnames","title":"Get column names of a Polars Data/LazyFrame — pl_colnames","text":"Get column names Polars Data/LazyFrame","code":""},{"path":"/reference/pl_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get column names of a Polars Data/LazyFrame — pl_colnames","text":"","code":"pl_colnames(x)"},{"path":"/reference/pl_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get column names of a Polars Data/LazyFrame — pl_colnames","text":"x Polars Data/LazyFrame GroupBy/LazyGroupBy","code":""},{"path":"/reference/pl_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get column names of a Polars Data/LazyFrame — pl_colnames","text":"character vector column names","code":""},{"path":"/reference/pl_complete.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete a data frame with missing combinations of data — pl_complete","title":"Complete a data frame with missing combinations of data — pl_complete","text":"Turns implicit missing values explicit missing values. useful completing missing combinations data. Note function work grouped data yet.","code":""},{"path":"/reference/pl_complete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete a data frame with missing combinations of data — pl_complete","text":"","code":"pl_complete(.data, ...)"},{"path":"/reference/pl_complete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete a data frame with missing combinations of data — pl_complete","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc.","code":""},{"path":"/reference/pl_complete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete a data frame with missing combinations of data — pl_complete","text":"","code":"if (FALSE) { # packageVersion(\"polars\") >= \"0.6.2\" test <- polars::pl$DataFrame(   country = c(\"France\", \"France\", \"UK\", \"UK\", \"Spain\"),   year = c(2020, 2021, 2019, 2020, 2022),   value = c(1, 2, 3, 4, 5) ) test  pl_complete(test, country, year) }"},{"path":"/reference/pl_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the observations in each group — pl_count","title":"Count the observations in each group — pl_count","text":"Count observations group","code":""},{"path":"/reference/pl_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the observations in each group — pl_count","text":"","code":"pl_count(.data, ..., sort = FALSE, name = \"n\")  pl_add_count(.data, ..., sort = FALSE, name = \"n\")"},{"path":"/reference/pl_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the observations in each group — pl_count","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. sort TRUE, show largest groups top. name Name new column.","code":""},{"path":"/reference/pl_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the observations in each group — pl_count","text":"","code":"if (FALSE) { # packageVersion(\"polars\") >= \"0.6.2\" test <- polars::pl$DataFrame(mtcars) pl_count(test, cyl)  pl_count(test, cyl, am)  pl_count(test, cyl, am, sort = TRUE, name = \"count\")  pl_add_count(test, cyl, am, sort = TRUE, name = \"count\") }"},{"path":"/reference/pl_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicated rows in a Data/LazyFrame — pl_distinct","title":"Remove duplicated rows in a Data/LazyFrame — pl_distinct","text":"default, duplicates looked variables. possible specify subset variables duplicates looked . also possible keep either first occurrence, last occurence remove duplicates.","code":""},{"path":"/reference/pl_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicated rows in a Data/LazyFrame — pl_distinct","text":"","code":"pl_distinct(.data, ..., keep = \"first\", maintain_order = TRUE)"},{"path":"/reference/pl_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicated rows in a Data/LazyFrame — pl_distinct","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. keep Either \"first\" (keep first occurrence duplicated row), \"last\" (last occurrence) \"none\" (remove ofccurences duplicated rows). maintain_order Maintain row order. default can slow process large datasets prevents use streaming.","code":""},{"path":"/reference/pl_distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicated rows in a Data/LazyFrame — pl_distinct","text":"","code":"pl_test <- polars::pl$DataFrame(   iso_o = rep(c(\"AA\", \"AB\", \"AC\"), each = 2),   iso_d = rep(c(\"BA\", \"BB\", \"BC\"), each = 2),   value = 1:6 )  pl_distinct(pl_test) #> shape: (6, 3) #> ┌───────┬───────┬───────┐ #> │ iso_o ┆ iso_d ┆ value │ #> │ ---   ┆ ---   ┆ ---   │ #> │ str   ┆ str   ┆ i32   │ #> ╞═══════╪═══════╪═══════╡ #> │ AA    ┆ BA    ┆ 1     │ #> │ AA    ┆ BA    ┆ 2     │ #> │ AB    ┆ BB    ┆ 3     │ #> │ AB    ┆ BB    ┆ 4     │ #> │ AC    ┆ BC    ┆ 5     │ #> │ AC    ┆ BC    ┆ 6     │ #> └───────┴───────┴───────┘ pl_distinct(pl_test, iso_o) #> shape: (3, 3) #> ┌───────┬───────┬───────┐ #> │ iso_o ┆ iso_d ┆ value │ #> │ ---   ┆ ---   ┆ ---   │ #> │ str   ┆ str   ┆ i32   │ #> ╞═══════╪═══════╪═══════╡ #> │ AA    ┆ BA    ┆ 1     │ #> │ AB    ┆ BB    ┆ 3     │ #> │ AC    ┆ BC    ┆ 5     │ #> └───────┴───────┴───────┘"},{"path":"/reference/pl_drop_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop missing values — pl_drop_na","title":"Drop missing values — pl_drop_na","text":"default, drop rows contain missing values. possible specify subset variables missing values variables considered.","code":""},{"path":"/reference/pl_drop_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop missing values — pl_drop_na","text":"","code":"pl_drop_na(.data, ...)"},{"path":"/reference/pl_drop_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop missing values — pl_drop_na","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc.","code":""},{"path":"/reference/pl_drop_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop missing values — pl_drop_na","text":"","code":"tmp <- mtcars tmp[1:3, \"mpg\"] <- NA tmp[4, \"hp\"] <- NA pl_tmp <- polars::pl$DataFrame(tmp)  pl_drop_na(pl_tmp) #> shape: (28, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ 18.1 ┆ 6.0 ┆ 225.0 ┆ 105.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 24.4 ┆ 4.0 ┆ 146.7 ┆ 62.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘ pl_drop_na(pl_tmp, hp, mpg) #> shape: (28, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 18.7 ┆ 8.0 ┆ 360.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 2.0  │ #> │ 18.1 ┆ 6.0 ┆ 225.0 ┆ 105.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 14.3 ┆ 8.0 ┆ 360.0 ┆ 245.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> │ 24.4 ┆ 4.0 ┆ 146.7 ┆ 62.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘"},{"path":"/reference/pl_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill in missing values with previous or next value — pl_fill","title":"Fill in missing values with previous or next value — pl_fill","text":"Fills missing values selected columns using next previous entry. useful common output format values repeated, recorded change.","code":""},{"path":"/reference/pl_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill in missing values with previous or next value — pl_fill","text":"","code":"pl_fill(.data, ..., direction = c(\"down\", \"up\", \"downup\", \"updown\"))"},{"path":"/reference/pl_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill in missing values with previous or next value — pl_fill","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc. direction Direction fill missing values. Either \"\" (default), \"\", \"downup\" (.e. first ) \"updown\" (first ).","code":""},{"path":"/reference/pl_fill.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill in missing values with previous or next value — pl_fill","text":"grouped Data/LazyFrames, pl_fill() applied within group, meaning fill across group boundaries.","code":""},{"path":"/reference/pl_fill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill in missing values with previous or next value — pl_fill","text":"","code":"pl_test <- polars::pl$DataFrame(x = c(NA, 1), y = c(2, NA))  pl_fill(pl_test, everything(), direction = \"down\") #> shape: (2, 2) #> ┌──────┬─────┐ #> │ x    ┆ y   │ #> │ ---  ┆ --- │ #> │ f64  ┆ f64 │ #> ╞══════╪═════╡ #> │ null ┆ 2.0 │ #> │ 1.0  ┆ 2.0 │ #> └──────┴─────┘ pl_fill(pl_test, everything(), direction = \"up\") #> shape: (2, 2) #> ┌─────┬──────┐ #> │ x   ┆ y    │ #> │ --- ┆ ---  │ #> │ f64 ┆ f64  │ #> ╞═════╪══════╡ #> │ 1.0 ┆ 2.0  │ #> │ 1.0 ┆ null │ #> └─────┴──────┘  # with grouped data, it doesn't use values from other groups pl_grouped <- polars::pl$DataFrame(   grp = rep(c(\"A\", \"B\"), each = 3),   x = c(1, NA, NA, NA, 2, NA),   y = c(3, NA, 4, NA, 3, 1) ) |>   pl_group_by(grp)  pl_fill(pl_grouped, x, y, direction = \"down\") #> shape: (6, 3) #> ┌─────┬──────┬──────┐ #> │ grp ┆ x    ┆ y    │ #> │ --- ┆ ---  ┆ ---  │ #> │ str ┆ f64  ┆ f64  │ #> ╞═════╪══════╪══════╡ #> │ A   ┆ 1.0  ┆ 3.0  │ #> │ A   ┆ 1.0  ┆ 3.0  │ #> │ A   ┆ 1.0  ┆ 4.0  │ #> │ B   ┆ null ┆ null │ #> │ B   ┆ 2.0  ┆ 3.0  │ #> │ B   ┆ 2.0  ┆ 1.0  │ #> └─────┴──────┴──────┘ #> groups: [[1]] #> [1] \"grp\" #>  #> maintain order:  FALSE"},{"path":"/reference/pl_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep rows that match a condition — pl_filter","title":"Keep rows that match a condition — pl_filter","text":"function used subset data frame, retaining rows satisfy conditions. retained, row must produce value TRUE conditions. Note condition evaluates NA row dropped, unlike base subsetting [.","code":""},{"path":"/reference/pl_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep rows that match a condition — pl_filter","text":"","code":"pl_filter(.data, ...)"},{"path":"/reference/pl_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep rows that match a condition — pl_filter","text":".data Polars Data/LazyFrame ... Expressions return logical value, defined terms variables data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"/reference/pl_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep rows that match a condition — pl_filter","text":"","code":"pl_iris <- polars::pl$DataFrame(iris)  pl_filter(pl_iris, Sepal.Length < 5 & Species == \"setosa\") #> shape: (20, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.4         ┆ 1.4          ┆ 0.3         ┆ setosa  │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …       │ #> │ 4.5          ┆ 2.3         ┆ 1.3          ┆ 0.3         ┆ setosa  │ #> │ 4.4          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.8          ┆ 3.0         ┆ 1.4          ┆ 0.3         ┆ setosa  │ #> │ 4.6          ┆ 3.2         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘  pl_filter(pl_iris, Sepal.Length < Sepal.Width + Petal.Length) #> shape: (115, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.4          ┆ 3.9         ┆ 1.7          ┆ 0.4         ┆ setosa    │ #> │ 4.6          ┆ 3.4         ┆ 1.4          ┆ 0.3         ┆ setosa    │ #> │ 4.8          ┆ 3.4         ┆ 1.6          ┆ 0.2         ┆ setosa    │ #> │ 5.7          ┆ 4.4         ┆ 1.5          ┆ 0.4         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  pl_filter(pl_iris, Species == \"setosa\" | is.na(Species)) #> shape: (50, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …       │ #> │ 5.1          ┆ 3.8         ┆ 1.6          ┆ 0.2         ┆ setosa  │ #> │ 4.6          ┆ 3.2         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 5.3          ┆ 3.7         ┆ 1.5          ┆ 0.2         ┆ setosa  │ #> │ 5.0          ┆ 3.3         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘  pl_filter(pl_iris, between(Sepal.Length, 5, 6, include_bounds = FALSE)) #> shape: (51, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 5.4          ┆ 3.9         ┆ 1.7          ┆ 0.4         ┆ setosa    │ #> │ 5.4          ┆ 3.7         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ 5.8          ┆ 4.0         ┆ 1.2          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 5.8          ┆ 2.8         ┆ 5.1          ┆ 2.4         ┆ virginica │ #> │ 5.6          ┆ 2.8         ┆ 4.9          ┆ 2.0         ┆ virginica │ #> │ 5.8          ┆ 2.7         ┆ 5.1          ┆ 1.9         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  iris2 <- iris iris2$Species <- as.character(iris2$Species) iris2 |>   as_polars() |>   pl_filter(Species %in% c(\"setosa\", \"virginica\")) #> shape: (100, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘"},{"path":"/reference/pl_group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by one or more variables — pl_group_by","title":"Group by one or more variables — pl_group_by","text":"data operations done groups defined variables. pl_group_by() takes existing Polars Data/LazyFrame converts grouped one operations performed \"group\". pl_ungroup() removes grouping.","code":""},{"path":"/reference/pl_group_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by one or more variables — pl_group_by","text":"","code":"pl_group_by(.data, ..., maintain_order = TRUE)  pl_ungroup(.data)"},{"path":"/reference/pl_group_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by one or more variables — pl_group_by","text":".data Polars Data/LazyFrame ... Variables group (used pl_group_by() ). maintain_order Maintain row order. default can slow process large datasets prevents use streaming.","code":""},{"path":"/reference/pl_group_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group by one or more variables — pl_group_by","text":"","code":"by_cyl <- mtcars |>   as_polars() |>   pl_group_by(cyl)  by_cyl #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘ #> groups: [[1]] #> [1] \"cyl\" #>  #> maintain order:  TRUE  by_cyl |> pl_summarise(   disp = mean(disp),   hp = mean(hp) ) #> shape: (3, 3) #> ┌─────┬────────────┬────────────┐ #> │ cyl ┆ disp       ┆ hp         │ #> │ --- ┆ ---        ┆ ---        │ #> │ f64 ┆ f64        ┆ f64        │ #> ╞═════╪════════════╪════════════╡ #> │ 6.0 ┆ 183.314286 ┆ 122.285714 │ #> │ 4.0 ┆ 105.136364 ┆ 82.636364  │ #> │ 8.0 ┆ 353.1      ┆ 209.214286 │ #> └─────┴────────────┴────────────┘ #> groups: [[1]] #> [1] \"cyl\" #>  #> maintain order:  TRUE by_cyl |> pl_filter(disp == max(disp)) #> shape: (3, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ 24.4 ┆ 4.0 ┆ 146.7 ┆ 62.0  ┆ … ┆ 1.0 ┆ 0.0 ┆ 4.0  ┆ 2.0  │ #> │ 10.4 ┆ 8.0 ┆ 472.0 ┆ 205.0 ┆ … ┆ 0.0 ┆ 0.0 ┆ 3.0  ┆ 4.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘ #> groups: [[1]] #> [1] \"cyl\" #>  #> maintain order:  TRUE"},{"path":"/reference/pl_mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, modify, and delete columns — pl_mutate","title":"Create, modify, and delete columns — pl_mutate","text":"creates new columns functions existing variables. can also modify (name existing column) delete columns (setting value NULL).","code":""},{"path":"/reference/pl_mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, modify, and delete columns — pl_mutate","text":"","code":"pl_mutate(.data, ...)"},{"path":"/reference/pl_mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, modify, and delete columns — pl_mutate","text":".data Polars Data/LazyFrame ... Name-value pairs. name gives name column output. value can : vector length current group (whole data frame ungrouped). NULL, remove column.","code":""},{"path":"/reference/pl_mutate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create, modify, and delete columns — pl_mutate","text":"lot functions available base R (cos, sin, multiplying, etc.) packages (dplyr::lag(), etc.) implemented efficient way Polars. functions automatically translated Polars syntax hood can continue using classic R syntax functions. Polars built-replacement exist (example custom functions), R function passed map() Polars workflow. Note slower using functions can translated Polars syntax.","code":""},{"path":"/reference/pl_mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, modify, and delete columns — pl_mutate","text":"","code":"pl_iris <- polars::pl$DataFrame(iris)  # classic operation pl_mutate(pl_iris, x = Sepal.Width + Sepal.Length) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬─────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ x   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ --- │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ f64 │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 8.6 │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 7.9 │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 7.9 │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 7.7 │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …   │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 8.8 │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 9.5 │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 9.6 │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 8.9 │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴─────┘  # logical operation pl_mutate(pl_iris, x = Sepal.Width > Sepal.Length & Petal.Width > Petal.Length) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬───────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ x     │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ ---   │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ bool  │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═══════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ false │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ false │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ false │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ false │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …     │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ false │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ false │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ false │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ false │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴───────┘  # overwrite existing variable pl_mutate(pl_iris, Sepal.Width = Sepal.Width*2) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 7.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 6.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 6.4         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 6.2         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 5.0         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 6.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 6.8         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 6.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  # grouped computation pl_iris |>   pl_group_by(Species) |>   pl_mutate(     foo = mean(Sepal.Length)   ) #> shape: (150, 6) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┬───────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   ┆ foo   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       ┆ ---   │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       ┆ f64   │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╪═══════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    ┆ 5.006 │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         ┆ …     │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica ┆ 6.588 │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica ┆ 6.588 │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica ┆ 6.588 │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica ┆ 6.588 │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┴───────┘ #> groups: [[1]] #> [1] \"Species\" #>  #> maintain order:  FALSE"},{"path":"/reference/pl_pivot_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot Data/LazyFrame from wide to long — pl_pivot_longer","title":"Pivot Data/LazyFrame from wide to long — pl_pivot_longer","text":"Pivot Data/LazyFrame wide long","code":""},{"path":"/reference/pl_pivot_longer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot Data/LazyFrame from wide to long — pl_pivot_longer","text":"","code":"pl_pivot_longer(.data, cols, names_to = \"name\", values_to = \"value\")"},{"path":"/reference/pl_pivot_longer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot Data/LazyFrame from wide to long — pl_pivot_longer","text":".data Polars Data/LazyFrame cols Columns pivot longer format. Can anything accepted dplyr::select(). names_to (quoted) name column contain column names specified cols. values_to string specifying name column create data stored cell values.","code":""},{"path":"/reference/pl_pivot_longer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot Data/LazyFrame from wide to long — pl_pivot_longer","text":"","code":"pl_relig_income <- polars::pl$DataFrame(relig_income) pl_relig_income #> shape: (18, 11) #> ┌─────────────────┬───────┬─────────┬─────────┬───┬──────────┬───────────┬───────┬──────────────┐ #> │ religion        ┆ <$10k ┆ $10-20k ┆ $20-30k ┆ … ┆ $75-100k ┆ $100-150k ┆ >150k ┆ Don't        │ #> │ ---             ┆ ---   ┆ ---     ┆ ---     ┆   ┆ ---      ┆ ---       ┆ ---   ┆ know/refused │ #> │ str             ┆ f64   ┆ f64     ┆ f64     ┆   ┆ f64      ┆ f64       ┆ f64   ┆ ---          │ #> │                 ┆       ┆         ┆         ┆   ┆          ┆           ┆       ┆ f64          │ #> ╞═════════════════╪═══════╪═════════╪═════════╪═══╪══════════╪═══════════╪═══════╪══════════════╡ #> │ Agnostic        ┆ 27.0  ┆ 34.0    ┆ 60.0    ┆ … ┆ 122.0    ┆ 109.0     ┆ 84.0  ┆ 96.0         │ #> │ Atheist         ┆ 12.0  ┆ 27.0    ┆ 37.0    ┆ … ┆ 73.0     ┆ 59.0      ┆ 74.0  ┆ 76.0         │ #> │ Buddhist        ┆ 27.0  ┆ 21.0    ┆ 30.0    ┆ … ┆ 62.0     ┆ 39.0      ┆ 53.0  ┆ 54.0         │ #> │ Catholic        ┆ 418.0 ┆ 617.0   ┆ 732.0   ┆ … ┆ 949.0    ┆ 792.0     ┆ 633.0 ┆ 1489.0       │ #> │ …               ┆ …     ┆ …       ┆ …       ┆ … ┆ …        ┆ …         ┆ …     ┆ …            │ #> │ Other Christian ┆ 9.0   ┆ 7.0     ┆ 11.0    ┆ … ┆ 18.0     ┆ 14.0      ┆ 12.0  ┆ 18.0         │ #> │ Other Faiths    ┆ 20.0  ┆ 33.0    ┆ 40.0    ┆ … ┆ 46.0     ┆ 40.0      ┆ 41.0  ┆ 71.0         │ #> │ Other World     ┆ 5.0   ┆ 2.0     ┆ 3.0     ┆ … ┆ 3.0      ┆ 4.0       ┆ 4.0   ┆ 8.0          │ #> │ Religions       ┆       ┆         ┆         ┆   ┆          ┆           ┆       ┆              │ #> │ Unaffiliated    ┆ 217.0 ┆ 299.0   ┆ 374.0   ┆ … ┆ 407.0    ┆ 321.0     ┆ 258.0 ┆ 597.0        │ #> └─────────────────┴───────┴─────────┴─────────┴───┴──────────┴───────────┴───────┴──────────────┘  pl_relig_income |>   pl_pivot_longer(!religion, names_to = \"income\", values_to = \"count\") #> shape: (180, 3) #> ┌──────────────┬────────────────────┬───────┐ #> │ religion     ┆ income             ┆ count │ #> │ ---          ┆ ---                ┆ ---   │ #> │ str          ┆ str                ┆ f64   │ #> ╞══════════════╪════════════════════╪═══════╡ #> │ Agnostic     ┆ <$10k              ┆ 27.0  │ #> │ Agnostic     ┆ $10-20k            ┆ 34.0  │ #> │ Agnostic     ┆ $20-30k            ┆ 60.0  │ #> │ Agnostic     ┆ $30-40k            ┆ 81.0  │ #> │ …            ┆ …                  ┆ …     │ #> │ Unaffiliated ┆ $75-100k           ┆ 407.0 │ #> │ Unaffiliated ┆ $100-150k          ┆ 321.0 │ #> │ Unaffiliated ┆ >150k              ┆ 258.0 │ #> │ Unaffiliated ┆ Don't know/refused ┆ 597.0 │ #> └──────────────┴────────────────────┴───────┘"},{"path":"/reference/pl_pivot_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot Data/LazyFrame from long to wide — pl_pivot_wider","title":"Pivot Data/LazyFrame from long to wide — pl_pivot_wider","text":"Pivot Data/LazyFrame long wide","code":""},{"path":"/reference/pl_pivot_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot Data/LazyFrame from long to wide — pl_pivot_wider","text":"","code":"pl_pivot_wider(.data, id_cols, names_from, values_from, values_fill = NULL)"},{"path":"/reference/pl_pivot_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot Data/LazyFrame from long to wide — pl_pivot_wider","text":".data Polars Data/LazyFrame id_cols Defaults columns data except columns specified names_from values_from. names_from (quoted unquoted) column name whose values used names new columns. values_from (quoted unquoted) column name whose values used fill new columns. values_fill scalar used replace missing values new columns. Note type value applied new columns. example, provide character value fill numeric columns, columns converted character.","code":""},{"path":"/reference/pl_pivot_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot Data/LazyFrame from long to wide — pl_pivot_wider","text":"","code":"pl_fish_encounters <- polars::pl$DataFrame(fish_encounters)  pl_fish_encounters |>   pl_pivot_wider(names_from = station, values_from = seen) #> shape: (19, 12) #> ┌──────┬─────────┬───────┬────────┬───┬──────┬──────┬──────┬──────┐ #> │ fish ┆ Release ┆ I80_1 ┆ Lisbon ┆ … ┆ BCE2 ┆ BCW2 ┆ MAE  ┆ MAW  │ #> │ ---  ┆ ---     ┆ ---   ┆ ---    ┆   ┆ ---  ┆ ---  ┆ ---  ┆ ---  │ #> │ cat  ┆ i32     ┆ i32   ┆ i32    ┆   ┆ i32  ┆ i32  ┆ i32  ┆ i32  │ #> ╞══════╪═════════╪═══════╪════════╪═══╪══════╪══════╪══════╪══════╡ #> │ 4842 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1    ┆ 1    │ #> │ 4843 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1    ┆ 1    │ #> │ 4844 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1    ┆ 1    │ #> │ 4845 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ …    ┆ …       ┆ …     ┆ …      ┆ … ┆ …    ┆ …    ┆ …    ┆ …    │ #> │ 4862 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ null ┆ null │ #> │ 4863 ┆ 1       ┆ 1     ┆ null   ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 4864 ┆ 1       ┆ 1     ┆ null   ┆ … ┆ null ┆ null ┆ null ┆ null │ #> │ 4865 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ null ┆ null ┆ null ┆ null │ #> └──────┴─────────┴───────┴────────┴───┴──────┴──────┴──────┴──────┘  pl_fish_encounters |>   pl_pivot_wider(names_from = station, values_from = seen, values_fill = 0) #> shape: (19, 12) #> ┌──────┬─────────┬───────┬────────┬───┬──────┬──────┬─────┬─────┐ #> │ fish ┆ Release ┆ I80_1 ┆ Lisbon ┆ … ┆ BCE2 ┆ BCW2 ┆ MAE ┆ MAW │ #> │ ---  ┆ ---     ┆ ---   ┆ ---    ┆   ┆ ---  ┆ ---  ┆ --- ┆ --- │ #> │ cat  ┆ f64     ┆ f64   ┆ f64    ┆   ┆ f64  ┆ f64  ┆ f64 ┆ f64 │ #> ╞══════╪═════════╪═══════╪════════╪═══╪══════╪══════╪═════╪═════╡ #> │ 4842 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 1.0 ┆ 1.0 │ #> │ 4843 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 1.0 ┆ 1.0 │ #> │ 4844 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 1.0 ┆ 1.0 │ #> │ 4845 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> │ …    ┆ …       ┆ …     ┆ …      ┆ … ┆ …    ┆ …    ┆ …   ┆ …   │ #> │ 4862 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 1.0  ┆ 1.0  ┆ 0.0 ┆ 0.0 │ #> │ 4863 ┆ 1.0     ┆ 1.0   ┆ 0.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> │ 4864 ┆ 1.0     ┆ 1.0   ┆ 0.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> │ 4865 ┆ 1.0     ┆ 1.0   ┆ 1.0    ┆ … ┆ 0.0  ┆ 0.0  ┆ 0.0 ┆ 0.0 │ #> └──────┴─────────┴───────┴────────┴───┴──────┴──────┴─────┴─────┘  # be careful about the type of the replacement value! pl_fish_encounters |>   pl_pivot_wider(names_from = station, values_from = seen, values_fill = \"a\") #> shape: (19, 12) #> ┌──────┬─────────┬───────┬────────┬───┬──────┬──────┬─────┬─────┐ #> │ fish ┆ Release ┆ I80_1 ┆ Lisbon ┆ … ┆ BCE2 ┆ BCW2 ┆ MAE ┆ MAW │ #> │ ---  ┆ ---     ┆ ---   ┆ ---    ┆   ┆ ---  ┆ ---  ┆ --- ┆ --- │ #> │ cat  ┆ str     ┆ str   ┆ str    ┆   ┆ str  ┆ str  ┆ str ┆ str │ #> ╞══════╪═════════╪═══════╪════════╪═══╪══════╪══════╪═════╪═════╡ #> │ 4842 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1   ┆ 1   │ #> │ 4843 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1   ┆ 1   │ #> │ 4844 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ 1   ┆ 1   │ #> │ 4845 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> │ …    ┆ …       ┆ …     ┆ …      ┆ … ┆ …    ┆ …    ┆ …   ┆ …   │ #> │ 4862 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ 1    ┆ 1    ┆ a   ┆ a   │ #> │ 4863 ┆ 1       ┆ 1     ┆ a      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> │ 4864 ┆ 1       ┆ 1     ┆ a      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> │ 4865 ┆ 1       ┆ 1     ┆ 1      ┆ … ┆ a    ┆ a    ┆ a   ┆ a   │ #> └──────┴─────────┴───────┴────────┴───┴──────┴──────┴─────┴─────┘"},{"path":"/reference/pl_pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a variable of a Data/LazyFrame — pl_pull","title":"Extract a variable of a Data/LazyFrame — pl_pull","text":"returns R vector Polars Series.","code":""},{"path":"/reference/pl_pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a variable of a Data/LazyFrame — pl_pull","text":"","code":"pl_pull(.data, var)"},{"path":"/reference/pl_pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a variable of a Data/LazyFrame — pl_pull","text":".data Polars Data/LazyFrame var quoted unquoted variable name","code":""},{"path":"/reference/pl_pull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a variable of a Data/LazyFrame — pl_pull","text":"","code":"pl_test <- polars::pl$DataFrame(iris) pl_pull(pl_test, Sepal.Length) #>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 #>  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 #>  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 #>  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 #>  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 #>  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 #> [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 #> [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 #> [145] 6.7 6.7 6.3 6.5 6.2 5.9 pl_pull(pl_test, \"Sepal.Length\") #>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 #>  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 #>  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 #>  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 #>  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 #>  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 #> [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 #> [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 #> [145] 6.7 6.7 6.3 6.5 6.2 5.9"},{"path":"/reference/pl_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns — pl_rename","title":"Rename columns — pl_rename","text":"Rename columns","code":""},{"path":"/reference/pl_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns — pl_rename","text":"","code":"pl_rename(.data, ...)  pl_rename_with(.data, fn, cols = \"all\", ...)"},{"path":"/reference/pl_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns — pl_rename","text":".data Polars Data/LazyFrame ... pl_rename(), one following: params like new_name = \"old_name\" rename selected variables. params wrapped list pl_rename_with, additional arguments passed fn. fn Function apply column names cols Columns apply fn. Can anything accepted dplyr::select().","code":""},{"path":"/reference/pl_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns — pl_rename","text":"","code":"pl_test <- polars::pl$DataFrame(mtcars)  pl_rename(pl_test, miles_per_gallon = \"mpg\", horsepower = \"hp\") #> shape: (32, 11) #> ┌──────────────────┬─────┬───────┬────────────┬───┬─────┬─────┬──────┬──────┐ #> │ miles_per_gallon ┆ cyl ┆ disp  ┆ horsepower ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---              ┆ --- ┆ ---   ┆ ---        ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64              ┆ f64 ┆ f64   ┆ f64        ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════════════════╪═════╪═══════╪════════════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8             ┆ 4.0 ┆ 108.0 ┆ 93.0       ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4             ┆ 6.0 ┆ 258.0 ┆ 110.0      ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …                ┆ …   ┆ …     ┆ …          ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8             ┆ 8.0 ┆ 351.0 ┆ 264.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7             ┆ 6.0 ┆ 145.0 ┆ 175.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0             ┆ 8.0 ┆ 301.0 ┆ 335.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4             ┆ 4.0 ┆ 121.0 ┆ 109.0      ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────────────────┴─────┴───────┴────────────┴───┴─────┴─────┴──────┴──────┘  pl_rename(pl_test, list(miles_per_gallon = \"mpg\", horsepower = \"hp\")) #> shape: (32, 11) #> ┌──────────────────┬─────┬───────┬────────────┬───┬─────┬─────┬──────┬──────┐ #> │ miles_per_gallon ┆ cyl ┆ disp  ┆ horsepower ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---              ┆ --- ┆ ---   ┆ ---        ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64              ┆ f64 ┆ f64   ┆ f64        ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════════════════╪═════╪═══════╪════════════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8             ┆ 4.0 ┆ 108.0 ┆ 93.0       ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4             ┆ 6.0 ┆ 258.0 ┆ 110.0      ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …                ┆ …   ┆ …     ┆ …          ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8             ┆ 8.0 ┆ 351.0 ┆ 264.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7             ┆ 6.0 ┆ 145.0 ┆ 175.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0             ┆ 8.0 ┆ 301.0 ┆ 335.0      ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4             ┆ 4.0 ┆ 121.0 ┆ 109.0      ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────────────────┴─────┴───────┴────────────┴───┴─────┴─────┴──────┴──────┘  pl_rename(pl_test, `Miles per gallon` = \"mpg\", `Horse power` = \"hp\") #> shape: (32, 11) #> ┌──────────────────┬─────┬───────┬─────────────┬───┬─────┬─────┬──────┬──────┐ #> │ Miles per gallon ┆ cyl ┆ disp  ┆ Horse power ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---              ┆ --- ┆ ---   ┆ ---         ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64              ┆ f64 ┆ f64   ┆ f64         ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════════════════╪═════╪═══════╪═════════════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0             ┆ 6.0 ┆ 160.0 ┆ 110.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8             ┆ 4.0 ┆ 108.0 ┆ 93.0        ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4             ┆ 6.0 ┆ 258.0 ┆ 110.0       ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …                ┆ …   ┆ …     ┆ …           ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8             ┆ 8.0 ┆ 351.0 ┆ 264.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7             ┆ 6.0 ┆ 145.0 ┆ 175.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0             ┆ 8.0 ┆ 301.0 ┆ 335.0       ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4             ┆ 4.0 ┆ 121.0 ┆ 109.0       ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────────────────┴─────┴───────┴─────────────┴───┴─────┴─────┴──────┴──────┘  pl_rename_with(pl_test, toupper, cols = contains(\"p\")) #> shape: (32, 11) #> ┌──────┬─────┬───────┬───────┬───┬─────┬─────┬──────┬──────┐ #> │ MPG  ┆ cyl ┆ DISP  ┆ HP    ┆ … ┆ vs  ┆ am  ┆ gear ┆ carb │ #> │ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ --- ┆ ---  ┆ ---  │ #> │ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64 ┆ f64  ┆ f64  │ #> ╞══════╪═════╪═══════╪═══════╪═══╪═════╪═════╪══════╪══════╡ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │ #> │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │ #> │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │ #> │ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …   ┆ …    ┆ …    │ #> │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │ #> │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │ #> │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │ #> │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │ #> └──────┴─────┴───────┴───────┴───┴─────┴─────┴──────┴──────┘  pl_test_2 <- polars::pl$DataFrame(iris)  pl_rename_with(pl_test_2, function(x) tolower(gsub(\".\", \"_\", x, fixed = TRUE))) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ sepal_length ┆ sepal_width ┆ petal_length ┆ petal_width ┆ species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘  pl_rename_with(pl_test_2, \\(x) tolower(gsub(\".\", \"_\", x, fixed = TRUE))) #> shape: (150, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ sepal_length ┆ sepal_width ┆ petal_length ┆ petal_width ┆ species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa    │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa    │ #> │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ setosa    │ #> │ …            ┆ …           ┆ …            ┆ …           ┆ …         │ #> │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ virginica │ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘"},{"path":"/reference/pl_replace_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NAs with specified values — pl_replace_na","title":"Replace NAs with specified values — pl_replace_na","text":"Replace NAs specified values","code":""},{"path":"/reference/pl_replace_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NAs with specified values — pl_replace_na","text":"","code":"pl_replace_na(.data, replace)"},{"path":"/reference/pl_replace_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace NAs with specified values — pl_replace_na","text":".data Polars Data/LazyFrame replace Either scalar used replace NA columns, named list column name value used replace NA . column type automatically converted type replacement value.","code":""},{"path":"/reference/pl_replace_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace NAs with specified values — pl_replace_na","text":"","code":"pl_test <- polars::pl$DataFrame(x = c(NA, 1), y = c(2, NA))  # replace all NA with 0 pl_replace_na(pl_test, 0) #> shape: (2, 2) #> ┌─────┬─────┐ #> │ x   ┆ y   │ #> │ --- ┆ --- │ #> │ f64 ┆ f64 │ #> ╞═════╪═════╡ #> │ 0.0 ┆ 2.0 │ #> │ 1.0 ┆ 0.0 │ #> └─────┴─────┘  # custom replacement per column pl_replace_na(pl_test, list(x = 0, y = 999)) #> shape: (2, 2) #> ┌─────┬───────┐ #> │ x   ┆ y     │ #> │ --- ┆ ---   │ #> │ f64 ┆ f64   │ #> ╞═════╪═══════╡ #> │ 0.0 ┆ 2.0   │ #> │ 1.0 ┆ 999.0 │ #> └─────┴───────┘  # be careful to use the same type for the replacement and for the column! pl_replace_na(pl_test, list(x = \"a\", y = \"unknown\")) #> shape: (2, 2) #> ┌─────┬─────────┐ #> │ x   ┆ y       │ #> │ --- ┆ ---     │ #> │ str ┆ str     │ #> ╞═════╪═════════╡ #> │ a   ┆ 2.0     │ #> │ 1.0 ┆ unknown │ #> └─────┴─────────┘"},{"path":"/reference/pl_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select columns from a Data/LazyFrame — pl_select","title":"Select columns from a Data/LazyFrame — pl_select","text":"Select columns Data/LazyFrame","code":""},{"path":"/reference/pl_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select columns from a Data/LazyFrame — pl_select","text":"","code":"pl_select(.data, ...)"},{"path":"/reference/pl_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select columns from a Data/LazyFrame — pl_select","text":".data Polars Data/LazyFrame ... expression accepted dplyr::select(): variable names, column numbers, select helpers, etc.","code":""},{"path":"/reference/pl_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select columns from a Data/LazyFrame — pl_select","text":"","code":"pl_iris <- polars::pl$DataFrame(iris)  pl_select(pl_iris, c(\"Sepal.Length\", \"Sepal.Width\")) #> shape: (150, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 4.9          ┆ 3.0         │ #> │ 4.7          ┆ 3.2         │ #> │ 4.6          ┆ 3.1         │ #> │ …            ┆ …           │ #> │ 6.3          ┆ 2.5         │ #> │ 6.5          ┆ 3.0         │ #> │ 6.2          ┆ 3.4         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘ pl_select(pl_iris, Sepal.Length, Sepal.Width) #> shape: (150, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 4.9          ┆ 3.0         │ #> │ 4.7          ┆ 3.2         │ #> │ 4.6          ┆ 3.1         │ #> │ …            ┆ …           │ #> │ 6.3          ┆ 2.5         │ #> │ 6.5          ┆ 3.0         │ #> │ 6.2          ┆ 3.4         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘ pl_select(pl_iris, 1:3) #> shape: (150, 3) #> ┌──────────────┬─────────────┬──────────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length │ #> │ ---          ┆ ---         ┆ ---          │ #> │ f64          ┆ f64         ┆ f64          │ #> ╞══════════════╪═════════════╪══════════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          │ #> │ 4.9          ┆ 3.0         ┆ 1.4          │ #> │ 4.7          ┆ 3.2         ┆ 1.3          │ #> │ 4.6          ┆ 3.1         ┆ 1.5          │ #> │ …            ┆ …           ┆ …            │ #> │ 6.3          ┆ 2.5         ┆ 5.0          │ #> │ 6.5          ┆ 3.0         ┆ 5.2          │ #> │ 6.2          ┆ 3.4         ┆ 5.4          │ #> │ 5.9          ┆ 3.0         ┆ 5.1          │ #> └──────────────┴─────────────┴──────────────┘ pl_select(pl_iris, starts_with(\"Sepal\")) #> shape: (150, 2) #> ┌──────────────┬─────────────┐ #> │ Sepal.Length ┆ Sepal.Width │ #> │ ---          ┆ ---         │ #> │ f64          ┆ f64         │ #> ╞══════════════╪═════════════╡ #> │ 5.1          ┆ 3.5         │ #> │ 4.9          ┆ 3.0         │ #> │ 4.7          ┆ 3.2         │ #> │ 4.6          ┆ 3.1         │ #> │ …            ┆ …           │ #> │ 6.3          ┆ 2.5         │ #> │ 6.5          ┆ 3.0         │ #> │ 6.2          ┆ 3.4         │ #> │ 5.9          ┆ 3.0         │ #> └──────────────┴─────────────┘ pl_select(pl_iris, -ends_with(\"Length\")) #> shape: (150, 3) #> ┌─────────────┬─────────────┬───────────┐ #> │ Sepal.Width ┆ Petal.Width ┆ Species   │ #> │ ---         ┆ ---         ┆ ---       │ #> │ f64         ┆ f64         ┆ cat       │ #> ╞═════════════╪═════════════╪═══════════╡ #> │ 3.5         ┆ 0.2         ┆ setosa    │ #> │ 3.0         ┆ 0.2         ┆ setosa    │ #> │ 3.2         ┆ 0.2         ┆ setosa    │ #> │ 3.1         ┆ 0.2         ┆ setosa    │ #> │ …           ┆ …           ┆ …         │ #> │ 2.5         ┆ 1.9         ┆ virginica │ #> │ 3.0         ┆ 2.0         ┆ virginica │ #> │ 3.4         ┆ 2.3         ┆ virginica │ #> │ 3.0         ┆ 1.8         ┆ virginica │ #> └─────────────┴─────────────┴───────────┘"},{"path":"/reference/pl_separate.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate a character column into multiple columns based on a substring — pl_separate","title":"Separate a character column into multiple columns based on a substring — pl_separate","text":"Currently, splitting column regular expression position possible.","code":""},{"path":"/reference/pl_separate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate a character column into multiple columns based on a substring — pl_separate","text":"","code":"pl_separate(.data, col, into, sep = \"[^[:alnum:]]+\", remove = TRUE)"},{"path":"/reference/pl_separate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate a character column into multiple columns based on a substring — pl_separate","text":".data Polars Data/LazyFrame col Column split Character vector containing names new variables create. Use NA omit variable output. sep String used split column. remove TRUE, remove input column output data frame.","code":""},{"path":"/reference/pl_separate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate a character column into multiple columns based on a substring — pl_separate","text":"","code":"test <- polars::pl$DataFrame(   x = c(NA, \"x.y\", \"x.z\", \"y.z\") ) pl_separate(test, x, into = c(\"foo\", \"foo2\"), sep = \".\") #> shape: (4, 2) #> ┌──────┬──────┐ #> │ foo  ┆ foo2 │ #> │ ---  ┆ ---  │ #> │ str  ┆ str  │ #> ╞══════╪══════╡ #> │ null ┆ null │ #> │ x    ┆ y    │ #> │ x    ┆ z    │ #> │ y    ┆ z    │ #> └──────┴──────┘"},{"path":"/reference/pl_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset the first or last rows of a Data/LazyFrame — pl_slice_tail","title":"Subset the first or last rows of a Data/LazyFrame — pl_slice_tail","text":"Subset first last rows Data/LazyFrame","code":""},{"path":"/reference/pl_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset the first or last rows of a Data/LazyFrame — pl_slice_tail","text":"","code":"pl_slice_tail(.data, n = 5)  pl_slice_head(.data, n = 5)"},{"path":"/reference/pl_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset the first or last rows of a Data/LazyFrame — pl_slice_tail","text":".data Polars Data/LazyFrame n number rows select start end data.","code":""},{"path":"/reference/pl_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset the first or last rows of a Data/LazyFrame — pl_slice_tail","text":"","code":"pl_test <- polars::pl$DataFrame(iris) pl_slice_head(pl_test, 3) #> shape: (3, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat     │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡ #> │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ setosa  │ #> │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ setosa  │ #> └──────────────┴─────────────┴──────────────┴─────────────┴─────────┘ pl_slice_tail(pl_test, 3) #> shape: (3, 5) #> ┌──────────────┬─────────────┬──────────────┬─────────────┬───────────┐ #> │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ Species   │ #> │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---       │ #> │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ cat       │ #> ╞══════════════╪═════════════╪══════════════╪═════════════╪═══════════╡ #> │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ virginica │ #> │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ virginica │ #> │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ virginica │ #> └──────────────┴─────────────┴──────────────┴─────────────┴───────────┘"},{"path":"/reference/pl_summarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize each group down to one row — pl_summarize","title":"Summarize each group down to one row — pl_summarize","text":"pl_summarize() returns one row combination grouping variables (one difference dplyr::summarize() pl_summarize() accepts grouped data). contain one column grouping variable one column summary statistics specified.","code":""},{"path":"/reference/pl_summarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize each group down to one row — pl_summarize","text":"","code":"pl_summarize(.data, ...)  pl_summarise(.data, ...)"},{"path":"/reference/pl_summarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize each group down to one row — pl_summarize","text":".data Polars Data/LazyFrame ... Name-value pairs. name gives name column output. value can : vector length current group (whole data frame ungrouped). NULL, remove column.","code":""},{"path":"/reference/pl_summarize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize each group down to one row — pl_summarize","text":"","code":"mtcars |>   as_polars() |>   pl_group_by(cyl) |>   pl_summarize(gear = mean(gear), gear2 = sd(gear)) #> shape: (3, 3) #> ┌─────┬──────────┬──────────┐ #> │ cyl ┆ gear     ┆ gear2    │ #> │ --- ┆ ---      ┆ ---      │ #> │ f64 ┆ f64      ┆ f64      │ #> ╞═════╪══════════╪══════════╡ #> │ 6.0 ┆ 3.857143 ┆ 0.690066 │ #> │ 4.0 ┆ 4.090909 ┆ 0.53936  │ #> │ 8.0 ┆ 3.285714 ┆ 0.726273 │ #> └─────┴──────────┴──────────┘ #> groups: [[1]] #> [1] \"cyl\" #>  #> maintain order:  TRUE"},{"path":"/reference/relig_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Pew religion and income survey — relig_income","title":"Pew religion and income survey — relig_income","text":"dataset reexported tidyr::relig_income","code":""},{"path":"/reference/relig_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pew religion and income survey — relig_income","text":"","code":"relig_income"},{"path":"/reference/relig_income.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pew religion and income survey — relig_income","text":"dataset variables: religion: name religion <$10k-Don\\'t know/refused: Number respondents income range column name","code":""},{"path":"/reference/relig_income.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pew religion and income survey — relig_income","text":"Downloaded https://www.pewresearch.org/religion/religious-landscape-study/ (downloaded November 2009)","code":""}]
