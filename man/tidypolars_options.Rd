% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/global_options.R
\name{tidypolars_options}
\alias{tidypolars_options}
\title{\code{tidypolars} global options}
\description{
\code{tidypolars} has the following global options:
\itemize{
\item \code{tidypolars_unknown_args} controls what happens when some arguments passed
in an expression are unknown, e.g the argument \code{prob} in \code{sample()}. The
default (\code{"warn"}) only warns the user that some arguments are ignored by
\code{tidypolars}. The only other accepted value is \code{"error"} to throw an
error when this happens.
\item \code{tidypolars_fallback_to_r} controls what happens when an unknown function
(that isn't translated to use polars syntax) is passed in an expression.
The default is \code{FALSE}, meaning that unknown functions will trigger an
error. Setting this option to \code{TRUE} will convert the data to R, apply the
unknown function, and convert the output back to polars.
\strong{Using the fallback to R has several drawbacks:}
\itemize{
\item it loses some of polars built-in parallelism and other optimizations;
\item the session may crash or experience a severe slowdown when the data is
converted to R (especially if the input is a LazyFrame).
}
}

The package \code{polars} also contains several global options that may be useful,
such as changing the default behavior when converting Int64 values to R:
\url{https://pola-rs.github.io/r-polars/man/polars_options.html}.
}
\examples{
\dontshow{if (require("dplyr", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
##### Unknown arguments

options(tidypolars_unknown_args = "warn")
test <- polars::pl$DataFrame(x = c(2, 1, 5, 3, 1))

# The default is to warn the user
mutate(test, x2 = sample(x, prob = 0.5))

# But one can make this stricter and throw an error when this happens
options(tidypolars_unknown_args = "error")
try(mutate(test, x2 = sample(x, prob = 0.5)))

options(tidypolars_unknown_args = "warn")

##### Fallback to R

test <- polars::pl$DataFrame(x = c(2, 1, 5, 3, 1))

# The default is to error because mad() isn't translated internally
try(mutate(test, x2 = mad(x)))

# But one can allow fallback to R to apply this function and then convert
# the output back to polars (see drawbacks in the "description" section
# above)
options(tidypolars_fallback_to_r = TRUE)
mutate(test, x2 = mad(x))

options(tidypolars_fallback_to_r = FALSE)
\dontshow{\}) # examplesIf}
}
