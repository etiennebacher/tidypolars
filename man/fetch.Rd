% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch.R
\name{fetch}
\alias{fetch}
\title{Fetch \code{n} rows of a LazyFrame}
\usage{
fetch(
  .data,
  n_rows = 500,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  no_optimization = FALSE,
  streaming = FALSE
)
}
\arguments{
\item{n_rows}{Number of rows to fetch.}
}
\description{
Fetch is a way to collect only the first \code{n} rows of a LazyFrame. It is
mainly used to test that a query runs as expected on a subset of the data
before using \code{collect()} on the full query. Note that fetching \code{n} rows
doesn't mean that the output will actually contain \code{n} rows, see the section
'Details' for more information.
}
\details{
The parameter \code{n_rows} indicates how many rows from the LazyFrame should be
used at the beginning of the query, but it doesn't guarantee that \code{n_rows} will
be returned. For example, if the query contains a filter or join operations
with other datasets, then the final number of rows can be lower than \code{n_rows}.
On the other hand, appending some rows during the query can lead to an output
that has more rows than \code{n_rows}.
}
\examples{
dat_lazy <- polars::pl$DataFrame(iris)$lazy()

# this will return 30 rows
fetch(dat_lazy, 30)

# this will return less than 30 rows because there are less than 30 matches
# for this filter in the whole dataset
dat_lazy |>
  filter(Sepal.Length > 7.0) |>
  fetch(30)
}
\seealso{
\code{\link[=collect]{collect()}} for applying a lazy query on the full data.
}
