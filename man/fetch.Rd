% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch.R
\name{fetch}
\alias{fetch}
\title{Fetch \code{n} rows of a LazyFrame}
\usage{
fetch(
  .data,
  n_rows = 500,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  cluster_with_columns = TRUE,
  no_optimization = FALSE,
  engine = c("auto", "in-memory", "streaming"),
  streaming = FALSE
)
}
\arguments{
\item{.data}{A Polars LazyFrame}

\item{n_rows}{Number of rows to fetch.}

\item{type_coercion}{Coerce types such that operations succeed and run on
minimal required memory (default is \code{TRUE}).}

\item{predicate_pushdown}{Applies filters as early as possible at scan level
(default is \code{TRUE}).}

\item{projection_pushdown}{Select only the columns that are needed at the scan
level (default is \code{TRUE}).}

\item{simplify_expression}{Various optimizations, such as constant folding
and replacing expensive operations with faster alternatives (default is
\code{TRUE}).}

\item{slice_pushdown}{Only load the required slice from the scan. Don't
materialize sliced outputs level. Don't materialize sliced outputs (default
is \code{TRUE}).}

\item{comm_subplan_elim}{Cache branching subplans that occur on self-joins or
unions (default is \code{TRUE}).}

\item{comm_subexpr_elim}{Cache common subexpressions (default is \code{TRUE}).}

\item{cluster_with_columns}{Combine sequential independent calls to
\verb{$with_columns()}.}

\item{no_optimization}{Sets the following optimizations to \code{FALSE}:
\code{predicate_pushdown}, \code{projection_pushdown},  \code{slice_pushdown},
\code{simplify_expression}. Default is \code{FALSE}.}

\item{engine}{The engine name to use for processing the query. One of the
followings:
\itemize{
\item \code{"auto"} (default): Select the engine automatically. The \code{"in-memory"}
engine will be selected for most cases.
\item \code{"in-memory"}: Use the in-memory engine.
\item \code{"streaming"}: Use the streaming engine, usually faster and can handle
larger-than-memory data.
}}

\item{streaming}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Deprecated, use \code{engine}
instead.}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}

Use \code{head()} before \code{collect()} to only get a subset of the data.
}
\details{
The parameter \code{n_rows} indicates how many rows from the LazyFrame should be
used at the beginning of the query, but it doesn't guarantee that \code{n_rows} will
be returned. For example, if the query contains a filter or join operations
with other datasets, then the final number of rows can be lower than \code{n_rows}.
On the other hand, appending some rows during the query can lead to an output
that has more rows than \code{n_rows}.
}
\seealso{
\code{\link[=collect]{collect()}} for applying a lazy query on the full data.
}
