% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_tibble.R
\name{as_tibble.tidypolars}
\alias{as_tibble.tidypolars}
\title{Convert a Polars DataFrame to an R data.frame or to a tibble}
\usage{
\method{as_tibble}{tidypolars}(x, int64_conversion = polars::polars_options()$int64_conversion, ...)
}
\arguments{
\item{x}{A Polars Data/LazyFrame}

\item{int64_conversion}{How should Int64 values be handled when converting a
polars object to R? See the documentation in
\code{\link[polars:S3_as.data.frame]{polars::as.data.frame.RPolarsDataFrame}}.}

\item{...}{Options passed to \code{\link[polars:S3_as.data.frame]{polars::as.data.frame.RPolarsDataFrame}}.}
}
\description{
This makes it easier to convert a polars \link[=DataFrame_class]{DataFrame} or
\link[=LazyFrame_class]{LazyFrame} to a \code{\link[tibble:tibble]{tibble}} in a pipe
workflow.
}
\section{About int64}{
 Int64 is a format accepted in Polars but not natively
in R (the package \code{bit64} helps with that).

Since \code{tidypolars} is simply a wrapper around \code{polars}, the behavior of
\code{int64} values will depend on the options set in \code{polars}. Use
\code{options(polars.int64_conversion =)} to specify how int64 variables should
be handled. See the \href{https://pola-rs.github.io/r-polars/man/polars_options.html}{documentation in \code{polars}} for
the possible options.
}

\examples{
\dontshow{if (require("dplyr", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
iris |>
  as_polars_df() |>
  filter(Sepal.Length > 6) |>
  as_tibble()
\dontshow{\}) # examplesIf}
}
