% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/collect.R
\name{compute.RPolarsLazyFrame}
\alias{compute.RPolarsLazyFrame}
\alias{collect.RPolarsLazyFrame}
\title{Collect a LazyFrame}
\usage{
\method{compute}{RPolarsLazyFrame}(
  x,
  ...,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  cluster_with_columns = TRUE,
  no_optimization = FALSE,
  streaming = FALSE,
  collect_in_background = FALSE
)

\method{collect}{RPolarsLazyFrame}(
  x,
  ...,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  cluster_with_columns = TRUE,
  no_optimization = FALSE,
  streaming = FALSE,
  collect_in_background = FALSE
)
}
\arguments{
\item{x}{A Polars LazyFrame}

\item{...}{Not used.}

\item{type_coercion}{Coerce types such that operations succeed and run on
minimal required memory (default is \code{TRUE}).}

\item{predicate_pushdown}{Applies filters as early as possible at scan level
(default is \code{TRUE}).}

\item{projection_pushdown}{Select only the columns that are needed at the scan
level (default is \code{TRUE}).}

\item{simplify_expression}{Various optimizations, such as constant folding
and replacing expensive operations with faster alternatives (default is
\code{TRUE}).}

\item{slice_pushdown}{Only load the required slice from the scan. Don't
materialize sliced outputs level. Don't materialize sliced outputs (default
is \code{TRUE}).}

\item{comm_subplan_elim}{Cache branching subplans that occur on self-joins or
unions (default is \code{TRUE}).}

\item{comm_subexpr_elim}{Cache common subexpressions (default is \code{TRUE}).}

\item{cluster_with_columns}{Combine sequential independent calls to
\verb{$with_columns()}.}

\item{no_optimization}{Sets the following optimizations to \code{FALSE}:
\code{predicate_pushdown}, \code{projection_pushdown},  \code{slice_pushdown},
\code{simplify_expression}. Default is \code{FALSE}.}

\item{streaming}{Run parts of the query in a streaming fashion (this is in
an alpha state). Default is \code{FALSE}.}

\item{collect_in_background}{Detach this query from the R session. Computation
will start in background. Get a handle which later can be converted into the
resulting DataFrame. Useful in interactive mode to not lock R session (default
is \code{FALSE}).}
}
\description{
\code{compute()} checks the query, optimizes it in the background, and runs it.
The output is a \link[polars:DataFrame_class]{Polars DataFrame}. \code{collect()} is
similar to \code{compute()} but converts the output to an R \link{data.frame}, which
consumes more memory.

Until \code{tidypolars} 0.7.0, there was only \code{collect()} and it was used to
collect a LazyFrame into a Polars DataFrame. This usage is still valid for
now but will change in 0.8.0 to automatically convert a DataFrame to a
\code{data.frame}. Use \code{compute()} to have a Polars DataFrame as output.
}
\examples{
\dontshow{if (require("dplyr", quietly = TRUE) && require("tidyr", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
dat_lazy <- polars::pl$DataFrame(iris)$lazy()

compute(dat_lazy)

# you can build a query and add compute() as the last piece
dat_lazy |>
  select(starts_with("Sepal")) |>
  filter(between(Sepal.Length, 5, 6)) |>
  compute()

# call collect() instead to return a data.frame (note that this is more
# expensive than compute())
dat_lazy |>
  select(starts_with("Sepal")) |>
  filter(between(Sepal.Length, 5, 6)) |>
  collect()
\dontshow{\}) # examplesIf}
}
\seealso{
\code{\link[=fetch]{fetch()}} for applying a lazy query on a subset of the data.
}
