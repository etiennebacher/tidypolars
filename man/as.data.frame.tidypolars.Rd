% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as.data.frame.R
\name{as.data.frame.tidypolars}
\alias{as.data.frame.tidypolars}
\alias{as_tibble.tidypolars}
\title{Convert a Polars DataFrame to an R data.frame or to a tibble}
\usage{
\method{as.data.frame}{tidypolars}(x, ...)

\method{as_tibble}{tidypolars}(x, ...)
}
\arguments{
\item{x}{A Polars DataFrame. To convert a LazyFrame, you first need to
explicitly call \code{collect()}.}

\item{...}{Not used.}
}
\description{
This is a simple wrapper of \verb{$to_data_frame()} present in \code{polars} that makes
it easier to convert a polars \link[=DataFrame_class]{DataFrame} to a \code{\link{data.frame}} or to a
\code{\link[tibble:tibble]{tibble}} in a pipe workflow.
}
\section{About int64}{
 Int64 is a format accepted in Polars but not natively
in R (the package \code{bit64} helps with that).

Since \code{tidypolars} is simply a wrapper around \code{polars}, the behavior of
\code{int64} values will depend on the options set in \code{polars}. Use
\code{options(polars.int64_conversion =)} to specify how int64 variables should
be handled. See the \href{https://rpolars.github.io/man/polars_options.html#details}{documentation in \code{polars}} for
the possible options.
}

\examples{
\dontshow{if (require("dplyr", quietly = TRUE) && require("tidyr", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
iris |>
  as_polars_df() |>
  filter(Sepal.Length > 6) |>
  as_tibble()
\dontshow{\}) # examplesIf}
}
