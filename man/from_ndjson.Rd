% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_scan.R
\name{from_ndjson}
\alias{from_ndjson}
\alias{read_ndjson_polars}
\alias{scan_ndjson_polars}
\title{Import data from NDJSON file(s)}
\usage{
read_ndjson_polars(
  source,
  ...,
  infer_schema_length = 100,
  batch_size = NULL,
  n_rows = NULL,
  low_memory = FALSE,
  rechunk = FALSE,
  row_index_name = NULL,
  row_index_offset = 0,
  ignore_errors = FALSE,
  reuse_downloaded
)

scan_ndjson_polars(
  source,
  ...,
  infer_schema_length = 100,
  batch_size = NULL,
  n_rows = NULL,
  low_memory = FALSE,
  rechunk = FALSE,
  row_index_name = NULL,
  row_index_offset = 0,
  ignore_errors = FALSE,
  reuse_downloaded
)
}
\arguments{
\item{source}{Path(s) to a file or directory. When needing to authenticate
for scanning cloud locations, see the \code{storage_options} parameter.}

\item{...}{These dots are for future extensions and must be empty.}

\item{infer_schema_length}{The maximum number of rows to scan for schema
inference. If \code{NULL}, the full data may be scanned (this is slow). Set
\code{infer_schema = FALSE} to read all columns as \code{pl$String}.}

\item{batch_size}{Number of rows to read in each batch.}

\item{n_rows}{Stop reading from the source after reading \code{n_rows}.}

\item{low_memory}{Reduce memory pressure at the expense of performance.}

\item{rechunk}{Reallocate to contiguous memory when all chunks/files are parsed.}

\item{row_index_name}{If not \code{NULL}, this will insert a row index column with
the given name.}

\item{row_index_offset}{Offset to start the row index column (only used if
the name is set by \code{row_index_name}).}

\item{ignore_errors}{Keep reading the file even if some lines yield errors.
You can also use \code{infer_schema = FALSE} to read all columns as UTF8 to
check which values might cause an issue.}

\item{reuse_downloaded}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}
Deprecated with no replacement.}
}
\value{
The scan function returns a LazyFrame, the read function returns a DataFrame.
}
\description{
\code{read_ndjson_polars()} imports the data as a Polars DataFrame.

\code{scan_ndjson_polars()} imports the data as a Polars LazyFrame.
}
\examples{
\dontshow{if (require("dplyr", quietly = TRUE) && require("jsonlite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
### Read or scan a single NDJSON file ------------------------

# Setup: create a NDJSON file
dest <- tempfile(fileext = ".json")
jsonlite::stream_out(mtcars, file(dest), verbose = FALSE)

# Import this file as a DataFrame for eager evaluation
read_ndjson_polars(dest) |>
  arrange(mpg)

# Import this file as a LazyFrame for lazy evaluation
scan_ndjson_polars(dest) |>
  arrange(mpg) |>
  compute()


### Read or scan several all NDJSON files in a folder ------------------------

# Setup: create a folder "output" that contains two NDJSON files
dest_folder <- file.path(tempdir(), "output")
dir.create(dest_folder, showWarnings = FALSE)
dest1 <- file.path(dest_folder, "output_1.json")
dest2 <- file.path(dest_folder, "output_2.json")

jsonlite::stream_out(mtcars[1:16, ], file(dest1), verbose = FALSE)
jsonlite::stream_out(mtcars[17:32, ], file(dest2), verbose = FALSE)
list.files(dest_folder)

# Import all files as a LazyFrame
scan_ndjson_polars(dest_folder) |>
  arrange(mpg) |>
  compute()


### Read or scan all NDJSON files that match a glob pattern ------------------------

# Setup: create a folder "output" that contains three NDJSON files,
# two of which follow the pattern "output_XXX.json"
dest_folder <- file.path(tempdir(), "output_glob")
dir.create(dest_folder, showWarnings = FALSE)
dest1 <- file.path(dest_folder, "output_1.json")
dest2 <- file.path(dest_folder, "output_2.json")
dest3 <- file.path(dest_folder, "other_output.json")

jsonlite::stream_out(mtcars[1:16, ], file(dest1), verbose = FALSE)
jsonlite::stream_out(mtcars[17:32, ], file(dest2), verbose = FALSE)
jsonlite::stream_out(iris, file(dest3), verbose = FALSE)
list.files(dest_folder)

# Import only the files whose name match "output_XXX.json" as a LazyFrame
scan_ndjson_polars(paste0(dest_folder, "/output_*.json")) |>
  arrange(mpg) |>
  compute()
\dontshow{\}) # examplesIf}
}
